
    Task: Translate the given CUDA code to its equivalent High performace CPU C code.  
    Context: You are provided with a CUDA code snippet that needs to be translated into CPU C code. The translation should preserve the same functionality as much as possible. Focus on translating the CUDA-specific parallel constructs into the constructs supported by CPU, such as using OpenMP for parallelism. The resulting CPU C code should be complete and ready to compile. 
    Input CUDA Code: extern "C" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ atomic_add_return, int* __restrict__ indices, float* __restrict__ scatter_nd_cuda, float* __restrict__ updates) {
  if (((((int)blockIdx.y) * 128) + (((int)threadIdx.x) >> 3)) < 195) {
    atomic_add_return[0] = atomicAdd((&(scatter_nd_cuda[(((indices[((int)blockIdx.x)] * 1560) + (((int)blockIdx.y) * 1024)) + ((int)threadIdx.x))])), updates[(((((int)blockIdx.x) * 1560) + (((int)blockIdx.y) * 1024)) + ((int)threadIdx.x))]);
  }
}

extern "C" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ data, float* __restrict__ scatter_nd_cuda) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 195) {
    scatter_nd_cuda[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = data[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];
  }
}


    Ihe input tensor shape is [[2, 1560], [1, 3], [3, 1560]] respectively, Print only single C function implementation, end with comment '|End-of-Code|'.
    