
    Task: Translate the given CUDA code to its equivalent high-performance CPU C code.
    Context: You are provided with a CUDA code snippet that needs to be translated into CPU C code. The translation should preserve the same functionality as much as possible. Focus on translating the CUDA-specific parallel constructs into constructs supported by the CPU, such as using OpenMP for parallelism. The resulting CPU C code should be complete and ready to compile.

    Example 1:
    Input CUDA Code: extern "C" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ data) {
  compute[((((int)blockIdx.x) * 18) + ((int)threadIdx.x))] = atanf(data[((((int)blockIdx.x) * 18) + ((int)threadIdx.x))]);
}


    Input Tensor Shape: [[17, 12, 7, 9]]
    Output C Code: void default_function_kernel(float* compute, float* data) {
  #pragma omp parallel for
  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1428; ++i0_i1_fused_i2_fused) {
    for (int32_t i3_s = 0; i3_s < 9; ++i3_s) {
      compute[((i0_i1_fused_i2_fused * 9) + i3_s)] = atanf(data[((i0_i1_fused_i2_fused * 9) + i3_s)]);
    }
  }
}


    //|End-of-Code|

    Example 2:
    Input CUDA Code: extern "C" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {
  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = acosf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {
  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = asinhf(__cosf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));
}

extern "C" __global__ void __launch_bounds__(8) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {
  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = __sinf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(32) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {
  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);
}


    Input Tensor Shape: [[19, 17, 15]]
    Output C Code: void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {
  #pragma omp parallel for
  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 4845; ++i0_i1_fused_i2_fused) {
    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);
  }
  #pragma omp parallel for
  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 4845; ++i0_i1_fused_i2_fused_1) {
    compute_1[i0_i1_fused_i2_fused_1] = asinhf(cosf(ph_0[i0_i1_fused_i2_fused_1]));
  }
  #pragma omp parallel for
  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 4845; ++i0_i1_fused_i2_fused_2) {
    compute_2[i0_i1_fused_i2_fused_2] = sinf(ph_0[i0_i1_fused_i2_fused_2]);
  }
  #pragma omp parallel for
  for (int32_t i0 = 0; i0 < 19; ++i0) {
    for (int32_t i1 = 0; i1 < 17; ++i1) {
      for (int32_t i2 = 0; i2 < 15; ++i2) {
        compute_3[(((i0 * 255) + (i1 * 15)) + i2)] = atanf(ph_0[(((i0 * 255) + (i1 * 15)) + i2)]);
      }
    }
  }
}


    //|End-of-Code|

    Now translate the following CUDA code to its equivalent high-performance CPU C code:
    Input CUDA Code: extern "C" __global__ void __launch_bounds__(640) default_function_kernel_1(float* __restrict__ T_broadcast_to, float* __restrict__ ph) {
  T_broadcast_to[((int)threadIdx.x)] = ((0.000000e+00f < T_broadcast_to[((int)threadIdx.x)]) ? T_broadcast_to[((int)threadIdx.x)] : (T_broadcast_to[((int)threadIdx.x)] * ph[((((int)threadIdx.x) % 160) / 5)]));
}

extern "C" __global__ void __launch_bounds__(640) default_function_kernel_2(float* __restrict__ T_broadcast_to, float* __restrict__ T_fast_erf) {
  T_fast_erf[((int)threadIdx.x)] = ((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));
}

extern "C" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_broadcast_to, float* __restrict__ ph) {
  if (((int)threadIdx.x) < 640) {
    T_broadcast_to[((int)threadIdx.x)] = ph[(((((((int)threadIdx.x) % 160) / 5) * 12) + (((int)threadIdx.x) % 5)) + 14)];
  }
}


    Input Tensor Shape: [[1, 45, 12], [32]]
    Print only a single C function implementation, ending with the comment '|End-of-Code|'.
    