[
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = coshf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = cosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = acosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = asinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = asinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = atanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = atanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = ceilf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    float v_ = tarray[i0];\n    float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n    compute[i0] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = erff(tarray[i0]);\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = expf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    float v_ = tarray[ax0];\n    float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n    T_fast_erf[ax0] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n      float v_ = tarray[ax0];\n      float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n      int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    float v__3 = tarray[ax0];\n    float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n    float v__5 = tarray[ax0];\n    float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n    float v__7 = tarray[ax0];\n    float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n    float v__9 = tarray[ax0];\n    float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n    float v__11 = tarray[ax0];\n    float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n    float v__13 = tarray[ax0];\n    float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n    float v__15 = tarray[ax0];\n    float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n    float v__17 = tarray[ax0];\n    float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n    float v__19 = tarray[ax0];\n    float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n    float v__21 = tarray[ax0];\n    float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n    float v__23 = tarray[ax0];\n    float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n    float v__25 = tarray[ax0];\n    float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n    float v__27 = tarray[ax0];\n    float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n    float v__29 = tarray[ax0];\n    float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n    float v__31 = tarray[ax0];\n    float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n    float v__33 = tarray[ax0];\n    float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n    float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n    float v__36 = tarray[ax0];\n    T_fast_exp[ax0] = ((v__35) > (v__36) ? (v__35) : (v__36));\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n    float v__1 = T_minimum[ax0_1];\n    T_minimum[ax0_1] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 2; ++ax0_2) {\n    T_minimum[ax0_2] = ((T_minimum[ax0_2] * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[i0]) << ((int64_t)2)) : ((int64_t)tarray[i0])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(1 - ((int)threadIdx.x))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_reverse_sequence[ax0] = tarray[(1 - ax0)];\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = floorf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_full_like[ax0] = 1.000000e+00f;\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = ((int8_t)(tarray[i0] != tarray[i0]));\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = logf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = log10f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = log2f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    tarray_red[0] = max(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    tarray_red[0] = min(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = (tarray[i0] * -1.000000e+00f);\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 1.000000e+00f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    tensor[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_repeat[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) & 1)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(ax1 & 1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) & 1)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(ax1 & 1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = roundf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = (1.000000e+00f / sqrtf(tarray[i0]));\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[0] = 2;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[1];\n  T_shape[0] = 2;\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[i0]))));\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_sign[ax0] = ((0.000000e+00f < tarray[ax0]) ? 1.000000e+00f : ((tarray[ax0] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = sinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = sinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = sqrtf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = tanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = tanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) & 1)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[12];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      T_tile[((ax1 * 6) + ax2)] = tarray[(ax2 & 1)];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[2];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    T_expand_dims[ax1] = tarray[ax1];\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    compute[i0] = tarray[i0];\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_reshape[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_divide[ax0] = (tarray[ax0] / tarray[ax0]);\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_equal[ax0] = ((int8_t)(tarray[ax0] == tarray[ax0]));\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)2 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 2)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_concat[ax0] = ((2 <= ax0) ? tarray[(ax0 - 2)] : tarray[ax0]);\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_elemwise_sum[ax0] = (tarray[ax0] + tarray[ax0]);\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_floor_divide[ax0] = floorf((tarray[ax0] / tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_floor_mod[ax0] = (tarray[ax0] - (floorf((tarray[ax0] / tarray[ax0])) * tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_greater[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_greater_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_less[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_less_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    float v_ = tarray[ax0];\n    T_maximum[ax0] = ((v_) > (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((v_) < (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_mod[ax0] = fmodf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_multiply[ax0] = (tarray[ax0] * tarray[ax0]);\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_not_equal[ax0] = ((int8_t)(tarray[ax0] != tarray[ax0]));\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_power[ax0] = powf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_subtract[ax0] = 0.000000e+00f;\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) >> 1)] * tarray[(((int)threadIdx.x) & 1)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[4];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_tensordot[((ax0 * 2) + ax1)] = (tarray[ax0] * tarray[ax1]);\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = coshf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = cosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = acosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = asinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = asinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = atanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = atanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = ceilf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    float v_ = tarray[i0];\n    float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n    compute[i0] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = erff(tarray[i0]);\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = expf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    float v_ = tarray[ax0];\n    float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n    T_fast_erf[ax0] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n      float v_ = tarray[ax0];\n      float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n      int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    float v__3 = tarray[ax0];\n    float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n    float v__5 = tarray[ax0];\n    float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n    float v__7 = tarray[ax0];\n    float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n    float v__9 = tarray[ax0];\n    float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n    float v__11 = tarray[ax0];\n    float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n    float v__13 = tarray[ax0];\n    float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n    float v__15 = tarray[ax0];\n    float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n    float v__17 = tarray[ax0];\n    float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n    float v__19 = tarray[ax0];\n    float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n    float v__21 = tarray[ax0];\n    float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n    float v__23 = tarray[ax0];\n    float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n    float v__25 = tarray[ax0];\n    float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n    float v__27 = tarray[ax0];\n    float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n    float v__29 = tarray[ax0];\n    float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n    float v__31 = tarray[ax0];\n    float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n    float v__33 = tarray[ax0];\n    float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n    float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n    float v__36 = tarray[ax0];\n    T_fast_exp[ax0] = ((v__35) > (v__36) ? (v__35) : (v__36));\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 9; ++ax0_1) {\n    float v__1 = T_minimum[ax0_1];\n    T_minimum[ax0_1] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 9; ++ax0_2) {\n    T_minimum[ax0_2] = ((T_minimum[ax0_2] * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[i0]) << ((int64_t)2)) : ((int64_t)tarray[i0])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(8 - ((int)threadIdx.x))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_reverse_sequence[ax0] = tarray[(8 - ax0)];\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = floorf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_full_like[ax0] = 1.000000e+00f;\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = ((int8_t)(tarray[i0] != tarray[i0]));\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = logf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = log10f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = log2f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 9; ++k0) {\n    tarray_red[0] = max(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 9; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 9; ++k0) {\n    tarray_red[0] = min(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 9; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = (tarray[i0] * -1.000000e+00f);\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 9; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 1.000000e+00f;\n  for (int32_t k0 = 0; k0 < 9; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    tensor[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_repeat[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 9)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 + ax1) % 9)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 9)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(((ax0 * 5) + ax1) % 9)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = roundf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = (1.000000e+00f / sqrtf(tarray[i0]));\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[0] = 9;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[1];\n  T_shape[0] = 9;\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[i0]))));\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_sign[ax0] = ((0.000000e+00f < tarray[ax0]) ? 1.000000e+00f : ((tarray[ax0] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = sinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = sinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = sqrtf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = tanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = tanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(54) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(54) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 9)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[54];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 27; ++ax2) {\n      T_tile[((ax1 * 27) + ax2)] = tarray[(ax2 % 9)];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[9];\n  for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n    T_expand_dims[ax1] = tarray[ax1];\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[9];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    compute[i0] = tarray[i0];\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_reshape[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_divide[ax0] = (tarray[ax0] / tarray[ax0]);\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_equal[ax0] = ((int8_t)(tarray[ax0] == tarray[ax0]));\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)9 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 9)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[18];\n  for (int32_t ax0 = 0; ax0 < 18; ++ax0) {\n    T_concat[ax0] = ((9 <= ax0) ? tarray[(ax0 - 9)] : tarray[ax0]);\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_elemwise_sum[ax0] = (tarray[ax0] + tarray[ax0]);\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_floor_divide[ax0] = floorf((tarray[ax0] / tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_floor_mod[ax0] = (tarray[ax0] - (floorf((tarray[ax0] / tarray[ax0])) * tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_greater[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_greater_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_less[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_less_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    float v_ = tarray[ax0];\n    T_maximum[ax0] = ((v_) > (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((v_) < (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_mod[ax0] = fmodf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_multiply[ax0] = (tarray[ax0] * tarray[ax0]);\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_not_equal[ax0] = ((int8_t)(tarray[ax0] != tarray[ax0]));\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_power[ax0] = powf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[9];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    T_subtract[ax0] = 0.000000e+00f;\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(81) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(81) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) / 9)] * tarray[(((int)threadIdx.x) % 9)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[81];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_tensordot[((ax0 * 9) + ax1)] = (tarray[ax0] * tarray[ax1]);\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = coshf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = cosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = acosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = asinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = asinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = atanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = atanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = ceilf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    float v_ = tarray[i0];\n    float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n    compute[i0] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = erff(tarray[i0]);\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = expf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    float v_ = tarray[ax0];\n    float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n    T_fast_erf[ax0] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n      float v_ = tarray[ax0];\n      float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n      int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    float v__3 = tarray[ax0];\n    float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n    float v__5 = tarray[ax0];\n    float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n    float v__7 = tarray[ax0];\n    float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n    float v__9 = tarray[ax0];\n    float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n    float v__11 = tarray[ax0];\n    float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n    float v__13 = tarray[ax0];\n    float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n    float v__15 = tarray[ax0];\n    float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n    float v__17 = tarray[ax0];\n    float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n    float v__19 = tarray[ax0];\n    float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n    float v__21 = tarray[ax0];\n    float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n    float v__23 = tarray[ax0];\n    float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n    float v__25 = tarray[ax0];\n    float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n    float v__27 = tarray[ax0];\n    float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n    float v__29 = tarray[ax0];\n    float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n    float v__31 = tarray[ax0];\n    float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n    float v__33 = tarray[ax0];\n    float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n    float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n    float v__36 = tarray[ax0];\n    T_fast_exp[ax0] = ((v__35) > (v__36) ? (v__35) : (v__36));\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 10; ++ax0_1) {\n    float v__1 = T_minimum[ax0_1];\n    T_minimum[ax0_1] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 10; ++ax0_2) {\n    T_minimum[ax0_2] = ((T_minimum[ax0_2] * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[i0]) << ((int64_t)2)) : ((int64_t)tarray[i0])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(9 - ((int)threadIdx.x))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_reverse_sequence[ax0] = tarray[(9 - ax0)];\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = floorf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_full_like[ax0] = 1.000000e+00f;\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = ((int8_t)(tarray[i0] != tarray[i0]));\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = logf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = log10f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = log2f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 10; ++k0) {\n    tarray_red[0] = max(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 10; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 10; ++k0) {\n    tarray_red[0] = min(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 10; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = (tarray[i0] * -1.000000e+00f);\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 10; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 1.000000e+00f;\n  for (int32_t k0 = 0; k0 < 10; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    tensor[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_repeat[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 10)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(((ax0 * 4) + ax1) % 10)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 10)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(((ax0 * 2) + ax1) % 10)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = roundf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = (1.000000e+00f / sqrtf(tarray[i0]));\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[0] = 10;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[1];\n  T_shape[0] = 10;\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[i0]))));\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_sign[ax0] = ((0.000000e+00f < tarray[ax0]) ? 1.000000e+00f : ((tarray[ax0] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = sinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = sinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = sqrtf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = tanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = tanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(60) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(60) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 10)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[60];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 30; ++ax2) {\n      T_tile[((ax1 * 30) + ax2)] = tarray[(ax2 % 10)];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[10];\n  for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n    T_expand_dims[ax1] = tarray[ax1];\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[10];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    compute[i0] = tarray[i0];\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_reshape[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_divide[ax0] = (tarray[ax0] / tarray[ax0]);\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_equal[ax0] = ((int8_t)(tarray[ax0] == tarray[ax0]));\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(20) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(20) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)10 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 10)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[20];\n  for (int32_t ax0 = 0; ax0 < 20; ++ax0) {\n    T_concat[ax0] = ((10 <= ax0) ? tarray[(ax0 - 10)] : tarray[ax0]);\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_elemwise_sum[ax0] = (tarray[ax0] + tarray[ax0]);\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_floor_divide[ax0] = floorf((tarray[ax0] / tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_floor_mod[ax0] = (tarray[ax0] - (floorf((tarray[ax0] / tarray[ax0])) * tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_greater[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_greater_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_less[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_less_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    float v_ = tarray[ax0];\n    T_maximum[ax0] = ((v_) > (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((v_) < (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_mod[ax0] = fmodf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_multiply[ax0] = (tarray[ax0] * tarray[ax0]);\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_not_equal[ax0] = ((int8_t)(tarray[ax0] != tarray[ax0]));\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_power[ax0] = powf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(10) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[10];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    T_subtract[ax0] = 0.000000e+00f;\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(100) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(100) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) / 10)] * tarray[(((int)threadIdx.x) % 10)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[100];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      T_tensordot[((ax0 * 10) + ax1)] = (tarray[ax0] * tarray[ax1]);\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = coshf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = cosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = acosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = asinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = asinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = atanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = atanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = ceilf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    float v_ = tarray[i0];\n    float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n    compute[i0] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = erff(tarray[i0]);\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = expf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    float v_ = tarray[ax0];\n    float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n    T_fast_erf[ax0] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n      float v_ = tarray[ax0];\n      float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n      int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    float v__3 = tarray[ax0];\n    float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n    float v__5 = tarray[ax0];\n    float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n    float v__7 = tarray[ax0];\n    float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n    float v__9 = tarray[ax0];\n    float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n    float v__11 = tarray[ax0];\n    float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n    float v__13 = tarray[ax0];\n    float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n    float v__15 = tarray[ax0];\n    float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n    float v__17 = tarray[ax0];\n    float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n    float v__19 = tarray[ax0];\n    float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n    float v__21 = tarray[ax0];\n    float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n    float v__23 = tarray[ax0];\n    float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n    float v__25 = tarray[ax0];\n    float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n    float v__27 = tarray[ax0];\n    float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n    float v__29 = tarray[ax0];\n    float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n    float v__31 = tarray[ax0];\n    float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n    float v__33 = tarray[ax0];\n    float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n    float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n    float v__36 = tarray[ax0];\n    T_fast_exp[ax0] = ((v__35) > (v__36) ? (v__35) : (v__36));\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 6; ++ax0_1) {\n    float v__1 = T_minimum[ax0_1];\n    T_minimum[ax0_1] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 6; ++ax0_2) {\n    T_minimum[ax0_2] = ((T_minimum[ax0_2] * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[i0]) << ((int64_t)2)) : ((int64_t)tarray[i0])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(5 - ((int)threadIdx.x))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_reverse_sequence[ax0] = tarray[(5 - ax0)];\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = floorf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_full_like[ax0] = 1.000000e+00f;\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = ((int8_t)(tarray[i0] != tarray[i0]));\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = logf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = log10f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = log2f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[0] = max(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[0] = min(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = (tarray[i0] * -1.000000e+00f);\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 1.000000e+00f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    tensor[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_repeat[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 6)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(((ax0 * 4) + ax1) % 6)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 6)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(((ax0 * 2) + ax1) % 6)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = roundf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = (1.000000e+00f / sqrtf(tarray[i0]));\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[0] = 6;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[1];\n  T_shape[0] = 6;\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[i0]))));\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_sign[ax0] = ((0.000000e+00f < tarray[ax0]) ? 1.000000e+00f : ((tarray[ax0] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = sinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = sinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = sqrtf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = tanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = tanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 6)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[36];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 18; ++ax2) {\n      T_tile[((ax1 * 18) + ax2)] = tarray[(ax2 % 6)];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[6];\n  for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n    T_expand_dims[ax1] = tarray[ax1];\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = tarray[i0];\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_reshape[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_divide[ax0] = (tarray[ax0] / tarray[ax0]);\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_equal[ax0] = ((int8_t)(tarray[ax0] == tarray[ax0]));\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)6 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 6)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[12];\n  for (int32_t ax0 = 0; ax0 < 12; ++ax0) {\n    T_concat[ax0] = ((6 <= ax0) ? tarray[(ax0 - 6)] : tarray[ax0]);\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_elemwise_sum[ax0] = (tarray[ax0] + tarray[ax0]);\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_floor_divide[ax0] = floorf((tarray[ax0] / tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_floor_mod[ax0] = (tarray[ax0] - (floorf((tarray[ax0] / tarray[ax0])) * tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_greater[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_greater_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_less[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_less_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    float v_ = tarray[ax0];\n    T_maximum[ax0] = ((v_) > (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((v_) < (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_mod[ax0] = fmodf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_multiply[ax0] = (tarray[ax0] * tarray[ax0]);\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_not_equal[ax0] = ((int8_t)(tarray[ax0] != tarray[ax0]));\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_power[ax0] = powf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_subtract[ax0] = 0.000000e+00f;\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) / 6)] * tarray[(((int)threadIdx.x) % 6)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[36];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      T_tensordot[((ax0 * 6) + ax1)] = (tarray[ax0] * tarray[ax1]);\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = coshf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = cosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = acosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = asinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = asinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = atanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = atanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = ceilf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    float v_ = tarray[i0];\n    float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n    compute[i0] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = erff(tarray[i0]);\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = expf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    float v_ = tarray[ax0];\n    float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n    T_fast_erf[ax0] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n      float v_ = tarray[ax0];\n      float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n      int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    float v__3 = tarray[ax0];\n    float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n    float v__5 = tarray[ax0];\n    float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n    float v__7 = tarray[ax0];\n    float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n    float v__9 = tarray[ax0];\n    float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n    float v__11 = tarray[ax0];\n    float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n    float v__13 = tarray[ax0];\n    float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n    float v__15 = tarray[ax0];\n    float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n    float v__17 = tarray[ax0];\n    float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n    float v__19 = tarray[ax0];\n    float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n    float v__21 = tarray[ax0];\n    float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n    float v__23 = tarray[ax0];\n    float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n    float v__25 = tarray[ax0];\n    float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n    float v__27 = tarray[ax0];\n    float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n    float v__29 = tarray[ax0];\n    float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n    float v__31 = tarray[ax0];\n    float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n    float v__33 = tarray[ax0];\n    float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n    float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n    float v__36 = tarray[ax0];\n    T_fast_exp[ax0] = ((v__35) > (v__36) ? (v__35) : (v__36));\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 4; ++ax0_1) {\n    float v__1 = T_minimum[ax0_1];\n    T_minimum[ax0_1] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n    T_minimum[ax0_2] = ((T_minimum[ax0_2] * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[i0]) << ((int64_t)2)) : ((int64_t)tarray[i0])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(3 - ((int)threadIdx.x))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_reverse_sequence[ax0] = tarray[(3 - ax0)];\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = floorf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_full_like[ax0] = 1.000000e+00f;\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = ((int8_t)(tarray[i0] != tarray[i0]));\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = logf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = log10f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = log2f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    tarray_red[0] = max(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    tarray_red[0] = min(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = (tarray[i0] * -1.000000e+00f);\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 1.000000e+00f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    tensor[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_repeat[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) & 3)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(ax1 & 3)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) & 3)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(ax1 & 3)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = roundf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = (1.000000e+00f / sqrtf(tarray[i0]));\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[0] = 4;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[1];\n  T_shape[0] = 4;\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[i0]))));\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_sign[ax0] = ((0.000000e+00f < tarray[ax0]) ? 1.000000e+00f : ((tarray[ax0] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = sinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = sinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = sqrtf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = tanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = tanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) & 3)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[24];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_tile[((ax1 * 12) + ax2)] = tarray[(ax2 & 3)];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[4];\n  for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n    T_expand_dims[ax1] = tarray[ax1];\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[4];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    compute[i0] = tarray[i0];\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_reshape[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_divide[ax0] = (tarray[ax0] / tarray[ax0]);\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_equal[ax0] = ((int8_t)(tarray[ax0] == tarray[ax0]));\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)4 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 4)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_concat[ax0] = ((4 <= ax0) ? tarray[(ax0 - 4)] : tarray[ax0]);\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_elemwise_sum[ax0] = (tarray[ax0] + tarray[ax0]);\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_floor_divide[ax0] = floorf((tarray[ax0] / tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_floor_mod[ax0] = (tarray[ax0] - (floorf((tarray[ax0] / tarray[ax0])) * tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_greater[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_greater_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_less[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_less_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    float v_ = tarray[ax0];\n    T_maximum[ax0] = ((v_) > (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((v_) < (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_mod[ax0] = fmodf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_multiply[ax0] = (tarray[ax0] * tarray[ax0]);\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_not_equal[ax0] = ((int8_t)(tarray[ax0] != tarray[ax0]));\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_power[ax0] = powf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_subtract[ax0] = 0.000000e+00f;\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) >> 2)] * tarray[(((int)threadIdx.x) & 3)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[16];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      T_tensordot[((ax0 * 4) + ax1)] = (tarray[ax0] * tarray[ax1]);\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = coshf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = cosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = acosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = asinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = asinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = atanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = atanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = ceilf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    float v_ = tarray[i0];\n    float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n    compute[i0] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = erff(tarray[i0]);\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = expf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    float v_ = tarray[ax0];\n    float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n    T_fast_erf[ax0] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n      float v_ = tarray[ax0];\n      float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n      int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    float v__3 = tarray[ax0];\n    float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n    float v__5 = tarray[ax0];\n    float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n    float v__7 = tarray[ax0];\n    float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n    float v__9 = tarray[ax0];\n    float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n    float v__11 = tarray[ax0];\n    float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n    float v__13 = tarray[ax0];\n    float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n    float v__15 = tarray[ax0];\n    float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n    float v__17 = tarray[ax0];\n    float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n    float v__19 = tarray[ax0];\n    float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n    float v__21 = tarray[ax0];\n    float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n    float v__23 = tarray[ax0];\n    float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n    float v__25 = tarray[ax0];\n    float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n    float v__27 = tarray[ax0];\n    float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n    float v__29 = tarray[ax0];\n    float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n    float v__31 = tarray[ax0];\n    float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n    float v__33 = tarray[ax0];\n    float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n    float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n    float v__36 = tarray[ax0];\n    T_fast_exp[ax0] = ((v__35) > (v__36) ? (v__35) : (v__36));\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 8; ++ax0_1) {\n    float v__1 = T_minimum[ax0_1];\n    T_minimum[ax0_1] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 8; ++ax0_2) {\n    T_minimum[ax0_2] = ((T_minimum[ax0_2] * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[i0]) << ((int64_t)2)) : ((int64_t)tarray[i0])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(7 - ((int)threadIdx.x))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_reverse_sequence[ax0] = tarray[(7 - ax0)];\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = floorf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_full_like[ax0] = 1.000000e+00f;\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = ((int8_t)(tarray[i0] != tarray[i0]));\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = logf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = log10f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = log2f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 8; ++k0) {\n    tarray_red[0] = max(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 8; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 8; ++k0) {\n    tarray_red[0] = min(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 8; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = (tarray[i0] * -1.000000e+00f);\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 8; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 1.000000e+00f;\n  for (int32_t k0 = 0; k0 < 8; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    tensor[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_repeat[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) & 7)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(ax1 & 7)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) & 7)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(ax1 & 7)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = roundf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = (1.000000e+00f / sqrtf(tarray[i0]));\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 1) ? (int64_t)1 : (int64_t)8));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 1) ? (int64_t)1 : (int64_t)8));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[i0]))));\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_sign[ax0] = ((0.000000e+00f < tarray[ax0]) ? 1.000000e+00f : ((tarray[ax0] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = sinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = sinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = sqrtf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = tanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = tanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[((((int)threadIdx.x) % 24) / 3)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[48];\n  for (int32_t ax1 = 0; ax1 < 16; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      T_tile[((ax1 * 3) + ax2)] = tarray[(ax1 & 7)];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[8];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    T_expand_dims[ax1] = tarray[ax1];\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    compute[i0] = tarray[i0];\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[8];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    T_reshape[ax1] = tarray[ax1];\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_divide[ax0] = (tarray[ax0] / tarray[ax0]);\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_equal[ax0] = ((int8_t)(tarray[ax0] == tarray[ax0]));\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)8 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 8)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[16];\n  for (int32_t ax0 = 0; ax0 < 16; ++ax0) {\n    T_concat[ax0] = ((8 <= ax0) ? tarray[(ax0 - 8)] : tarray[ax0]);\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_elemwise_sum[ax0] = (tarray[ax0] + tarray[ax0]);\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_floor_divide[ax0] = floorf((tarray[ax0] / tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_floor_mod[ax0] = (tarray[ax0] - (floorf((tarray[ax0] / tarray[ax0])) * tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_greater[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_greater_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_less[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_less_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    float v_ = tarray[ax0];\n    T_maximum[ax0] = ((v_) > (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((v_) < (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_mod[ax0] = fmodf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_multiply[ax0] = (tarray[ax0] * tarray[ax0]);\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_not_equal[ax0] = ((int8_t)(tarray[ax0] != tarray[ax0]));\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_power[ax0] = powf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[8];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    T_subtract[ax0] = 0.000000e+00f;\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) >> 3)] * tarray[(((int)threadIdx.x) & 7)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[64];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      T_tensordot[((ax0 * 8) + ax2)] = (tarray[ax0] * tarray[ax2]);\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = coshf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = cosf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = acosf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = asinf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = asinhf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = atanf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = atanhf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = ceilf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      float v_ = tarray[((i0 * 9) + i1)];\n      float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n      compute[((i0 * 9) + i1)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = erff(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = expf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      float v_ = tarray[((ax0 * 9) + ax1)];\n      float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n      T_fast_erf[((ax0 * 9) + ax1)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n        float v_ = tarray[((ax0 * 9) + ax1)];\n        float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n        int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__3 = tarray[((ax0 * 9) + ax1)];\n      float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n      float v__5 = tarray[((ax0 * 9) + ax1)];\n      float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n      float v__7 = tarray[((ax0 * 9) + ax1)];\n      float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n      float v__9 = tarray[((ax0 * 9) + ax1)];\n      float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n      float v__11 = tarray[((ax0 * 9) + ax1)];\n      float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n      float v__13 = tarray[((ax0 * 9) + ax1)];\n      float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n      float v__15 = tarray[((ax0 * 9) + ax1)];\n      float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n      float v__17 = tarray[((ax0 * 9) + ax1)];\n      float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n      float v__19 = tarray[((ax0 * 9) + ax1)];\n      float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n      float v__21 = tarray[((ax0 * 9) + ax1)];\n      float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n      float v__23 = tarray[((ax0 * 9) + ax1)];\n      float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n      float v__25 = tarray[((ax0 * 9) + ax1)];\n      float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n      float v__27 = tarray[((ax0 * 9) + ax1)];\n      float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n      float v__29 = tarray[((ax0 * 9) + ax1)];\n      float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n      float v__31 = tarray[((ax0 * 9) + ax1)];\n      float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n      float v__33 = tarray[((ax0 * 9) + ax1)];\n      float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n      float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__36 = tarray[((ax0 * 9) + ax1)];\n      T_fast_exp[((ax0 * 9) + ax1)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      float v_ = tarray[((ax0 * 9) + ax1)];\n      T_minimum[((ax0 * 9) + ax1)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 9; ++ax1_1) {\n      float v__1 = T_minimum[((ax0_1 * 9) + ax1_1)];\n      T_minimum[((ax0_1 * 9) + ax1_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 2; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 9; ++ax1_2) {\n      T_minimum[((ax0_2 * 9) + ax1_2)] = ((T_minimum[((ax0_2 * 9) + ax1_2)] * (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * (((T_minimum[((ax0_2 * 9) + ax1_2)] * T_minimum[((ax0_2 * 9) + ax1_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[((i0 * 9) + i1)]) << ((int64_t)2)) : ((int64_t)tarray[((i0 * 9) + i1)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) % 9) + 9) - ((((int)threadIdx.x) / 9) * 9))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_reverse_sequence[((ax0 * 9) + ax1)] = tarray[((ax1 + 9) - (ax0 * 9))];\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = floorf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_full_like[((ax0 * 9) + ax1)] = 1.000000e+00f;\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = ((int8_t)(tarray[((i0 * 9) + i1)] != tarray[((i0 * 9) + i1)]));\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = logf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = log10f(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = log2f(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    for (int k1 = 0; k1 < 9; ++k1) {\n      tarray_red[0] = max(tarray_red[0], tarray[((k0 * 9) + k1)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    for (int32_t k1 = 0; k1 < 9; ++k1) {\n      float v_ = tarray_red[0];\n      float v__1 = tarray[((k0 * 9) + k1)];\n      tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    for (int k1 = 0; k1 < 9; ++k1) {\n      tarray_red[0] = min(tarray_red[0], tarray[((k0 * 9) + k1)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    for (int32_t k1 = 0; k1 < 9; ++k1) {\n      float v_ = tarray_red[0];\n      float v__1 = tarray[((k0 * 9) + k1)];\n      tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = (tarray[((i0 * 9) + i1)] * -1.000000e+00f);\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 9) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[9];\n  for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n    tarray_red[ax1] = 1.000000e+00f;\n    for (int32_t k0 = 0; k0 < 2; ++k0) {\n      tarray_red[ax1] = (tarray_red[ax1] * tarray[((k0 * 9) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      tensor[((ax0 * 9) + ax1)] = tarray[((ax0 * 9) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_repeat[((ax0 * 9) + ax1)] = tarray[((ax0 * 9) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 18)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(((ax0 * 10) + ax1) % 18)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 18)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(((ax0 * 14) + ax1) % 18)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = roundf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = (1.000000e+00f / sqrtf(tarray[((i0 * 9) + i1)]));\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 1) ? (int64_t)9 : (int64_t)2));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 1) ? (int64_t)9 : (int64_t)2));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[((i0 * 9) + i1)]))));\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_sign[((ax0 * 9) + ax1)] = ((0.000000e+00f < tarray[((ax0 * 9) + ax1)]) ? 1.000000e+00f : ((tarray[((ax0 * 9) + ax1)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = sinf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = sinhf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = sqrtf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = tanf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = tanhf(tarray[((i0 * 9) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(108) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(108) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[((((((int)threadIdx.x) % 54) / 27) * 9) + (((int)threadIdx.x) % 9))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[108];\n  for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 27; ++ax2) {\n      T_tile[((ax1 * 27) + ax2)] = tarray[(((ax1 & 1) * 9) + (ax2 % 9))];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[18];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n      T_expand_dims[((ax1 * 9) + ax2)] = tarray[((ax1 * 9) + ax2)];\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      compute[((i0 * 9) + i1)] = tarray[((i0 * 9) + i1)];\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_reshape[((ax0 * 2) + ax1)] = tarray[((ax0 * 2) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_divide[((ax0 * 9) + ax1)] = (tarray[((ax0 * 9) + ax1)] / tarray[((ax0 * 9) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_equal[((ax0 * 9) + ax1)] = ((int8_t)(tarray[((ax0 * 9) + ax1)] == tarray[((ax0 * 9) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)18 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 18)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[36];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_concat[((ax0 * 9) + ax1)] = ((2 <= ax0) ? tarray[(((ax0 * 9) + ax1) - 18)] : tarray[((ax0 * 9) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_elemwise_sum[((ax0 * 9) + ax1)] = (tarray[((ax0 * 9) + ax1)] + tarray[((ax0 * 9) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_floor_divide[((ax0 * 9) + ax1)] = floorf((tarray[((ax0 * 9) + ax1)] / tarray[((ax0 * 9) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_floor_mod[((ax0 * 9) + ax1)] = (tarray[((ax0 * 9) + ax1)] - (floorf((tarray[((ax0 * 9) + ax1)] / tarray[((ax0 * 9) + ax1)])) * tarray[((ax0 * 9) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_greater[((ax0 * 9) + ax1)] = ((int8_t)(tarray[((ax0 * 9) + ax1)] < tarray[((ax0 * 9) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_greater_equal[((ax0 * 9) + ax1)] = ((int8_t)(tarray[((ax0 * 9) + ax1)] <= tarray[((ax0 * 9) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_less[((ax0 * 9) + ax1)] = ((int8_t)(tarray[((ax0 * 9) + ax1)] < tarray[((ax0 * 9) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_less_equal[((ax0 * 9) + ax1)] = ((int8_t)(tarray[((ax0 * 9) + ax1)] <= tarray[((ax0 * 9) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      float v_ = tarray[((ax0 * 9) + ax1)];\n      T_maximum[((ax0 * 9) + ax1)] = ((v_) > (v_) ? (v_) : (v_));\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      float v_ = tarray[((ax0 * 9) + ax1)];\n      T_minimum[((ax0 * 9) + ax1)] = ((v_) < (v_) ? (v_) : (v_));\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_mod[((ax0 * 9) + ax1)] = fmodf(tarray[((ax0 * 9) + ax1)], tarray[((ax0 * 9) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_multiply[((ax0 * 9) + ax1)] = (tarray[((ax0 * 9) + ax1)] * tarray[((ax0 * 9) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_not_equal[((ax0 * 9) + ax1)] = ((int8_t)(tarray[((ax0 * 9) + ax1)] != tarray[((ax0 * 9) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_power[((ax0 * 9) + ax1)] = powf(tarray[((ax0 * 9) + ax1)], tarray[((ax0 * 9) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[18];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_subtract[((ax0 * 9) + ax1)] = 0.000000e+00f;\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) / 18)] * tarray[(((int)threadIdx.x) % 18)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[324];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_tensordot[((((ax0 * 162) + (ax1 * 18)) + (ax2 * 9)) + ax3)] = (tarray[((ax0 * 9) + ax1)] * tarray[((ax2 * 9) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = coshf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = cosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = acosf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = asinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = asinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = atanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = atanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = ceilf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    float v_ = tarray[i0];\n    float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n    compute[i0] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = erff(tarray[i0]);\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = expf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    float v_ = tarray[ax0];\n    float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n    T_fast_erf[ax0] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n      float v_ = tarray[ax0];\n      float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n      int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    float v__3 = tarray[ax0];\n    float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n    float v__5 = tarray[ax0];\n    float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n    float v__7 = tarray[ax0];\n    float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n    float v__9 = tarray[ax0];\n    float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n    float v__11 = tarray[ax0];\n    float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n    float v__13 = tarray[ax0];\n    float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n    float v__15 = tarray[ax0];\n    float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n    float v__17 = tarray[ax0];\n    float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n    float v__19 = tarray[ax0];\n    float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n    float v__21 = tarray[ax0];\n    float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n    float v__23 = tarray[ax0];\n    float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n    float v__25 = tarray[ax0];\n    float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n    float v__27 = tarray[ax0];\n    float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n    float v__29 = tarray[ax0];\n    float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n    float v__31 = tarray[ax0];\n    float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n    float v__33 = tarray[ax0];\n    float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n    float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n    float v__36 = tarray[ax0];\n    T_fast_exp[ax0] = ((v__35) > (v__36) ? (v__35) : (v__36));\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 6; ++ax0_1) {\n    float v__1 = T_minimum[ax0_1];\n    T_minimum[ax0_1] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 6; ++ax0_2) {\n    T_minimum[ax0_2] = ((T_minimum[ax0_2] * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * (((T_minimum[ax0_2] * T_minimum[ax0_2]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[i0]) << ((int64_t)2)) : ((int64_t)tarray[i0])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(5 - ((int)threadIdx.x))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_reverse_sequence[ax0] = tarray[(5 - ax0)];\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = floorf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_full_like[ax0] = 1.000000e+00f;\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = ((int8_t)(tarray[i0] != tarray[i0]));\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = logf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = log10f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = log2f(tarray[i0]);\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[0] = max(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[0] = min(tarray_red[0], tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    float v_ = tarray_red[0];\n    float v__1 = tarray[k0];\n    tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = (tarray[i0] * -1.000000e+00f);\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 1.000000e+00f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    tarray_red[0] = (tarray_red[0] * tarray[k0]);\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    tensor[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_repeat[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 6)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(((ax0 * 4) + ax1) % 6)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((int)threadIdx.x) % 6)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(((ax0 * 2) + ax1) % 6)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = roundf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = (1.000000e+00f / sqrtf(tarray[i0]));\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 1) ? (int64_t)1 : (int64_t)6));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 1) ? (int64_t)1 : (int64_t)6));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[i0]))));\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_sign[ax0] = ((0.000000e+00f < tarray[ax0]) ? 1.000000e+00f : ((tarray[ax0] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = sinf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = sinhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = sqrtf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = tanf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = tanhf(tarray[i0]);\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[((((int)threadIdx.x) % 18) / 3)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[36];\n  for (int32_t ax1 = 0; ax1 < 12; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      T_tile[((ax1 * 3) + ax2)] = tarray[(ax1 % 6)];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[6];\n  for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n    T_expand_dims[ax1] = tarray[ax1];\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[6];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    compute[i0] = tarray[i0];\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_reshape[ax0] = tarray[ax0];\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_divide[ax0] = (tarray[ax0] / tarray[ax0]);\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_equal[ax0] = ((int8_t)(tarray[ax0] == tarray[ax0]));\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)6 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 6)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[12];\n  for (int32_t ax0 = 0; ax0 < 12; ++ax0) {\n    T_concat[ax0] = ((6 <= ax0) ? tarray[(ax0 - 6)] : tarray[ax0]);\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_elemwise_sum[ax0] = (tarray[ax0] + tarray[ax0]);\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_floor_divide[ax0] = floorf((tarray[ax0] / tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_floor_mod[ax0] = (tarray[ax0] - (floorf((tarray[ax0] / tarray[ax0])) * tarray[ax0]));\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_greater[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_greater_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_less[ax0] = ((int8_t)(tarray[ax0] < tarray[ax0]));\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_less_equal[ax0] = ((int8_t)(tarray[ax0] <= tarray[ax0]));\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    float v_ = tarray[ax0];\n    T_maximum[ax0] = ((v_) > (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    float v_ = tarray[ax0];\n    T_minimum[ax0] = ((v_) < (v_) ? (v_) : (v_));\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_mod[ax0] = fmodf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_multiply[ax0] = (tarray[ax0] * tarray[ax0]);\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_not_equal[ax0] = ((int8_t)(tarray[ax0] != tarray[ax0]));\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_power[ax0] = powf(tarray[ax0], tarray[ax0]);\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[6];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    T_subtract[ax0] = 0.000000e+00f;\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) / 6)] * tarray[(((int)threadIdx.x) % 6)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[36];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      T_tensordot[((ax0 * 6) + ax2)] = (tarray[ax0] * tarray[ax2]);\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = coshf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = cosf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = acosf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = asinf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = asinhf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = atanf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = atanhf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = ceilf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      float v_ = tarray[((i0 * 2) + i1)];\n      float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n      compute[((i0 * 2) + i1)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = erff(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = expf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      float v_ = tarray[((ax0 * 2) + ax1)];\n      float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n      T_fast_erf[((ax0 * 2) + ax1)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n        float v_ = tarray[((ax0 * 2) + ax1)];\n        float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n        int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__3 = tarray[((ax0 * 2) + ax1)];\n      float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n      float v__5 = tarray[((ax0 * 2) + ax1)];\n      float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n      float v__7 = tarray[((ax0 * 2) + ax1)];\n      float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n      float v__9 = tarray[((ax0 * 2) + ax1)];\n      float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n      float v__11 = tarray[((ax0 * 2) + ax1)];\n      float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n      float v__13 = tarray[((ax0 * 2) + ax1)];\n      float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n      float v__15 = tarray[((ax0 * 2) + ax1)];\n      float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n      float v__17 = tarray[((ax0 * 2) + ax1)];\n      float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n      float v__19 = tarray[((ax0 * 2) + ax1)];\n      float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n      float v__21 = tarray[((ax0 * 2) + ax1)];\n      float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n      float v__23 = tarray[((ax0 * 2) + ax1)];\n      float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n      float v__25 = tarray[((ax0 * 2) + ax1)];\n      float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n      float v__27 = tarray[((ax0 * 2) + ax1)];\n      float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n      float v__29 = tarray[((ax0 * 2) + ax1)];\n      float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n      float v__31 = tarray[((ax0 * 2) + ax1)];\n      float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n      float v__33 = tarray[((ax0 * 2) + ax1)];\n      float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n      float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__36 = tarray[((ax0 * 2) + ax1)];\n      T_fast_exp[((ax0 * 2) + ax1)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      float v_ = tarray[((ax0 * 2) + ax1)];\n      T_minimum[((ax0 * 2) + ax1)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 9; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 2; ++ax1_1) {\n      float v__1 = T_minimum[((ax0_1 * 2) + ax1_1)];\n      T_minimum[((ax0_1 * 2) + ax1_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 9; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 2; ++ax1_2) {\n      T_minimum[((ax0_2 * 2) + ax1_2)] = ((T_minimum[((ax0_2 * 2) + ax1_2)] * (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * (((T_minimum[((ax0_2 * 2) + ax1_2)] * T_minimum[((ax0_2 * 2) + ax1_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[((i0 * 2) + i1)]) << ((int64_t)2)) : ((int64_t)tarray[((i0 * 2) + i1)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) & 1) + 16) - ((((int)threadIdx.x) >> 1) * 2))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_reverse_sequence[((ax0 * 2) + ax1)] = tarray[((ax1 + 16) - (ax0 * 2))];\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = floorf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_full_like[((ax0 * 2) + ax1)] = 1.000000e+00f;\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = ((int8_t)(tarray[((i0 * 2) + i1)] != tarray[((i0 * 2) + i1)]));\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = logf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = log10f(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = log2f(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 9; ++k0) {\n    for (int k1 = 0; k1 < 2; ++k1) {\n      tarray_red[0] = max(tarray_red[0], tarray[((k0 * 2) + k1)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 9; ++k0) {\n    for (int32_t k1 = 0; k1 < 2; ++k1) {\n      float v_ = tarray_red[0];\n      float v__1 = tarray[((k0 * 2) + k1)];\n      tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 9; ++k0) {\n    for (int k1 = 0; k1 < 2; ++k1) {\n      tarray_red[0] = min(tarray_red[0], tarray[((k0 * 2) + k1)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 9; ++k0) {\n    for (int32_t k1 = 0; k1 < 2; ++k1) {\n      float v_ = tarray_red[0];\n      float v__1 = tarray[((k0 * 2) + k1)];\n      tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = (tarray[((i0 * 2) + i1)] * -1.000000e+00f);\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 9; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 2) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[2];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    tarray_red[ax1] = 1.000000e+00f;\n    for (int32_t k0 = 0; k0 < 9; ++k0) {\n      tarray_red[ax1] = (tarray_red[ax1] * tarray[((k0 * 2) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      tensor[((ax0 * 2) + ax1)] = tarray[((ax0 * 2) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_repeat[((ax0 * 2) + ax1)] = tarray[((ax0 * 2) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((((((((int)threadIdx.x) >> 6) * 5) + ((((int)threadIdx.x) & 63) >> 1)) % 9) * 2) + (((int)threadIdx.x) & 1))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(((((ax0 * 5) + (ax1 >> 1)) % 9) * 2) + (ax1 & 1))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((((((((int)threadIdx.x) >> 5) * 7) + ((((int)threadIdx.x) & 31) >> 1)) % 9) * 2) + (((int)threadIdx.x) & 1))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(((((ax0 * 7) + (ax1 >> 1)) % 9) * 2) + (ax1 & 1))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = roundf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = (1.000000e+00f / sqrtf(tarray[((i0 * 2) + i1)]));\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)9));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 1) ? (int64_t)2 : (int64_t)9));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[((i0 * 2) + i1)]))));\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_sign[((ax0 * 2) + ax1)] = ((0.000000e+00f < tarray[((ax0 * 2) + ax1)]) ? 1.000000e+00f : ((tarray[((ax0 * 2) + ax1)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = sinf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = sinhf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = sqrtf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = tanf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = tanhf(tarray[((i0 * 2) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(108) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(108) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[((((((int)threadIdx.x) % 54) / 6) * 2) + (((int)threadIdx.x) & 1))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[108];\n  for (int32_t ax1 = 0; ax1 < 18; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      T_tile[((ax1 * 6) + ax2)] = tarray[(((ax1 % 9) * 2) + (ax2 & 1))];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[18];\n  for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      T_expand_dims[((ax1 * 2) + ax2)] = tarray[((ax1 * 2) + ax2)];\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[18];\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = tarray[((i0 * 2) + i1)];\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_reshape[((ax0 * 2) + ax1)] = tarray[((ax0 * 2) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_divide[((ax0 * 2) + ax1)] = (tarray[((ax0 * 2) + ax1)] / tarray[((ax0 * 2) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_equal[((ax0 * 2) + ax1)] = ((int8_t)(tarray[((ax0 * 2) + ax1)] == tarray[((ax0 * 2) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)18 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 18)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[36];\n  for (int32_t ax0 = 0; ax0 < 18; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_concat[((ax0 * 2) + ax1)] = ((9 <= ax0) ? tarray[(((ax0 * 2) + ax1) - 18)] : tarray[((ax0 * 2) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_elemwise_sum[((ax0 * 2) + ax1)] = (tarray[((ax0 * 2) + ax1)] + tarray[((ax0 * 2) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_floor_divide[((ax0 * 2) + ax1)] = floorf((tarray[((ax0 * 2) + ax1)] / tarray[((ax0 * 2) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_floor_mod[((ax0 * 2) + ax1)] = (tarray[((ax0 * 2) + ax1)] - (floorf((tarray[((ax0 * 2) + ax1)] / tarray[((ax0 * 2) + ax1)])) * tarray[((ax0 * 2) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_greater[((ax0 * 2) + ax1)] = ((int8_t)(tarray[((ax0 * 2) + ax1)] < tarray[((ax0 * 2) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_greater_equal[((ax0 * 2) + ax1)] = ((int8_t)(tarray[((ax0 * 2) + ax1)] <= tarray[((ax0 * 2) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_less[((ax0 * 2) + ax1)] = ((int8_t)(tarray[((ax0 * 2) + ax1)] < tarray[((ax0 * 2) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_less_equal[((ax0 * 2) + ax1)] = ((int8_t)(tarray[((ax0 * 2) + ax1)] <= tarray[((ax0 * 2) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      float v_ = tarray[((ax0 * 2) + ax1)];\n      T_maximum[((ax0 * 2) + ax1)] = ((v_) > (v_) ? (v_) : (v_));\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      float v_ = tarray[((ax0 * 2) + ax1)];\n      T_minimum[((ax0 * 2) + ax1)] = ((v_) < (v_) ? (v_) : (v_));\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_mod[((ax0 * 2) + ax1)] = fmodf(tarray[((ax0 * 2) + ax1)], tarray[((ax0 * 2) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_multiply[((ax0 * 2) + ax1)] = (tarray[((ax0 * 2) + ax1)] * tarray[((ax0 * 2) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_not_equal[((ax0 * 2) + ax1)] = ((int8_t)(tarray[((ax0 * 2) + ax1)] != tarray[((ax0 * 2) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_power[((ax0 * 2) + ax1)] = powf(tarray[((ax0 * 2) + ax1)], tarray[((ax0 * 2) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[18];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_subtract[((ax0 * 2) + ax1)] = 0.000000e+00f;\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) / 18)] * tarray[(((int)threadIdx.x) % 18)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[324];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          T_tensordot[((((ax0 * 36) + (ax1 * 18)) + (ax2 * 2)) + ax3)] = (tarray[((ax0 * 2) + ax1)] * tarray[((ax2 * 2) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = coshf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = cosf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = acosf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = asinf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = asinhf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = atanf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = atanhf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = ceilf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      float v_ = tarray[((i0 * 8) + i1)];\n      float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n      compute[((i0 * 8) + i1)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = erff(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = expf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      float v_ = tarray[((ax0 * 8) + ax1)];\n      float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n      T_fast_erf[((ax0 * 8) + ax1)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n        float v_ = tarray[((ax0 * 8) + ax1)];\n        float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n        int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__3 = tarray[((ax0 * 8) + ax1)];\n      float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n      float v__5 = tarray[((ax0 * 8) + ax1)];\n      float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n      float v__7 = tarray[((ax0 * 8) + ax1)];\n      float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n      float v__9 = tarray[((ax0 * 8) + ax1)];\n      float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n      float v__11 = tarray[((ax0 * 8) + ax1)];\n      float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n      float v__13 = tarray[((ax0 * 8) + ax1)];\n      float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n      float v__15 = tarray[((ax0 * 8) + ax1)];\n      float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n      float v__17 = tarray[((ax0 * 8) + ax1)];\n      float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n      float v__19 = tarray[((ax0 * 8) + ax1)];\n      float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n      float v__21 = tarray[((ax0 * 8) + ax1)];\n      float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n      float v__23 = tarray[((ax0 * 8) + ax1)];\n      float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n      float v__25 = tarray[((ax0 * 8) + ax1)];\n      float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n      float v__27 = tarray[((ax0 * 8) + ax1)];\n      float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n      float v__29 = tarray[((ax0 * 8) + ax1)];\n      float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n      float v__31 = tarray[((ax0 * 8) + ax1)];\n      float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n      float v__33 = tarray[((ax0 * 8) + ax1)];\n      float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n      float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__36 = tarray[((ax0 * 8) + ax1)];\n      T_fast_exp[((ax0 * 8) + ax1)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      float v_ = tarray[((ax0 * 8) + ax1)];\n      T_minimum[((ax0 * 8) + ax1)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 3; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 8; ++ax1_1) {\n      float v__1 = T_minimum[((ax0_1 * 8) + ax1_1)];\n      T_minimum[((ax0_1 * 8) + ax1_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 3; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 8; ++ax1_2) {\n      T_minimum[((ax0_2 * 8) + ax1_2)] = ((T_minimum[((ax0_2 * 8) + ax1_2)] * (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * (((T_minimum[((ax0_2 * 8) + ax1_2)] * T_minimum[((ax0_2 * 8) + ax1_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[((i0 * 8) + i1)]) << ((int64_t)2)) : ((int64_t)tarray[((i0 * 8) + i1)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) & 7) + 16) - ((((int)threadIdx.x) >> 3) * 8))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_reverse_sequence[((ax0 * 8) + ax1)] = tarray[((ax1 + 16) - (ax0 * 8))];\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = floorf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_full_like[((ax0 * 8) + ax1)] = 1.000000e+00f;\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = ((int8_t)(tarray[((i0 * 8) + i1)] != tarray[((i0 * 8) + i1)]));\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = logf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = log10f(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = log2f(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 3; ++k0) {\n    for (int k1 = 0; k1 < 8; ++k1) {\n      tarray_red[0] = max(tarray_red[0], tarray[((k0 * 8) + k1)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 3; ++k0) {\n    for (int32_t k1 = 0; k1 < 8; ++k1) {\n      float v_ = tarray_red[0];\n      float v__1 = tarray[((k0 * 8) + k1)];\n      tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 3; ++k0) {\n    for (int k1 = 0; k1 < 8; ++k1) {\n      tarray_red[0] = min(tarray_red[0], tarray[((k0 * 8) + k1)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 3; ++k0) {\n    for (int32_t k1 = 0; k1 < 8; ++k1) {\n      float v_ = tarray_red[0];\n      float v__1 = tarray[((k0 * 8) + k1)];\n      tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = (tarray[((i0 * 8) + i1)] * -1.000000e+00f);\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 3; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 8) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[8];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    tarray_red[ax1] = 1.000000e+00f;\n    for (int32_t k0 = 0; k0 < 3; ++k0) {\n      tarray_red[ax1] = (tarray_red[ax1] * tarray[((k0 * 8) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      tensor[((ax0 * 8) + ax1)] = tarray[((ax0 * 8) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_repeat[((ax0 * 8) + ax1)] = tarray[((ax0 * 8) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((((((((int)threadIdx.x) >> 6) * 2) + ((((int)threadIdx.x) & 63) >> 3)) % 3) * 8) + (((int)threadIdx.x) & 7))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(((((ax0 * 2) + (ax1 >> 3)) % 3) * 8) + (ax1 & 7))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[(((((((int)threadIdx.x) >> 5) + ((((int)threadIdx.x) & 31) >> 3)) % 3) * 8) + (((int)threadIdx.x) & 7))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(((((ax1 >> 3) + ax0) % 3) * 8) + (ax1 & 7))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = roundf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = (1.000000e+00f / sqrtf(tarray[((i0 * 8) + i1)]));\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 1) ? (int64_t)8 : (int64_t)3));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[2];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 1) ? (int64_t)8 : (int64_t)3));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[((i0 * 8) + i1)]))));\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_sign[((ax0 * 8) + ax1)] = ((0.000000e+00f < tarray[((ax0 * 8) + ax1)]) ? 1.000000e+00f : ((tarray[((ax0 * 8) + ax1)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = sinf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = sinhf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = sqrtf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = tanf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = tanhf(tarray[((i0 * 8) + i1)]);\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[((((((int)threadIdx.x) % 72) / 24) * 8) + (((int)threadIdx.x) & 7))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[144];\n  for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 24; ++ax2) {\n      T_tile[((ax1 * 24) + ax2)] = tarray[(((ax1 % 3) * 8) + (ax2 & 7))];\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[24];\n  for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      T_expand_dims[((ax1 * 8) + ax2)] = tarray[((ax1 * 8) + ax2)];\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[24];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      compute[((i0 * 8) + i1)] = tarray[((i0 * 8) + i1)];\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_reshape[((ax0 * 8) + ax1)] = tarray[((ax0 * 8) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_divide[((ax0 * 8) + ax1)] = (tarray[((ax0 * 8) + ax1)] / tarray[((ax0 * 8) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_equal[((ax0 * 8) + ax1)] = ((int8_t)(tarray[((ax0 * 8) + ax1)] == tarray[((ax0 * 8) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)24 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 24)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[48];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_concat[((ax0 * 8) + ax1)] = ((3 <= ax0) ? tarray[(((ax0 * 8) + ax1) - 24)] : tarray[((ax0 * 8) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_elemwise_sum[((ax0 * 8) + ax1)] = (tarray[((ax0 * 8) + ax1)] + tarray[((ax0 * 8) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_floor_divide[((ax0 * 8) + ax1)] = floorf((tarray[((ax0 * 8) + ax1)] / tarray[((ax0 * 8) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_floor_mod[((ax0 * 8) + ax1)] = (tarray[((ax0 * 8) + ax1)] - (floorf((tarray[((ax0 * 8) + ax1)] / tarray[((ax0 * 8) + ax1)])) * tarray[((ax0 * 8) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_greater[((ax0 * 8) + ax1)] = ((int8_t)(tarray[((ax0 * 8) + ax1)] < tarray[((ax0 * 8) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_greater_equal[((ax0 * 8) + ax1)] = ((int8_t)(tarray[((ax0 * 8) + ax1)] <= tarray[((ax0 * 8) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_less[((ax0 * 8) + ax1)] = ((int8_t)(tarray[((ax0 * 8) + ax1)] < tarray[((ax0 * 8) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_less_equal[((ax0 * 8) + ax1)] = ((int8_t)(tarray[((ax0 * 8) + ax1)] <= tarray[((ax0 * 8) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      float v_ = tarray[((ax0 * 8) + ax1)];\n      T_maximum[((ax0 * 8) + ax1)] = ((v_) > (v_) ? (v_) : (v_));\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      float v_ = tarray[((ax0 * 8) + ax1)];\n      T_minimum[((ax0 * 8) + ax1)] = ((v_) < (v_) ? (v_) : (v_));\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_mod[((ax0 * 8) + ax1)] = fmodf(tarray[((ax0 * 8) + ax1)], tarray[((ax0 * 8) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_multiply[((ax0 * 8) + ax1)] = (tarray[((ax0 * 8) + ax1)] * tarray[((ax0 * 8) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_not_equal[((ax0 * 8) + ax1)] = ((int8_t)(tarray[((ax0 * 8) + ax1)] != tarray[((ax0 * 8) + ax1)]));\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_power[((ax0 * 8) + ax1)] = powf(tarray[((ax0 * 8) + ax1)], tarray[((ax0 * 8) + ax1)]);\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[24];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      T_subtract[((ax0 * 8) + ax1)] = 0.000000e+00f;\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(576) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(576) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) / 24)] * tarray[(((int)threadIdx.x) % 24)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[576];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 8; ++ax3) {\n          T_tensordot[((((ax0 * 192) + (ax1 * 24)) + (ax2 * 8)) + ax3)] = (tarray[((ax0 * 8) + ax1)] * tarray[((ax2 * 8) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = coshf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = cosf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = acosf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = asinf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = asinhf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = atanf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = atanhf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = ceilf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        float v_ = tarray[(((i0 * 6) + (i1 * 2)) + i2)];\n        float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = erff(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = expf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        float v_ = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n        T_fast_erf[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n          float v_ = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n          float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n          int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        float v__3 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n        float v__5 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n        float v__7 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n        float v__9 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n        float v__11 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n        float v__13 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n        float v__15 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n        float v__17 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n        float v__19 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n        float v__21 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n        float v__23 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n        float v__25 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n        float v__27 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n        float v__29 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n        float v__31 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n        float v__33 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n        float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n        float v__36 = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        T_fast_exp[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        float v_ = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        T_minimum[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 3; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 2; ++ax2_1) {\n        float v__1 = T_minimum[(((ax0_1 * 6) + (ax1_1 * 2)) + ax2_1)];\n        T_minimum[(((ax0_1 * 6) + (ax1_1 * 2)) + ax2_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 2; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 3; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 2; ++ax2_2) {\n        T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] = ((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)] * T_minimum[(((ax0_2 * 6) + (ax1_2 * 2)) + ax2_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((i0 * 6) + (i1 * 2)) + i2)]) << ((int64_t)2)) : ((int64_t)tarray[(((i0 * 6) + (i1 * 2)) + i2)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) % 6) + 6) - ((((int)threadIdx.x) / 6) * 6))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_reverse_sequence[(((ax0 * 6) + (ax1 * 2)) + ax2)] = tarray[((((ax1 * 2) + ax2) + 6) - (ax0 * 6))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = floorf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_full_like[(((ax0 * 6) + (ax1 * 2)) + ax2)] = 1.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = ((int8_t)(tarray[(((i0 * 6) + (i1 * 2)) + i2)] != tarray[(((i0 * 6) + (i1 * 2)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = logf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = log10f(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = log2f(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    for (int k1 = 0; k1 < 3; ++k1) {\n      for (int k2 = 0; k2 < 2; ++k2) {\n        tarray_red[0] = max(tarray_red[0], tarray[(((k0 * 6) + (k1 * 2)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    for (int32_t k1 = 0; k1 < 3; ++k1) {\n      for (int32_t k2 = 0; k2 < 2; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 6) + (k1 * 2)) + k2)];\n        tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    for (int k1 = 0; k1 < 3; ++k1) {\n      for (int k2 = 0; k2 < 2; ++k2) {\n        tarray_red[0] = min(tarray_red[0], tarray[(((k0 * 6) + (k1 * 2)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    for (int32_t k1 = 0; k1 < 3; ++k1) {\n      for (int32_t k2 = 0; k2 < 2; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 6) + (k1 * 2)) + k2)];\n        tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = (tarray[(((i0 * 6) + (i1 * 2)) + i2)] * -1.000000e+00f);\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 6) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[6];\n  for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      tarray_red[((ax1 * 2) + ax2)] = 1.000000e+00f;\n      for (int32_t k0 = 0; k0 < 2; ++k0) {\n        tarray_red[((ax1 * 2) + ax2)] = (tarray_red[((ax1 * 2) + ax2)] * tarray[(((k0 * 6) + (ax1 * 2)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        tensor[(((ax0 * 6) + (ax1 * 2)) + ax2)] = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_repeat[(((ax0 * 6) + (ax1 * 2)) + ax2)] = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((((((((int)threadIdx.x) >> 6) * 2) + ((((int)threadIdx.x) & 63) >> 1)) % 6) * 2) + (((int)threadIdx.x) & 1))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(((((ax0 * 2) + (ax1 >> 1)) % 6) * 2) + (ax1 & 1))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((((((((int)threadIdx.x) >> 5) * 4) + ((((int)threadIdx.x) & 31) >> 1)) % 6) * 2) + (((int)threadIdx.x) & 1))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[(((((ax0 * 4) + (ax1 >> 1)) % 6) * 2) + (ax1 & 1))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = roundf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = (1.000000e+00f / sqrtf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 2) ? (int64_t)2 : ((((int)threadIdx.x) == 1) ? (int64_t)3 : (int64_t)2)));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[3];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 2) ? (int64_t)2 : ((ax0 == 1) ? (int64_t)3 : (int64_t)2)));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((i0 * 6) + (i1 * 2)) + i2)]))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_sign[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((0.000000e+00f < tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]) ? 1.000000e+00f : ((tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = sinf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = sinhf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = sqrtf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = tanf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = tanhf(tarray[(((i0 * 6) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(72) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(72) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[((((((int)threadIdx.x) / 36) * 6) + (((((int)threadIdx.x) % 18) / 6) * 2)) + (((int)threadIdx.x) & 1))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[72];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n        T_tile[(((ax0 * 36) + (ax1 * 6)) + ax2)] = tarray[(((ax0 * 6) + ((ax1 % 3) * 2)) + (ax2 & 1))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[12];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n        T_expand_dims[(((ax1 * 6) + (ax2 * 2)) + ax3)] = tarray[(((ax1 * 6) + (ax2 * 2)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[12];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 6) + (i1 * 2)) + i2)] = tarray[(((i0 * 6) + (i1 * 2)) + i2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[12];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_reshape[(((ax0 * 4) + (ax1 * 2)) + ax2)] = tarray[(((ax0 * 4) + (ax1 * 2)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_divide[(((ax0 * 6) + (ax1 * 2)) + ax2)] = (tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] / tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_equal[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((int8_t)(tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] == tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)12 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 12)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[24];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_concat[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((2 <= ax0) ? tarray[((((ax0 * 6) + (ax1 * 2)) + ax2) - 12)] : tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_elemwise_sum[(((ax0 * 6) + (ax1 * 2)) + ax2)] = (tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] + tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_floor_divide[(((ax0 * 6) + (ax1 * 2)) + ax2)] = floorf((tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] / tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_floor_mod[(((ax0 * 6) + (ax1 * 2)) + ax2)] = (tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] - (floorf((tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] / tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)])) * tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_greater[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((int8_t)(tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] < tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_greater_equal[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((int8_t)(tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] <= tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_less[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((int8_t)(tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] < tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_less_equal[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((int8_t)(tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] <= tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        float v_ = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        T_maximum[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((v_) > (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        float v_ = tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)];\n        T_minimum[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((v_) < (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_mod[(((ax0 * 6) + (ax1 * 2)) + ax2)] = fmodf(tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)], tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_multiply[(((ax0 * 6) + (ax1 * 2)) + ax2)] = (tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] * tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_not_equal[(((ax0 * 6) + (ax1 * 2)) + ax2)] = ((int8_t)(tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] != tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_power[(((ax0 * 6) + (ax1 * 2)) + ax2)] = powf(tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)], tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[12];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        T_subtract[(((ax0 * 6) + (ax1 * 2)) + ax2)] = 0.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((int)threadIdx.x)] = (tarray[(((int)threadIdx.x) / 12)] * tarray[(((int)threadIdx.x) % 12)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[144];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 2; ++ax5) {\n              T_tensordot[((((((ax0 * 72) + (ax1 * 24)) + (ax2 * 12)) + (ax3 * 6)) + (ax4 * 2)) + ax5)] = (tarray[(((ax0 * 6) + (ax1 * 2)) + ax2)] * tarray[(((ax3 * 6) + (ax4 * 2)) + ax5)]);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = coshf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = cosf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = acosf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = asinf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = asinhf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = atanf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = atanhf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = ceilf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        float v_ = tarray[(((i0 * 50) + (i1 * 10)) + i2)];\n        float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = erff(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = expf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        float v_ = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n        T_fast_erf[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n          float v_ = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n          float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n          int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        float v__3 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n        float v__5 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n        float v__7 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n        float v__9 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n        float v__11 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n        float v__13 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n        float v__15 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n        float v__17 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n        float v__19 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n        float v__21 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n        float v__23 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n        float v__25 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n        float v__27 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n        float v__29 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n        float v__31 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n        float v__33 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n        float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n        float v__36 = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        T_fast_exp[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        float v_ = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        T_minimum[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 7; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 5; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 10; ++ax2_1) {\n        float v__1 = T_minimum[(((ax0_1 * 50) + (ax1_1 * 10)) + ax2_1)];\n        T_minimum[(((ax0_1 * 50) + (ax1_1 * 10)) + ax2_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 7; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 5; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 10; ++ax2_2) {\n        T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] = ((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)] * T_minimum[(((ax0_2 * 50) + (ax1_2 * 10)) + ax2_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((i0 * 50) + (i1 * 10)) + i2)]) << ((int64_t)2)) : ((int64_t)tarray[(((i0 * 50) + (i1 * 10)) + i2)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) % 50) + 300) - ((((int)threadIdx.x) / 50) * 50))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_reverse_sequence[(((ax0 * 50) + (ax1 * 10)) + ax2)] = tarray[((((ax1 * 10) + ax2) + 300) - (ax0 * 50))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = floorf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_full_like[(((ax0 * 50) + (ax1 * 10)) + ax2)] = 1.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = ((int8_t)(tarray[(((i0 * 50) + (i1 * 10)) + i2)] != tarray[(((i0 * 50) + (i1 * 10)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = logf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = log10f(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = log2f(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    for (int k1 = 0; k1 < 5; ++k1) {\n      for (int k2 = 0; k2 < 10; ++k2) {\n        tarray_red[0] = max(tarray_red[0], tarray[(((k0 * 50) + (k1 * 10)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 7; ++k0) {\n    for (int32_t k1 = 0; k1 < 5; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 50) + (k1 * 10)) + k2)];\n        tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    for (int k1 = 0; k1 < 5; ++k1) {\n      for (int k2 = 0; k2 < 10; ++k2) {\n        tarray_red[0] = min(tarray_red[0], tarray[(((k0 * 50) + (k1 * 10)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 7; ++k0) {\n    for (int32_t k1 = 0; k1 < 5; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 50) + (k1 * 10)) + k2)];\n        tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = (tarray[(((i0 * 50) + (i1 * 10)) + i2)] * -1.000000e+00f);\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(50) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(50) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 50) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[50];\n  for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      tarray_red[((ax1 * 10) + ax2)] = 1.000000e+00f;\n      for (int32_t k0 = 0; k0 < 7; ++k0) {\n        tarray_red[((ax1 * 10) + ax2)] = (tarray_red[((ax1 * 10) + ax2)] * tarray[(((k0 * 50) + (ax1 * 10)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        tensor[(((ax0 * 50) + (ax1 * 10)) + ax2)] = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_repeat[(((ax0 * 50) + (ax1 * 10)) + ax2)] = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((((((ax0 * 32) + (ax1 >> 1)) / 25) * 50) + (((((ax0 * 7) + (ax1 >> 1)) % 25) / 5) * 10)) + (((ax0 * 4) + ax1) % 10))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = roundf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = (1.000000e+00f / sqrtf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 2) ? (int64_t)10 : ((((int)threadIdx.x) == 1) ? (int64_t)5 : (int64_t)7)));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[3];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 2) ? (int64_t)10 : ((ax0 == 1) ? (int64_t)5 : (int64_t)7)));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((i0 * 50) + (i1 * 10)) + i2)]))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_sign[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((0.000000e+00f < tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]) ? 1.000000e+00f : ((tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = sinf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = sinhf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = sqrtf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = tanf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = tanhf(tarray[(((i0 * 50) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)256) + (((int64_t)((int)threadIdx.x)) >> (int64_t)2)) < (int64_t)525) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 75) * 50) + (((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 75) / 15) * 10)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[2100];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 30; ++ax2) {\n        T_tile[(((ax0 * 300) + (ax1 * 30)) + ax2)] = tarray[(((ax0 * 50) + ((ax1 % 5) * 10)) + (ax2 % 10))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[350];\n  for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 5; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        T_expand_dims[(((ax1 * 50) + (ax2 * 10)) + ax3)] = tarray[(((ax1 * 50) + (ax2 * 10)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[350];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 50) + (i1 * 10)) + i2)] = tarray[(((i0 * 50) + (i1 * 10)) + i2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[350];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 5; ++ax2) {\n        T_reshape[(((ax0 * 35) + (ax1 * 5)) + ax2)] = tarray[(((ax0 * 35) + (ax1 * 5)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_divide[(((ax0 * 50) + (ax1 * 10)) + ax2)] = (tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] / tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_equal[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((int8_t)(tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] == tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(700) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(700) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)350 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 350)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[700];\n  for (int32_t ax0 = 0; ax0 < 14; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_concat[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((7 <= ax0) ? tarray[((((ax0 * 50) + (ax1 * 10)) + ax2) - 350)] : tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_elemwise_sum[(((ax0 * 50) + (ax1 * 10)) + ax2)] = (tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] + tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_floor_divide[(((ax0 * 50) + (ax1 * 10)) + ax2)] = floorf((tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] / tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_floor_mod[(((ax0 * 50) + (ax1 * 10)) + ax2)] = (tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] - (floorf((tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] / tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)])) * tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_greater[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((int8_t)(tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] < tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_greater_equal[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((int8_t)(tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] <= tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_less[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((int8_t)(tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] < tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_less_equal[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((int8_t)(tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] <= tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        float v_ = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        T_maximum[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((v_) > (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        float v_ = tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)];\n        T_minimum[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((v_) < (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_mod[(((ax0 * 50) + (ax1 * 10)) + ax2)] = fmodf(tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)], tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_multiply[(((ax0 * 50) + (ax1 * 10)) + ax2)] = (tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] * tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_not_equal[(((ax0 * 50) + (ax1 * 10)) + ax2)] = ((int8_t)(tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] != tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_power[(((ax0 * 50) + (ax1 * 10)) + ax2)] = powf(tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)], tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(350) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[350];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        T_subtract[(((ax0 * 50) + (ax1 * 10)) + ax2)] = 0.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)256) + (((int64_t)((int)threadIdx.x)) >> (int64_t)2)) < (int64_t)30625) {\n    T_tensordot[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 175)] * tarray[(((((((((int)blockIdx.x) * 162) + (((int)threadIdx.x) >> 1)) % 175) / 25) * 50) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 25) / 5) * 10)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[122500];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 10; ++ax5) {\n              T_tensordot[((((((ax0 * 17500) + (ax1 * 3500)) + (ax2 * 350)) + (ax3 * 50)) + (ax4 * 10)) + ax5)] = (tarray[(((ax0 * 50) + (ax1 * 10)) + ax2)] * tarray[(((ax3 * 50) + (ax4 * 10)) + ax5)]);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = coshf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = cosf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = acosf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = asinf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = asinhf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = atanf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = atanhf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = ceilf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        float v_ = tarray[(((i0 * 32) + (i1 * 4)) + i2)];\n        float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = erff(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = expf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        float v_ = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n        T_fast_erf[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n          float v_ = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n          float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n          int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        float v__3 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n        float v__5 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n        float v__7 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n        float v__9 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n        float v__11 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n        float v__13 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n        float v__15 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n        float v__17 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n        float v__19 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n        float v__21 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n        float v__23 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n        float v__25 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n        float v__27 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n        float v__29 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n        float v__31 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n        float v__33 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n        float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n        float v__36 = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        T_fast_exp[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        float v_ = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        T_minimum[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 4; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 8; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 4; ++ax2_1) {\n        float v__1 = T_minimum[(((ax0_1 * 32) + (ax1_1 * 4)) + ax2_1)];\n        T_minimum[(((ax0_1 * 32) + (ax1_1 * 4)) + ax2_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 8; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 4; ++ax2_2) {\n        T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] = ((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)] * T_minimum[(((ax0_2 * 32) + (ax1_2 * 4)) + ax2_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((i0 * 32) + (i1 * 4)) + i2)]) << ((int64_t)2)) : ((int64_t)tarray[(((i0 * 32) + (i1 * 4)) + i2)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) & 31) + 96) - ((((int)threadIdx.x) >> 5) * 32))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_reverse_sequence[(((ax0 * 32) + (ax1 * 4)) + ax2)] = tarray[((((ax1 * 4) + ax2) + 96) - (ax0 * 32))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = floorf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_full_like[(((ax0 * 32) + (ax1 * 4)) + ax2)] = 1.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = ((int8_t)(tarray[(((i0 * 32) + (i1 * 4)) + i2)] != tarray[(((i0 * 32) + (i1 * 4)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = logf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = log10f(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = log2f(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    for (int k1 = 0; k1 < 8; ++k1) {\n      for (int k2 = 0; k2 < 4; ++k2) {\n        tarray_red[0] = max(tarray_red[0], tarray[(((k0 * 32) + (k1 * 4)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    for (int32_t k1 = 0; k1 < 8; ++k1) {\n      for (int32_t k2 = 0; k2 < 4; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 32) + (k1 * 4)) + k2)];\n        tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    for (int k1 = 0; k1 < 8; ++k1) {\n      for (int k2 = 0; k2 < 4; ++k2) {\n        tarray_red[0] = min(tarray_red[0], tarray[(((k0 * 32) + (k1 * 4)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    for (int32_t k1 = 0; k1 < 8; ++k1) {\n      for (int32_t k2 = 0; k2 < 4; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 32) + (k1 * 4)) + k2)];\n        tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = (tarray[(((i0 * 32) + (i1 * 4)) + i2)] * -1.000000e+00f);\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 32) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[32];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n      tarray_red[((ax1 * 4) + ax2)] = 1.000000e+00f;\n      for (int32_t k0 = 0; k0 < 4; ++k0) {\n        tarray_red[((ax1 * 4) + ax2)] = (tarray_red[((ax1 * 4) + ax2)] * tarray[(((k0 * 32) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        tensor[(((ax0 * 32) + (ax1 * 4)) + ax2)] = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_repeat[(((ax0 * 32) + (ax1 * 4)) + ax2)] = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = roundf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = (1.000000e+00f / sqrtf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)8 : (int64_t)4)));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[3];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 2) ? (int64_t)4 : ((ax0 == 1) ? (int64_t)8 : (int64_t)4)));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((i0 * 32) + (i1 * 4)) + i2)]))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_sign[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((0.000000e+00f < tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]) ? 1.000000e+00f : ((tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = sinf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = sinhf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = sqrtf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = tanf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = tanhf(tarray[(((i0 * 32) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(768) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(768) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[((((((int)threadIdx.x) / 192) * 32) + (((((int)threadIdx.x) % 96) / 12) * 4)) + (((int)threadIdx.x) & 3))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[768];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 16; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n        T_tile[(((ax0 * 192) + (ax1 * 12)) + ax2)] = tarray[(((ax0 * 32) + ((ax1 & 7) * 4)) + (ax2 & 3))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[128];\n  for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n        T_expand_dims[(((ax1 * 32) + (ax2 * 4)) + ax3)] = tarray[(((ax1 * 32) + (ax2 * 4)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[128];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 32) + (i1 * 4)) + i2)] = tarray[(((i0 * 32) + (i1 * 4)) + i2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        T_reshape[(((ax0 * 32) + (ax1 * 8)) + ax2)] = tarray[(((ax0 * 32) + (ax1 * 8)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_divide[(((ax0 * 32) + (ax1 * 4)) + ax2)] = (tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] / tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_equal[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((int8_t)(tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] == tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(256) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(256) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)128 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 128)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[256];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_concat[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((4 <= ax0) ? tarray[((((ax0 * 32) + (ax1 * 4)) + ax2) - 128)] : tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_elemwise_sum[(((ax0 * 32) + (ax1 * 4)) + ax2)] = (tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] + tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_floor_divide[(((ax0 * 32) + (ax1 * 4)) + ax2)] = floorf((tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] / tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_floor_mod[(((ax0 * 32) + (ax1 * 4)) + ax2)] = (tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] - (floorf((tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] / tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)])) * tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_greater[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((int8_t)(tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] < tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_greater_equal[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((int8_t)(tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] <= tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_less[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((int8_t)(tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] < tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_less_equal[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((int8_t)(tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] <= tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        float v_ = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        T_maximum[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((v_) > (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        float v_ = tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)];\n        T_minimum[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((v_) < (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_mod[(((ax0 * 32) + (ax1 * 4)) + ax2)] = fmodf(tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)], tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_multiply[(((ax0 * 32) + (ax1 * 4)) + ax2)] = (tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] * tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_not_equal[(((ax0 * 32) + (ax1 * 4)) + ax2)] = ((int8_t)(tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] != tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_power[(((ax0 * 32) + (ax1 * 4)) + ax2)] = powf(tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)], tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_subtract[(((ax0 * 32) + (ax1 * 4)) + ax2)] = 0.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  T_tensordot[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 7))] * tarray[(((int)threadIdx.x) & 127)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[16384];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 8; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 4; ++ax5) {\n              T_tensordot[((((((ax0 * 4096) + (ax1 * 512)) + (ax2 * 128)) + (ax3 * 32)) + (ax4 * 4)) + ax5)] = (tarray[(((ax0 * 32) + (ax1 * 4)) + ax2)] * tarray[(((ax3 * 32) + (ax4 * 4)) + ax5)]);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = coshf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = cosf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = acosf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = asinf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = asinhf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = atanf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = atanhf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = ceilf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        float v_ = tarray[(((i0 * 63) + (i1 * 7)) + i2)];\n        float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = erff(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = expf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        float v_ = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n        T_fast_erf[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n          float v_ = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n          float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n          int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        float v__3 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n        float v__5 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n        float v__7 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n        float v__9 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n        float v__11 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n        float v__13 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n        float v__15 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n        float v__17 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n        float v__19 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n        float v__21 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n        float v__23 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n        float v__25 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n        float v__27 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n        float v__29 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n        float v__31 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n        float v__33 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n        float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n        float v__36 = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        T_fast_exp[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        float v_ = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        T_minimum[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 6; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 9; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 7; ++ax2_1) {\n        float v__1 = T_minimum[(((ax0_1 * 63) + (ax1_1 * 7)) + ax2_1)];\n        T_minimum[(((ax0_1 * 63) + (ax1_1 * 7)) + ax2_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 6; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 9; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 7; ++ax2_2) {\n        T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] = ((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)] * T_minimum[(((ax0_2 * 63) + (ax1_2 * 7)) + ax2_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((i0 * 63) + (i1 * 7)) + i2)]) << ((int64_t)2)) : ((int64_t)tarray[(((i0 * 63) + (i1 * 7)) + i2)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) % 63) + 315) - ((((int)threadIdx.x) / 63) * 63))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_reverse_sequence[(((ax0 * 63) + (ax1 * 7)) + ax2)] = tarray[((((ax1 * 7) + ax2) + 315) - (ax0 * 63))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = floorf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_full_like[(((ax0 * 63) + (ax1 * 7)) + ax2)] = 1.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = ((int8_t)(tarray[(((i0 * 63) + (i1 * 7)) + i2)] != tarray[(((i0 * 63) + (i1 * 7)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = logf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = log10f(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = log2f(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    for (int k1 = 0; k1 < 9; ++k1) {\n      for (int k2 = 0; k2 < 7; ++k2) {\n        tarray_red[0] = max(tarray_red[0], tarray[(((k0 * 63) + (k1 * 7)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    for (int32_t k1 = 0; k1 < 9; ++k1) {\n      for (int32_t k2 = 0; k2 < 7; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 63) + (k1 * 7)) + k2)];\n        tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    for (int k1 = 0; k1 < 9; ++k1) {\n      for (int k2 = 0; k2 < 7; ++k2) {\n        tarray_red[0] = min(tarray_red[0], tarray[(((k0 * 63) + (k1 * 7)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    for (int32_t k1 = 0; k1 < 9; ++k1) {\n      for (int32_t k2 = 0; k2 < 7; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 63) + (k1 * 7)) + k2)];\n        tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = (tarray[(((i0 * 63) + (i1 * 7)) + i2)] * -1.000000e+00f);\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(63) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(63) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 63) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[63];\n  for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n      tarray_red[((ax1 * 7) + ax2)] = 1.000000e+00f;\n      for (int32_t k0 = 0; k0 < 6; ++k0) {\n        tarray_red[((ax1 * 7) + ax2)] = (tarray_red[((ax1 * 7) + ax2)] * tarray[(((k0 * 63) + (ax1 * 7)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        tensor[(((ax0 * 63) + (ax1 * 7)) + ax2)] = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_repeat[(((ax0 * 63) + (ax1 * 7)) + ax2)] = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[(((((ax0 * 64) + ax1) / 63) * 63) + ((ax0 + ax1) % 63))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = roundf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = (1.000000e+00f / sqrtf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 2) ? (int64_t)7 : ((((int)threadIdx.x) == 1) ? (int64_t)9 : (int64_t)6)));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[3];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 2) ? (int64_t)7 : ((ax0 == 1) ? (int64_t)9 : (int64_t)6)));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((i0 * 63) + (i1 * 7)) + i2)]))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_sign[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((0.000000e+00f < tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]) ? 1.000000e+00f : ((tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = sinf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = sinhf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = sqrtf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = tanf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = tanhf(tarray[(((i0 * 63) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)256) + (((int64_t)((int)threadIdx.x)) >> (int64_t)2)) < (int64_t)567) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 189) * 63) + (((((((int)blockIdx.x) * 79) + ((int)threadIdx.x)) % 189) / 21) * 7)) + (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 7))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[2268];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 18; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 21; ++ax2) {\n        T_tile[(((ax0 * 378) + (ax1 * 21)) + ax2)] = tarray[(((ax0 * 63) + ((ax1 % 9) * 7)) + (ax2 % 7))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[378];\n  for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n        T_expand_dims[(((ax1 * 63) + (ax2 * 7)) + ax3)] = tarray[(((ax1 * 63) + (ax2 * 7)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[378];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 63) + (i1 * 7)) + i2)] = tarray[(((i0 * 63) + (i1 * 7)) + i2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[378];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n        T_reshape[(((ax0 * 54) + (ax1 * 6)) + ax2)] = tarray[(((ax0 * 54) + (ax1 * 6)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_divide[(((ax0 * 63) + (ax1 * 7)) + ax2)] = (tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] / tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_equal[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((int8_t)(tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] == tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(756) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(756) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)378 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 378)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[756];\n  for (int32_t ax0 = 0; ax0 < 12; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_concat[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((6 <= ax0) ? tarray[((((ax0 * 63) + (ax1 * 7)) + ax2) - 378)] : tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_elemwise_sum[(((ax0 * 63) + (ax1 * 7)) + ax2)] = (tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] + tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_floor_divide[(((ax0 * 63) + (ax1 * 7)) + ax2)] = floorf((tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] / tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_floor_mod[(((ax0 * 63) + (ax1 * 7)) + ax2)] = (tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] - (floorf((tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] / tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)])) * tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_greater[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((int8_t)(tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] < tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_greater_equal[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((int8_t)(tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] <= tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_less[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((int8_t)(tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] < tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_less_equal[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((int8_t)(tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] <= tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        float v_ = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        T_maximum[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((v_) > (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        float v_ = tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)];\n        T_minimum[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((v_) < (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_mod[(((ax0 * 63) + (ax1 * 7)) + ax2)] = fmodf(tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)], tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_multiply[(((ax0 * 63) + (ax1 * 7)) + ax2)] = (tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] * tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_not_equal[(((ax0 * 63) + (ax1 * 7)) + ax2)] = ((int8_t)(tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] != tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_power[(((ax0 * 63) + (ax1 * 7)) + ax2)] = powf(tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)], tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(378) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[378];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        T_subtract[(((ax0 * 63) + (ax1 * 7)) + ax2)] = 0.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)256) + (((int64_t)((int)threadIdx.x)) >> (int64_t)2)) < (int64_t)35721) {\n    T_tensordot[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 189)] * tarray[(((((((((int)blockIdx.x) * 268) + ((int)threadIdx.x)) % 378) / 63) * 63) + (((((((int)blockIdx.x) * 16) + ((int)threadIdx.x)) % 63) / 7) * 7)) + (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 7))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[142884];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 7; ++ax5) {\n              T_tensordot[((((((ax0 * 23814) + (ax1 * 2646)) + (ax2 * 378)) + (ax3 * 63)) + (ax4 * 7)) + ax5)] = (tarray[(((ax0 * 63) + (ax1 * 7)) + ax2)] * tarray[(((ax3 * 63) + (ax4 * 7)) + ax5)]);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = coshf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = cosf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = acosf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = asinf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = asinhf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = atanf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = atanhf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = ceilf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        float v_ = tarray[(((i0 * 54) + (i1 * 9)) + i2)];\n        float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = erff(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = expf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        float v_ = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n        T_fast_erf[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n          float v_ = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n          float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n          int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        float v__3 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n        float v__5 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n        float v__7 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n        float v__9 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n        float v__11 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n        float v__13 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n        float v__15 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n        float v__17 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n        float v__19 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n        float v__21 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n        float v__23 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n        float v__25 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n        float v__27 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n        float v__29 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n        float v__31 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n        float v__33 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n        float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n        float v__36 = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        T_fast_exp[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        float v_ = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        T_minimum[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 6; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 6; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 9; ++ax2_1) {\n        float v__1 = T_minimum[(((ax0_1 * 54) + (ax1_1 * 9)) + ax2_1)];\n        T_minimum[(((ax0_1 * 54) + (ax1_1 * 9)) + ax2_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 6; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 6; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 9; ++ax2_2) {\n        T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] = ((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * (((T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)] * T_minimum[(((ax0_2 * 54) + (ax1_2 * 9)) + ax2_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((i0 * 54) + (i1 * 9)) + i2)]) << ((int64_t)2)) : ((int64_t)tarray[(((i0 * 54) + (i1 * 9)) + i2)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) % 54) + 270) - ((((int)threadIdx.x) / 54) * 54))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_reverse_sequence[(((ax0 * 54) + (ax1 * 9)) + ax2)] = tarray[((((ax1 * 9) + ax2) + 270) - (ax0 * 54))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = floorf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_full_like[(((ax0 * 54) + (ax1 * 9)) + ax2)] = 1.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = ((int8_t)(tarray[(((i0 * 54) + (i1 * 9)) + i2)] != tarray[(((i0 * 54) + (i1 * 9)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = logf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = log10f(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = log2f(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    for (int k1 = 0; k1 < 6; ++k1) {\n      for (int k2 = 0; k2 < 9; ++k2) {\n        tarray_red[0] = max(tarray_red[0], tarray[(((k0 * 54) + (k1 * 9)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    for (int32_t k1 = 0; k1 < 6; ++k1) {\n      for (int32_t k2 = 0; k2 < 9; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 54) + (k1 * 9)) + k2)];\n        tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    for (int k1 = 0; k1 < 6; ++k1) {\n      for (int k2 = 0; k2 < 9; ++k2) {\n        tarray_red[0] = min(tarray_red[0], tarray[(((k0 * 54) + (k1 * 9)) + k2)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    for (int32_t k1 = 0; k1 < 6; ++k1) {\n      for (int32_t k2 = 0; k2 < 9; ++k2) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k0 * 54) + (k1 * 9)) + k2)];\n        tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = (tarray[(((i0 * 54) + (i1 * 9)) + i2)] * -1.000000e+00f);\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(54) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(54) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 54) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[54];\n  for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n      tarray_red[((ax1 * 9) + ax2)] = 1.000000e+00f;\n      for (int32_t k0 = 0; k0 < 6; ++k0) {\n        tarray_red[((ax1 * 9) + ax2)] = (tarray_red[((ax1 * 9) + ax2)] * tarray[(((k0 * 54) + (ax1 * 9)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        tensor[(((ax0 * 54) + (ax1 * 9)) + ax2)] = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_repeat[(((ax0 * 54) + (ax1 * 9)) + ax2)] = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((((((ax0 * 32) + (ax1 >> 1)) / 27) * 54) + (((((ax0 * 10) + ax1) % 54) / 9) * 9)) + ((ax0 + ax1) % 9))];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = roundf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = (1.000000e+00f / sqrtf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 2) ? (int64_t)9 : ((((int)threadIdx.x) == 1) ? (int64_t)6 : (int64_t)6)));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[3];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 2) ? (int64_t)9 : ((ax0 == 1) ? (int64_t)6 : (int64_t)6)));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((i0 * 54) + (i1 * 9)) + i2)]))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_sign[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((0.000000e+00f < tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]) ? 1.000000e+00f : ((tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = sinf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = sinhf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = sqrtf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = tanf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = tanhf(tarray[(((i0 * 54) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)243) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 81) * 54) + (((((((int)blockIdx.x) * 52) + ((int)threadIdx.x)) % 162) / 27) * 9)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[1944];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 12; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 27; ++ax2) {\n        T_tile[(((ax0 * 324) + (ax1 * 27)) + ax2)] = tarray[(((ax0 * 54) + ((ax1 % 6) * 9)) + (ax2 % 9))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[324];\n  for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n        T_expand_dims[(((ax1 * 54) + (ax2 * 9)) + ax3)] = tarray[(((ax1 * 54) + (ax2 * 9)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[324];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 6; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 54) + (i1 * 9)) + i2)] = tarray[(((i0 * 54) + (i1 * 9)) + i2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n        T_reshape[(((ax0 * 54) + (ax1 * 6)) + ax2)] = tarray[(((ax0 * 54) + (ax1 * 6)) + ax2)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_divide[(((ax0 * 54) + (ax1 * 9)) + ax2)] = (tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] / tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_equal[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((int8_t)(tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] == tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(648) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(648) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)324 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 324)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[648];\n  for (int32_t ax0 = 0; ax0 < 12; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_concat[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((6 <= ax0) ? tarray[((((ax0 * 54) + (ax1 * 9)) + ax2) - 324)] : tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_elemwise_sum[(((ax0 * 54) + (ax1 * 9)) + ax2)] = (tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] + tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_floor_divide[(((ax0 * 54) + (ax1 * 9)) + ax2)] = floorf((tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] / tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_floor_mod[(((ax0 * 54) + (ax1 * 9)) + ax2)] = (tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] - (floorf((tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] / tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)])) * tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_greater[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((int8_t)(tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] < tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_greater_equal[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((int8_t)(tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] <= tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_less[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((int8_t)(tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] < tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_less_equal[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((int8_t)(tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] <= tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        float v_ = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        T_maximum[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((v_) > (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        float v_ = tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)];\n        T_minimum[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((v_) < (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_mod[(((ax0 * 54) + (ax1 * 9)) + ax2)] = fmodf(tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)], tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_multiply[(((ax0 * 54) + (ax1 * 9)) + ax2)] = (tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] * tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_not_equal[(((ax0 * 54) + (ax1 * 9)) + ax2)] = ((int8_t)(tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] != tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_power[(((ax0 * 54) + (ax1 * 9)) + ax2)] = powf(tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)], tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(324) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[324];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_subtract[(((ax0 * 54) + (ax1 * 9)) + ax2)] = 0.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)64) + (((int64_t)((int)threadIdx.x)) >> (int64_t)4)) < (int64_t)6561) {\n    T_tensordot[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 81)] * tarray[((((((((int)blockIdx.x) * 52) + ((int)threadIdx.x)) % 324) / 9) * 9) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[104976];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 6; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 9; ++ax5) {\n              T_tensordot[((((((ax0 * 17496) + (ax1 * 2916)) + (ax2 * 324)) + (ax3 * 54)) + (ax4 * 9)) + ax5)] = (tarray[(((ax0 * 54) + (ax1 * 9)) + ax2)] * tarray[(((ax3 * 54) + (ax4 * 9)) + ax5)]);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = coshf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = coshf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __cosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = cosf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = acosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = acosf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = asinf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = asinhf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = atanf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = atanhf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ceilf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = ceilf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.000000e+02f), 0.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          float v_ = tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)];\n          float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = erff(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = erff(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = expf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_fast_erf[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          float v_ = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n          T_fast_erf[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n      int v_ = ((int)(floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n            float v_ = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n            float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n            int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          float v__3 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n          float v__5 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n          float v__7 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n          float v__9 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n          float v__11 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n          float v__13 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n          float v__15 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n          float v__17 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n          float v__19 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n          float v__21 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n          float v__23 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n          float v__25 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n          float v__27 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n          float v__29 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n          float v__31 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n          float v__33 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n          float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n          float v__36 = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          T_fast_exp[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          float v_ = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          T_minimum[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 4; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 9; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 8; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 4; ++ax3_1) {\n          float v__1 = T_minimum[((((ax0_1 * 288) + (ax1_1 * 32)) + (ax2_1 * 4)) + ax3_1)];\n          T_minimum[((((ax0_1 * 288) + (ax1_1 * 32)) + (ax2_1 * 4)) + ax3_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 9; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 8; ++ax2_2) {\n        for (int32_t ax3_2 = 0; ax3_2 < 4; ++ax3_2) {\n          T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] = ((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)] * T_minimum[((((ax0_2 * 288) + (ax1_2 * 32)) + (ax2_2 * 4)) + ax3_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((int)(((((2 != 0) ? (((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) << ((int64_t)2)) : ((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]) << ((int64_t)2)) : ((int64_t)tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[(((((((((int)blockIdx.x) * 5) + (((int)threadIdx.x) >> 5)) % 9) * 32) + (((int)threadIdx.x) & 31)) + 864) - ((((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) / 9) * 288))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_reverse_sequence[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = tarray[(((((ax1 * 32) + (ax2 * 4)) + ax3) + 864) - (ax0 * 288))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = floorf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_full_like[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 1.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_full_like[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = 1.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = ((int8_t)(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] != tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __logf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = logf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log10f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = log10f(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log2f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = log2f(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    for (int k1 = 0; k1 < 9; ++k1) {\n      for (int k2 = 0; k2 < 8; ++k2) {\n        for (int k3 = 0; k3 < 4; ++k3) {\n          tarray_red[0] = max(tarray_red[0], tarray[((((k0 * 288) + (k1 * 32)) + (k2 * 4)) + k3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    for (int32_t k1 = 0; k1 < 9; ++k1) {\n      for (int32_t k2 = 0; k2 < 8; ++k2) {\n        for (int32_t k3 = 0; k3 < 4; ++k3) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 288) + (k1 * 32)) + (k2 * 4)) + k3)];\n          tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    for (int k1 = 0; k1 < 9; ++k1) {\n      for (int k2 = 0; k2 < 8; ++k2) {\n        for (int k3 = 0; k3 < 4; ++k3) {\n          tarray_red[0] = min(tarray_red[0], tarray[((((k0 * 288) + (k1 * 32)) + (k2 * 4)) + k3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    for (int32_t k1 = 0; k1 < 9; ++k1) {\n      for (int32_t k2 = 0; k2 < 8; ++k2) {\n        for (int32_t k3 = 0; k3 < 4; ++k3) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 288) + (k1 * 32)) + (k2 * 4)) + k3)];\n          tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * -1.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = (tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] * -1.000000e+00f);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(288) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(288) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 288) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[288];\n  for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n        tarray_red[(((ax1 * 32) + (ax2 * 4)) + ax3)] = 1.000000e+00f;\n        for (int32_t k0 = 0; k0 < 4; ++k0) {\n          tarray_red[(((ax1 * 32) + (ax2 * 4)) + ax3)] = (tarray_red[(((ax1 * 32) + (ax2 * 4)) + ax3)] * tarray[((((k0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    tensor[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          tensor[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_repeat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_repeat[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = roundf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = roundf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = (1.000000e+00f / sqrtf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 3) ? (int64_t)4 : ((((int)threadIdx.x) == 2) ? (int64_t)8 : ((((int)threadIdx.x) == 1) ? (int64_t)9 : (int64_t)4))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 3) ? (int64_t)4 : ((ax0 == 2) ? (int64_t)8 : ((ax0 == 1) ? (int64_t)9 : (int64_t)4))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_sign[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? 1.000000e+00f : ((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_sign[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((0.000000e+00f < tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]) ? 1.000000e+00f : ((tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __sinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = sinf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = sinhf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = sqrtf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = tanf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = tanhf(tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)4) + (((int64_t)((int)threadIdx.x)) >> (int64_t)8)) < (int64_t)27) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3) * 32) + (((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 2)) % 24) / 3) * 4)) + (((int)threadIdx.x) & 3))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[6912];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 16; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 12; ++ax3) {\n          T_tile[((((ax0 * 1728) + (ax1 * 192)) + (ax2 * 12)) + ax3)] = tarray[((((ax0 * 288) + (ax1 * 32)) + ((ax2 & 7) * 4)) + (ax3 & 3))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  if (((((int)((int64_t)((int)blockIdx.x))) * 8) + (((int)((int64_t)((int)threadIdx.x))) >> 7)) < 9) {\n    if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n      T_expand_dims[((((((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) / 9) * 288) + ((((((int)blockIdx.x) * 5) + (((int)threadIdx.x) >> 5)) % 9) * 32)) + (((int)threadIdx.x) & 31))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[1152];\n  for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 8; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 4; ++ax4) {\n          T_expand_dims[((((ax1 * 288) + (ax2 * 32)) + (ax3 * 4)) + ax4)] = tarray[((((ax1 * 288) + (ax2 * 32)) + (ax3 * 4)) + ax4)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1152];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        for (int32_t i3 = 0; i3 < 4; ++i3) {\n          compute[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)] = tarray[((((i0 * 288) + (i1 * 32)) + (i2 * 4)) + i3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) / 9) * 288) + ((((((int)blockIdx.x) * 5) + (((int)threadIdx.x) >> 5)) % 9) * 32)) + (((int)threadIdx.x) & 31))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_reshape[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_divide[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = (tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] / tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] == tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_equal[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((int8_t)(tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] == tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)4) + (((int64_t)((int)threadIdx.x)) >> (int64_t)8)) < (int64_t)9) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)9 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 1152)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[2304];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_concat[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((4 <= ax0) ? tarray[(((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3) - 1152)] : tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_elemwise_sum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_elemwise_sum[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = (tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] + tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_floor_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_floor_divide[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = floorf((tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] / tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_floor_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - (floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_floor_mod[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = (tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] - (floorf((tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] / tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)])) * tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_greater[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_greater[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((int8_t)(tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] < tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_greater_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_greater_equal[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((int8_t)(tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] <= tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_less[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_less[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((int8_t)(tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] < tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_less_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_less_equal[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((int8_t)(tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] <= tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_maximum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          float v_ = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          T_maximum[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((v_) > (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_minimum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          float v_ = tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)];\n          T_minimum[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((v_) < (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = fmodf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_mod[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = fmodf(tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)], tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_multiply[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_multiply[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = (tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] * tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_not_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_not_equal[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = ((int8_t)(tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] != tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_power[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = powf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_power[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = powf(tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)], tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)9) {\n    T_subtract[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[1152];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_subtract[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] = 0.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer < 6; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer) {\n    if (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 16) + (((int)blockIdx.x) >> 4)) < 81) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 2048) + (((int)blockIdx.x) * 8)) + (((int)threadIdx.x) >> 7)) / 9)] * tarray[((((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 8192) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) >> 5)) % 36) * 32) + (((int)threadIdx.x) & 31))]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[1327104];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 4; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 9; ++ax5) {\n              for (int32_t ax6 = 0; ax6 < 8; ++ax6) {\n                for (int32_t ax7 = 0; ax7 < 4; ++ax7) {\n                  T_tensordot[((((((((ax0 * 331776) + (ax1 * 36864)) + (ax2 * 4608)) + (ax3 * 1152)) + (ax4 * 288)) + (ax5 * 32)) + (ax6 * 4)) + ax7)] = (tarray[((((ax0 * 288) + (ax1 * 32)) + (ax2 * 4)) + ax3)] * tarray[((((ax4 * 288) + (ax5 * 32)) + (ax6 * 4)) + ax7)]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = coshf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = coshf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __cosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = cosf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = acosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = acosf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = asinf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = asinhf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = atanf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = atanhf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ceilf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = ceilf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.000000e+02f), 0.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          float v_ = tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)];\n          float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = erff(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = erff(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = expf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_fast_erf[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          float v_ = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n          T_fast_erf[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n      int v_ = ((int)(floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n            float v_ = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n            float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n            int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          float v__3 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n          float v__5 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n          float v__7 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n          float v__9 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n          float v__11 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n          float v__13 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n          float v__15 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n          float v__17 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n          float v__19 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n          float v__21 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n          float v__23 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n          float v__25 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n          float v__27 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n          float v__29 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n          float v__31 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n          float v__33 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n          float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n          float v__36 = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          T_fast_exp[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          float v_ = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          T_minimum[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 8; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 2; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 10; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 9; ++ax3_1) {\n          float v__1 = T_minimum[((((ax0_1 * 180) + (ax1_1 * 90)) + (ax2_1 * 9)) + ax3_1)];\n          T_minimum[((((ax0_1 * 180) + (ax1_1 * 90)) + (ax2_1 * 9)) + ax3_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 8; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 2; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 10; ++ax2_2) {\n        for (int32_t ax3_2 = 0; ax3_2 < 9; ++ax3_2) {\n          T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] = ((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 90)) + (ax2_2 * 9)) + ax3_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((int)(((((2 != 0) ? (((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) << ((int64_t)2)) : ((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]) << ((int64_t)2)) : ((int64_t)tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((((int)blockIdx.x) * 124) + ((int)threadIdx.x)) % 180) / 9) * 9) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9)) + 1260) - ((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 45) * 180))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_reverse_sequence[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = tarray[(((((ax1 * 90) + (ax2 * 9)) + ax3) + 1260) - (ax0 * 180))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = floorf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_full_like[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 1.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_full_like[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = 1.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = ((int8_t)(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] != tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __logf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = logf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log10f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = log10f(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log2f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = log2f(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 8; ++k0) {\n    for (int k1 = 0; k1 < 2; ++k1) {\n      for (int k2 = 0; k2 < 10; ++k2) {\n        for (int k3 = 0; k3 < 9; ++k3) {\n          tarray_red[0] = max(tarray_red[0], tarray[((((k0 * 180) + (k1 * 90)) + (k2 * 9)) + k3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 8; ++k0) {\n    for (int32_t k1 = 0; k1 < 2; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        for (int32_t k3 = 0; k3 < 9; ++k3) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 180) + (k1 * 90)) + (k2 * 9)) + k3)];\n          tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 8; ++k0) {\n    for (int k1 = 0; k1 < 2; ++k1) {\n      for (int k2 = 0; k2 < 10; ++k2) {\n        for (int k3 = 0; k3 < 9; ++k3) {\n          tarray_red[0] = min(tarray_red[0], tarray[((((k0 * 180) + (k1 * 90)) + (k2 * 9)) + k3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 8; ++k0) {\n    for (int32_t k1 = 0; k1 < 2; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        for (int32_t k3 = 0; k3 < 9; ++k3) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 180) + (k1 * 90)) + (k2 * 9)) + k3)];\n          tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * -1.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = (tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] * -1.000000e+00f);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(180) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(180) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 8; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 180) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[180];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n        tarray_red[(((ax1 * 90) + (ax2 * 9)) + ax3)] = 1.000000e+00f;\n        for (int32_t k0 = 0; k0 < 8; ++k0) {\n          tarray_red[(((ax1 * 90) + (ax2 * 9)) + ax3)] = (tarray_red[(((ax1 * 90) + (ax2 * 9)) + ax3)] * tarray[((((k0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    tensor[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          tensor[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_repeat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_repeat[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = roundf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = roundf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = (1.000000e+00f / sqrtf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 3) ? (int64_t)9 : ((((int)threadIdx.x) == 2) ? (int64_t)10 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)8))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 3) ? (int64_t)9 : ((ax0 == 2) ? (int64_t)10 : ((ax0 == 1) ? (int64_t)2 : (int64_t)8))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_sign[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? 1.000000e+00f : ((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_sign[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((0.000000e+00f < tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]) ? 1.000000e+00f : ((tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __sinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = sinf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = sinhf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = sqrtf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = tanf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = tanhf(tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)135) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 135) * 90) + (((((((int)blockIdx.x) * 214) + ((int)threadIdx.x)) % 270) / 27) * 9)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[8640];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 20; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 27; ++ax3) {\n          T_tile[((((ax0 * 1080) + (ax1 * 540)) + (ax2 * 27)) + ax3)] = tarray[((((ax0 * 180) + (ax1 * 90)) + ((ax2 % 10) * 9)) + (ax3 % 9))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  if (((((int)((int64_t)((int)blockIdx.x))) * 32) + (((int)((int64_t)((int)threadIdx.x))) >> 5)) < 45) {\n    if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n      T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[1440];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n          T_expand_dims[((((ax1 * 180) + (ax2 * 90)) + (ax3 * 9)) + ax4)] = tarray[((((ax1 * 180) + (ax2 * 90)) + (ax3 * 9)) + ax4)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)] = tarray[((((i0 * 180) + (i1 * 90)) + (i2 * 9)) + i3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) / 9) * 144) + ((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 1)) % 72) * 2)) + (((int)threadIdx.x) & 1))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          T_reshape[((((ax0 * 144) + (ax1 * 18)) + (ax2 * 2)) + ax3)] = tarray[((((ax0 * 144) + (ax1 * 18)) + (ax2 * 2)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_divide[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = (tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] / tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] == tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_equal[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] == tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)45) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)45 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 1440)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[2880];\n  for (int32_t ax0 = 0; ax0 < 16; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_concat[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((8 <= ax0) ? tarray[(((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3) - 1440)] : tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_elemwise_sum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_elemwise_sum[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = (tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] + tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_floor_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_floor_divide[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = floorf((tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] / tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_floor_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - (floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_floor_mod[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = (tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] - (floorf((tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] / tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)])) * tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_greater[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_greater[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] < tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_greater_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_greater_equal[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] <= tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_less[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_less[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] < tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_less_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_less_equal[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] <= tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_maximum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          float v_ = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          T_maximum[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((v_) > (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_minimum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          float v_ = tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)];\n          T_minimum[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((v_) < (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = fmodf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_mod[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = fmodf(tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)], tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_multiply[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_multiply[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = (tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] * tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_not_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_not_equal[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] != tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_power[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = powf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_power[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = powf(tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)], tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_subtract[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_subtract[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] = 0.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer < 8; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer) {\n    if (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 256) + ((int)blockIdx.x)) < 2025) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 8192) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) >> 5)) / 45)] * tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 1440)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[2073600];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 8; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 2; ++ax5) {\n              for (int32_t ax6 = 0; ax6 < 10; ++ax6) {\n                for (int32_t ax7 = 0; ax7 < 9; ++ax7) {\n                  T_tensordot[((((((((ax0 * 259200) + (ax1 * 129600)) + (ax2 * 12960)) + (ax3 * 1440)) + (ax4 * 180)) + (ax5 * 90)) + (ax6 * 9)) + ax7)] = (tarray[((((ax0 * 180) + (ax1 * 90)) + (ax2 * 9)) + ax3)] * tarray[((((ax4 * 180) + (ax5 * 90)) + (ax6 * 9)) + ax7)]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = coshf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = cosf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = acosf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = asinf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = asinhf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = atanf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = atanhf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = ceilf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          float v_ = tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)];\n          float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = erff(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = expf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          float v_ = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n          T_fast_erf[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n            float v_ = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n            float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n            int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          float v__3 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n          float v__5 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n          float v__7 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n          float v__9 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n          float v__11 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n          float v__13 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n          float v__15 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n          float v__17 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n          float v__19 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n          float v__21 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n          float v__23 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n          float v__25 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n          float v__27 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n          float v__29 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n          float v__31 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n          float v__33 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n          float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n          float v__36 = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          T_fast_exp[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          float v_ = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          T_minimum[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 4; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 5; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 4; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 9; ++ax3_1) {\n          float v__1 = T_minimum[((((ax0_1 * 180) + (ax1_1 * 36)) + (ax2_1 * 9)) + ax3_1)];\n          T_minimum[((((ax0_1 * 180) + (ax1_1 * 36)) + (ax2_1 * 9)) + ax3_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 5; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 4; ++ax2_2) {\n        for (int32_t ax3_2 = 0; ax3_2 < 9; ++ax3_2) {\n          T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] = ((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)] * T_minimum[((((ax0_2 * 180) + (ax1_2 * 36)) + (ax2_2 * 9)) + ax3_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]) << ((int64_t)2)) : ((int64_t)tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) % 180) + 540) - ((((int)threadIdx.x) / 180) * 180))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_reverse_sequence[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = tarray[(((((ax1 * 36) + (ax2 * 9)) + ax3) + 540) - (ax0 * 180))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = floorf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_full_like[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = 1.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = ((int8_t)(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] != tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = logf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = log10f(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = log2f(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    for (int k1 = 0; k1 < 5; ++k1) {\n      for (int k2 = 0; k2 < 4; ++k2) {\n        for (int k3 = 0; k3 < 9; ++k3) {\n          tarray_red[0] = max(tarray_red[0], tarray[((((k0 * 180) + (k1 * 36)) + (k2 * 9)) + k3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    for (int32_t k1 = 0; k1 < 5; ++k1) {\n      for (int32_t k2 = 0; k2 < 4; ++k2) {\n        for (int32_t k3 = 0; k3 < 9; ++k3) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 180) + (k1 * 36)) + (k2 * 9)) + k3)];\n          tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    for (int k1 = 0; k1 < 5; ++k1) {\n      for (int k2 = 0; k2 < 4; ++k2) {\n        for (int k3 = 0; k3 < 9; ++k3) {\n          tarray_red[0] = min(tarray_red[0], tarray[((((k0 * 180) + (k1 * 36)) + (k2 * 9)) + k3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 4; ++k0) {\n    for (int32_t k1 = 0; k1 < 5; ++k1) {\n      for (int32_t k2 = 0; k2 < 4; ++k2) {\n        for (int32_t k3 = 0; k3 < 9; ++k3) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 180) + (k1 * 36)) + (k2 * 9)) + k3)];\n          tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = (tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] * -1.000000e+00f);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(180) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(180) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 4; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 180) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[180];\n  for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n        tarray_red[(((ax1 * 36) + (ax2 * 9)) + ax3)] = 1.000000e+00f;\n        for (int32_t k0 = 0; k0 < 4; ++k0) {\n          tarray_red[(((ax1 * 36) + (ax2 * 9)) + ax3)] = (tarray_red[(((ax1 * 36) + (ax2 * 9)) + ax3)] * tarray[((((k0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          tensor[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_repeat[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = roundf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = (1.000000e+00f / sqrtf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 3) ? (int64_t)9 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)5 : (int64_t)4))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 3) ? (int64_t)9 : ((ax0 == 2) ? (int64_t)4 : ((ax0 == 1) ? (int64_t)5 : (int64_t)4))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_sign[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((0.000000e+00f < tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]) ? 1.000000e+00f : ((tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = sinf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = sinhf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = sqrtf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = tanf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = tanhf(tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)135) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 27) * 36) + (((((((int)blockIdx.x) * 52) + ((int)threadIdx.x)) % 108) / 27) * 9)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[4320];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 27; ++ax3) {\n          T_tile[((((ax0 * 1080) + (ax1 * 216)) + (ax2 * 27)) + ax3)] = tarray[((((ax0 * 180) + (ax1 * 36)) + ((ax2 & 3) * 9)) + (ax3 % 9))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[720];\n  for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 5; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n          T_expand_dims[((((ax1 * 180) + (ax2 * 36)) + (ax3 * 9)) + ax4)] = tarray[((((ax1 * 180) + (ax2 * 36)) + (ax3 * 9)) + ax4)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[720];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3 = 0; i3 < 9; ++i3) {\n          compute[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)] = tarray[((((i0 * 180) + (i1 * 36)) + (i2 * 9)) + i3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[720];\n  for (int32_t ax0 = 0; ax0 < 9; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          T_reshape[((((ax0 * 80) + (ax1 * 16)) + (ax2 * 4)) + ax3)] = tarray[((((ax0 * 80) + (ax1 * 16)) + (ax2 * 4)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_divide[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = (tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] / tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_equal[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] == tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)45 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)64) + (((int64_t)((int)threadIdx.x)) >> (int64_t)4))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 720)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[1440];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_concat[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((4 <= ax0) ? tarray[(((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3) - 720)] : tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_elemwise_sum[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = (tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] + tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_floor_divide[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = floorf((tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] / tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_floor_mod[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = (tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] - (floorf((tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] / tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)])) * tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_greater[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] < tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_greater_equal[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] <= tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_less[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] < tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_less_equal[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] <= tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          float v_ = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          T_maximum[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((v_) > (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          float v_ = tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)];\n          T_minimum[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((v_) < (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_mod[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = fmodf(tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)], tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_multiply[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = (tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] * tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_not_equal[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = ((int8_t)(tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] != tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_power[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = powf(tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)], tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(720) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[720];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          T_subtract[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] = 0.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer) {\n    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 8)) < 2025) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 16384) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) >> 4)) / 45)] * tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 720)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[518400];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 5; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 9; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 4; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 5; ++ax5) {\n              for (int32_t ax6 = 0; ax6 < 4; ++ax6) {\n                for (int32_t ax7 = 0; ax7 < 9; ++ax7) {\n                  T_tensordot[((((((((ax0 * 129600) + (ax1 * 25920)) + (ax2 * 6480)) + (ax3 * 720)) + (ax4 * 180)) + (ax5 * 36)) + (ax6 * 9)) + ax7)] = (tarray[((((ax0 * 180) + (ax1 * 36)) + (ax2 * 9)) + ax3)] * tarray[((((ax4 * 180) + (ax5 * 36)) + (ax6 * 9)) + ax7)]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = coshf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = cosf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = acosf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = asinf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = asinhf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = atanf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = atanhf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = ceilf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        float v_ = tarray[(((i1 * 18) + (i2 * 6)) + i3)];\n        float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = erff(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = expf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        float v_ = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n        T_fast_erf[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n          float v_ = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n          float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n          int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        float v__3 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n        float v__5 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n        float v__7 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n        float v__9 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n        float v__11 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n        float v__13 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n        float v__15 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n        float v__17 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n        float v__19 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n        float v__21 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n        float v__23 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n        float v__25 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n        float v__27 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n        float v__29 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n        float v__31 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n        float v__33 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n        float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n        float v__36 = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        T_fast_exp[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        float v_ = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        T_minimum[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n      }\n    }\n  }\n  for (int32_t ax1_1 = 0; ax1_1 < 8; ++ax1_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 3; ++ax2_1) {\n      for (int32_t ax3_1 = 0; ax3_1 < 6; ++ax3_1) {\n        float v__1 = T_minimum[(((ax1_1 * 18) + (ax2_1 * 6)) + ax3_1)];\n        T_minimum[(((ax1_1 * 18) + (ax2_1 * 6)) + ax3_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n      }\n    }\n  }\n  for (int32_t ax1_2 = 0; ax1_2 < 8; ++ax1_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 3; ++ax2_2) {\n      for (int32_t ax3_2 = 0; ax3_2 < 6; ++ax3_2) {\n        T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] = ((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * (((T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)] * T_minimum[(((ax1_2 * 18) + (ax2_2 * 6)) + ax3_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((i1 * 18) + (i2 * 6)) + i3)]) << ((int64_t)2)) : ((int64_t)tarray[(((i1 * 18) + (i2 * 6)) + i3)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_reverse_sequence[(((ax1 * 18) + (ax2 * 6)) + ax3)] = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = floorf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_full_like[(((ax1 * 18) + (ax2 * 6)) + ax3)] = 1.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = ((int8_t)(tarray[(((i1 * 18) + (i2 * 6)) + i3)] != tarray[(((i1 * 18) + (i2 * 6)) + i3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = logf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = log10f(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = log2f(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k1 = 0; k1 < 8; ++k1) {\n    for (int k2 = 0; k2 < 3; ++k2) {\n      for (int k3 = 0; k3 < 6; ++k3) {\n        tarray_red[0] = max(tarray_red[0], tarray[(((k1 * 18) + (k2 * 6)) + k3)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k1 = 0; k1 < 8; ++k1) {\n    for (int32_t k2 = 0; k2 < 3; ++k2) {\n      for (int32_t k3 = 0; k3 < 6; ++k3) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k1 * 18) + (k2 * 6)) + k3)];\n        tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k1 = 0; k1 < 8; ++k1) {\n    for (int k2 = 0; k2 < 3; ++k2) {\n      for (int k3 = 0; k3 < 6; ++k3) {\n        tarray_red[0] = min(tarray_red[0], tarray[(((k1 * 18) + (k2 * 6)) + k3)]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k1 = 0; k1 < 8; ++k1) {\n    for (int32_t k2 = 0; k2 < 3; ++k2) {\n      for (int32_t k3 = 0; k3 < 6; ++k3) {\n        float v_ = tarray_red[0];\n        float v__1 = tarray[(((k1 * 18) + (k2 * 6)) + k3)];\n        tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = (tarray[(((i1 * 18) + (i2 * 6)) + i3)] * -1.000000e+00f);\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        tarray_red[(((ax1 * 18) + (ax2 * 6)) + ax3)] = 1.000000e+00f;\n        tarray_red[(((ax1 * 18) + (ax2 * 6)) + ax3)] = (tarray_red[(((ax1 * 18) + (ax2 * 6)) + ax3)] * tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        tensor[(((ax1 * 18) + (ax2 * 6)) + ax3)] = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_repeat[(((ax1 * 18) + (ax2 * 6)) + ax3)] = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = roundf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = (1.000000e+00f / sqrtf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)3 : ((((int)threadIdx.x) == 1) ? (int64_t)8 : (int64_t)1))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 3) ? (int64_t)6 : ((ax0 == 2) ? (int64_t)3 : ((ax0 == 1) ? (int64_t)8 : (int64_t)1))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((i1 * 18) + (i2 * 6)) + i3)]))));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_sign[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((0.000000e+00f < tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]) ? 1.000000e+00f : ((tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = sinf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = sinhf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = sqrtf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = tanf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = tanhf(tarray[(((i1 * 18) + (i2 * 6)) + i3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(864) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(864) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  T_tile[((int)threadIdx.x)] = tarray[((((((int)threadIdx.x) / 108) * 18) + (((((int)threadIdx.x) % 54) / 18) * 6)) + (((int)threadIdx.x) % 6))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[864];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 18; ++ax3) {\n        T_tile[(((ax1 * 108) + (ax2 * 18)) + ax3)] = tarray[(((ax1 * 18) + ((ax2 % 3) * 6)) + (ax3 % 6))];\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[144];\n  for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n    for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n      for (int32_t ax4 = 0; ax4 < 6; ++ax4) {\n        T_expand_dims[(((ax2 * 18) + (ax3 * 6)) + ax4)] = tarray[(((ax2 * 18) + (ax3 * 6)) + ax4)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[144];\n  for (int32_t i1 = 0; i1 < 8; ++i1) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      for (int32_t i3 = 0; i3 < 6; ++i3) {\n        compute[(((i1 * 18) + (i2 * 6)) + i3)] = tarray[(((i1 * 18) + (i2 * 6)) + i3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[144];\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n        T_reshape[(((ax0 * 18) + (ax1 * 3)) + ax3)] = tarray[(((ax0 * 18) + (ax1 * 3)) + ax3)];\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_divide[(((ax1 * 18) + (ax2 * 6)) + ax3)] = (tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] / tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_equal[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((int8_t)(tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] == tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(288) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(288) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  T_concat[((int)threadIdx.x)] = (((int64_t)144 <= ((int64_t)((int)threadIdx.x))) ? tarray[(((int)threadIdx.x) - 144)] : tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[288];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n          T_concat[((((ax0 * 144) + (ax1 * 18)) + (ax2 * 6)) + ax3)] = ((ax0 == 1) ? tarray[(((((ax0 * 144) + (ax1 * 18)) + (ax2 * 6)) + ax3) - 144)] : tarray[((((ax0 * 144) + (ax1 * 18)) + (ax2 * 6)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_elemwise_sum[(((ax1 * 18) + (ax2 * 6)) + ax3)] = (tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] + tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_floor_divide[(((ax1 * 18) + (ax2 * 6)) + ax3)] = floorf((tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] / tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_floor_mod[(((ax1 * 18) + (ax2 * 6)) + ax3)] = (tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] - (floorf((tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] / tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)])) * tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_greater[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((int8_t)(tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] < tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_greater_equal[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((int8_t)(tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] <= tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_less[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((int8_t)(tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] < tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_less_equal[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((int8_t)(tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] <= tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        float v_ = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        T_maximum[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((v_) > (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        float v_ = tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)];\n        T_minimum[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((v_) < (v_) ? (v_) : (v_));\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_mod[(((ax1 * 18) + (ax2 * 6)) + ax3)] = fmodf(tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)], tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_multiply[(((ax1 * 18) + (ax2 * 6)) + ax3)] = (tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] * tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_not_equal[(((ax1 * 18) + (ax2 * 6)) + ax3)] = ((int8_t)(tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] != tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]));\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_power[(((ax1 * 18) + (ax2 * 6)) + ax3)] = powf(tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)], tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)]);\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[144];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        T_subtract[(((ax1 * 18) + (ax2 * 6)) + ax3)] = 0.000000e+00f;\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)4) + (((int64_t)((int)threadIdx.x)) >> (int64_t)8)) < (int64_t)81) {\n    T_tensordot[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[(((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) / 9)] * tarray[((((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 1)) % 72) / 3) * 6) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 6))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[20736];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n        for (int32_t ax5 = 0; ax5 < 8; ++ax5) {\n          for (int32_t ax6 = 0; ax6 < 3; ++ax6) {\n            for (int32_t ax7 = 0; ax7 < 6; ++ax7) {\n              T_tensordot[((((((ax1 * 2592) + (ax2 * 864)) + (ax3 * 144)) + (ax5 * 18)) + (ax6 * 6)) + ax7)] = (tarray[(((ax1 * 18) + (ax2 * 6)) + ax3)] * tarray[(((ax5 * 18) + (ax6 * 6)) + ax7)]);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = coshf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = coshf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __cosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = cosf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = acosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = acosf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = asinf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = asinhf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = atanf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = atanhf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ceilf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = ceilf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.000000e+02f), 0.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          float v_ = tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)];\n          float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = erff(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = erff(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = expf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_fast_erf[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          float v_ = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n          T_fast_erf[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n      int v_ = ((int)(floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n            float v_ = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n            float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n            int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          float v__3 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n          float v__5 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n          float v__7 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n          float v__9 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n          float v__11 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n          float v__13 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n          float v__15 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n          float v__17 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n          float v__19 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n          float v__21 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n          float v__23 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n          float v__25 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n          float v__27 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n          float v__29 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n          float v__31 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n          float v__33 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n          float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n          float v__36 = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          T_fast_exp[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          float v_ = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          T_minimum[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 7; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 7; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 7; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 10; ++ax3_1) {\n          float v__1 = T_minimum[((((ax0_1 * 490) + (ax1_1 * 70)) + (ax2_1 * 10)) + ax3_1)];\n          T_minimum[((((ax0_1 * 490) + (ax1_1 * 70)) + (ax2_1 * 10)) + ax3_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 7; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 7; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 7; ++ax2_2) {\n        for (int32_t ax3_2 = 0; ax3_2 < 10; ++ax3_2) {\n          T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] = ((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 70)) + (ax2_2 * 10)) + ax3_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((int)(((((2 != 0) ? (((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) << ((int64_t)2)) : ((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]) << ((int64_t)2)) : ((int64_t)tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((((int)blockIdx.x) * 22) + (((int)threadIdx.x) >> 1)) % 245) / 5) * 10) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 2940) - ((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 245) * 490))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_reverse_sequence[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = tarray[(((((ax1 * 70) + (ax2 * 10)) + ax3) + 2940) - (ax0 * 490))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = floorf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_full_like[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 1.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_full_like[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = 1.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = ((int8_t)(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] != tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __logf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = logf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log10f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = log10f(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log2f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = log2f(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    for (int k1 = 0; k1 < 7; ++k1) {\n      for (int k2 = 0; k2 < 7; ++k2) {\n        for (int k3 = 0; k3 < 10; ++k3) {\n          tarray_red[0] = max(tarray_red[0], tarray[((((k0 * 490) + (k1 * 70)) + (k2 * 10)) + k3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 7; ++k0) {\n    for (int32_t k1 = 0; k1 < 7; ++k1) {\n      for (int32_t k2 = 0; k2 < 7; ++k2) {\n        for (int32_t k3 = 0; k3 < 10; ++k3) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 490) + (k1 * 70)) + (k2 * 10)) + k3)];\n          tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    for (int k1 = 0; k1 < 7; ++k1) {\n      for (int k2 = 0; k2 < 7; ++k2) {\n        for (int k3 = 0; k3 < 10; ++k3) {\n          tarray_red[0] = min(tarray_red[0], tarray[((((k0 * 490) + (k1 * 70)) + (k2 * 10)) + k3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 7; ++k0) {\n    for (int32_t k1 = 0; k1 < 7; ++k1) {\n      for (int32_t k2 = 0; k2 < 7; ++k2) {\n        for (int32_t k3 = 0; k3 < 10; ++k3) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 490) + (k1 * 70)) + (k2 * 10)) + k3)];\n          tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * -1.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = (tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] * -1.000000e+00f);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(490) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(490) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 490) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[490];\n  for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        tarray_red[(((ax1 * 70) + (ax2 * 10)) + ax3)] = 1.000000e+00f;\n        for (int32_t k0 = 0; k0 < 7; ++k0) {\n          tarray_red[(((ax1 * 70) + (ax2 * 10)) + ax3)] = (tarray_red[(((ax1 * 70) + (ax2 * 10)) + ax3)] * tarray[((((k0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    tensor[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          tensor[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_repeat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_repeat[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = roundf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = roundf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = (1.000000e+00f / sqrtf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 3) ? (int64_t)10 : ((((int)threadIdx.x) == 2) ? (int64_t)7 : ((((int)threadIdx.x) == 1) ? (int64_t)7 : (int64_t)7))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[4];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 3) ? (int64_t)10 : ((ax0 == 2) ? (int64_t)7 : ((ax0 == 1) ? (int64_t)7 : (int64_t)7))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_sign[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? 1.000000e+00f : ((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_sign[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((0.000000e+00f < tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]) ? 1.000000e+00f : ((tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __sinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = sinf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = sinhf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = sqrtf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = tanf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = tanhf(tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)256) + (((int64_t)((int)threadIdx.x)) >> (int64_t)2)) < (int64_t)5145) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 105) * 70) + (((((((int)blockIdx.x) * 92) + (((int)threadIdx.x) >> 1)) % 105) / 15) * 10)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[20580];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 14; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 30; ++ax3) {\n          T_tile[((((ax0 * 2940) + (ax1 * 420)) + (ax2 * 30)) + ax3)] = tarray[((((ax0 * 490) + (ax1 * 70)) + ((ax2 % 7) * 10)) + (ax3 % 10))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  if (((((int)((int64_t)((int)blockIdx.x))) * 512) + (((int)((int64_t)((int)threadIdx.x))) >> 1)) < 1715) {\n    if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n      T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[3430];\n  for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 10; ++ax4) {\n          T_expand_dims[((((ax1 * 490) + (ax2 * 70)) + (ax3 * 10)) + ax4)] = tarray[((((ax1 * 490) + (ax2 * 70)) + (ax3 * 10)) + ax4)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[3430];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 7; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          compute[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)] = tarray[((((i0 * 490) + (i1 * 70)) + (i2 * 10)) + i3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[(((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 35) * 70) + (((((int)blockIdx.x) * 44) + ((int)threadIdx.x)) % 70))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n          T_reshape[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 7)) + ax3)] = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 7)) + ax3)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_divide[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = (tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] / tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] == tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_equal[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] == tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)256) + (((int64_t)((int)threadIdx.x)) >> (int64_t)2)) < (int64_t)1715) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)1715 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 3430)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[6860];\n  for (int32_t ax0 = 0; ax0 < 14; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_concat[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((7 <= ax0) ? tarray[(((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3) - 3430)] : tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_elemwise_sum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_elemwise_sum[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = (tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] + tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_floor_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_floor_divide[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = floorf((tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] / tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_floor_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - (floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_floor_mod[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = (tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] - (floorf((tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] / tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)])) * tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_greater[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_greater[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] < tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_greater_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_greater_equal[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] <= tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_less[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_less[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] < tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_less_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_less_equal[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] <= tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_maximum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          float v_ = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          T_maximum[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((v_) > (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_minimum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          float v_ = tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)];\n          T_minimum[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((v_) < (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = fmodf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_mod[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = fmodf(tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)], tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_multiply[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_multiply[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = (tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] * tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_not_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_not_equal[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] != tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_power[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = powf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_power[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = powf(tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)], tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)512) + (((int64_t)((int)threadIdx.x)) >> (int64_t)1)) < (int64_t)1715) {\n    T_subtract[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[3430];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          T_subtract[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] = 0.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer < 45; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer) {\n    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + (((int)threadIdx.x) >> 2)) < 2941225) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 131072) + (((int)blockIdx.x) * 512)) + (((int)threadIdx.x) >> 1)) / 1715)] * tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 3430)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[11764900];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 7; ++ax5) {\n              for (int32_t ax6 = 0; ax6 < 7; ++ax6) {\n                for (int32_t ax7 = 0; ax7 < 10; ++ax7) {\n                  T_tensordot[((((((((ax0 * 1680700) + (ax1 * 240100)) + (ax2 * 34300)) + (ax3 * 3430)) + (ax4 * 490)) + (ax5 * 70)) + (ax6 * 10)) + ax7)] = (tarray[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax3)] * tarray[((((ax4 * 490) + (ax5 * 70)) + (ax6 * 10)) + ax7)]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = coshf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = coshf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __cosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = cosf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = acosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = acosf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = asinf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = asinhf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = atanf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = atanhf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ceilf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = ceilf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.000000e+02f), 0.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            float v_ = tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)];\n            float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = erff(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = erff(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = expf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_fast_erf[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            float v_ = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n            T_fast_erf[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n      int v_ = ((int)(floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n              float v_ = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n              float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n              int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            float v__3 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n            float v__5 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n            float v__7 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n            float v__9 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n            float v__11 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n            float v__13 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n            float v__15 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n            float v__17 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n            float v__19 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n            float v__21 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n            float v__23 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n            float v__25 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n            float v__27 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n            float v__29 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n            float v__31 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n            float v__33 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n            float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n            float v__36 = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            T_fast_exp[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            float v_ = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            T_minimum[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n          }\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 6; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 2; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 3; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 10; ++ax3_1) {\n          for (int32_t ax4_1 = 0; ax4_1 < 7; ++ax4_1) {\n            float v__1 = T_minimum[(((((ax0_1 * 420) + (ax1_1 * 210)) + (ax2_1 * 70)) + (ax3_1 * 7)) + ax4_1)];\n            T_minimum[(((((ax0_1 * 420) + (ax1_1 * 210)) + (ax2_1 * 70)) + (ax3_1 * 7)) + ax4_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n          }\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 6; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 2; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 3; ++ax2_2) {\n        for (int32_t ax3_2 = 0; ax3_2 < 10; ++ax3_2) {\n          for (int32_t ax4_2 = 0; ax4_2 < 7; ++ax4_2) {\n            T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] = ((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)] * T_minimum[(((((ax0_2 * 420) + (ax1_2 * 210)) + (ax2_2 * 70)) + (ax3_2 * 7)) + ax4_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((int)(((((2 != 0) ? (((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) << ((int64_t)2)) : ((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]) << ((int64_t)2)) : ((int64_t)tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((((int)blockIdx.x) * 184) + ((int)threadIdx.x)) % 420) / 7) * 7) + (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 7)) + 2100) - ((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 105) * 420))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_reverse_sequence[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = tarray[((((((ax1 * 210) + (ax2 * 70)) + (ax3 * 7)) + ax4) + 2100) - (ax0 * 420))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = floorf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_full_like[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 1.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_full_like[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = 1.000000e+00f;\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = ((int8_t)(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] != tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __logf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = logf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log10f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = log10f(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log2f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = log2f(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    for (int k1 = 0; k1 < 2; ++k1) {\n      for (int k2 = 0; k2 < 3; ++k2) {\n        for (int k3 = 0; k3 < 10; ++k3) {\n          for (int k4 = 0; k4 < 7; ++k4) {\n            tarray_red[0] = max(tarray_red[0], tarray[(((((k0 * 420) + (k1 * 210)) + (k2 * 70)) + (k3 * 7)) + k4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    for (int32_t k1 = 0; k1 < 2; ++k1) {\n      for (int32_t k2 = 0; k2 < 3; ++k2) {\n        for (int32_t k3 = 0; k3 < 10; ++k3) {\n          for (int32_t k4 = 0; k4 < 7; ++k4) {\n            float v_ = tarray_red[0];\n            float v__1 = tarray[(((((k0 * 420) + (k1 * 210)) + (k2 * 70)) + (k3 * 7)) + k4)];\n            tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    for (int k1 = 0; k1 < 2; ++k1) {\n      for (int k2 = 0; k2 < 3; ++k2) {\n        for (int k3 = 0; k3 < 10; ++k3) {\n          for (int k4 = 0; k4 < 7; ++k4) {\n            tarray_red[0] = min(tarray_red[0], tarray[(((((k0 * 420) + (k1 * 210)) + (k2 * 70)) + (k3 * 7)) + k4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    for (int32_t k1 = 0; k1 < 2; ++k1) {\n      for (int32_t k2 = 0; k2 < 3; ++k2) {\n        for (int32_t k3 = 0; k3 < 10; ++k3) {\n          for (int32_t k4 = 0; k4 < 7; ++k4) {\n            float v_ = tarray_red[0];\n            float v__1 = tarray[(((((k0 * 420) + (k1 * 210)) + (k2 * 70)) + (k3 * 7)) + k4)];\n            tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * -1.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = (tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] * -1.000000e+00f);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(420) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(420) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 420) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[420];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          tarray_red[((((ax1 * 210) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = 1.000000e+00f;\n          for (int32_t k0 = 0; k0 < 6; ++k0) {\n            tarray_red[((((ax1 * 210) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = (tarray_red[((((ax1 * 210) + (ax2 * 70)) + (ax3 * 7)) + ax4)] * tarray[(((((k0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    tensor[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            tensor[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_repeat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_repeat[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = roundf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = roundf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = (1.000000e+00f / sqrtf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 4) ? (int64_t)7 : ((((int)threadIdx.x) == 3) ? (int64_t)10 : ((((int)threadIdx.x) == 2) ? (int64_t)3 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)6)))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[5];\n  for (int32_t ax0 = 0; ax0 < 5; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 4) ? (int64_t)7 : ((ax0 == 3) ? (int64_t)10 : ((ax0 == 2) ? (int64_t)3 : ((ax0 == 1) ? (int64_t)2 : (int64_t)6)))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_sign[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? 1.000000e+00f : ((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_sign[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((0.000000e+00f < tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]) ? 1.000000e+00f : ((tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __sinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = sinf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = sinhf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = sqrtf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = tanf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = tanhf(tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)64) + (((int64_t)((int)threadIdx.x)) >> (int64_t)4)) < (int64_t)945) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 105) * 70) + (((((((int)blockIdx.x) * 184) + ((int)threadIdx.x)) % 210) / 21) * 7)) + (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 7))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[15120];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 20; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 21; ++ax4) {\n            T_tile[(((((ax0 * 2520) + (ax1 * 1260)) + (ax2 * 420)) + (ax3 * 21)) + ax4)] = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + ((ax3 % 10) * 7)) + (ax4 % 7))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  if (((((int)((int64_t)((int)blockIdx.x))) * 128) + (((int)((int64_t)((int)threadIdx.x))) >> 3)) < 315) {\n    if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n      T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[2520];\n  for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 10; ++ax4) {\n          for (int32_t ax5 = 0; ax5 < 7; ++ax5) {\n            T_expand_dims[(((((ax1 * 420) + (ax2 * 210)) + (ax3 * 70)) + (ax4 * 7)) + ax5)] = tarray[(((((ax1 * 420) + (ax2 * 210)) + (ax3 * 70)) + (ax4 * 7)) + ax5)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 7; ++i4) {\n            compute[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)] = tarray[(((((i0 * 420) + (i1 * 210)) + (i2 * 70)) + (i3 * 7)) + i4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 105) * 840) + (((((((int)blockIdx.x) * 46) + (((int)threadIdx.x) >> 2)) % 210) / 5) * 20)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 20))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[2520];\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 10; ++ax4) {\n            T_reshape[(((((ax0 * 840) + (ax1 * 120)) + (ax2 * 20)) + (ax3 * 10)) + ax4)] = tarray[(((((ax0 * 840) + (ax1 * 120)) + (ax2 * 20)) + (ax3 * 10)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_divide[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = (tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] / tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] == tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_equal[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] == tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)64) + (((int64_t)((int)threadIdx.x)) >> (int64_t)4)) < (int64_t)315) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)315 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 2520)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[5040];\n  for (int32_t ax0 = 0; ax0 < 12; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_concat[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((6 <= ax0) ? tarray[((((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4) - 2520)] : tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_elemwise_sum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_elemwise_sum[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = (tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] + tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_floor_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_floor_divide[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = floorf((tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] / tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_floor_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - (floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_floor_mod[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = (tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] - (floorf((tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] / tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)])) * tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_greater[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_greater[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] < tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_greater_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_greater_equal[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] <= tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_less[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_less[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] < tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_less_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_less_equal[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] <= tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_maximum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            float v_ = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            T_maximum[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((v_) > (v_) ? (v_) : (v_));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_minimum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            float v_ = tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)];\n            T_minimum[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((v_) < (v_) ? (v_) : (v_));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = fmodf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_mod[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = fmodf(tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)], tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_multiply[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_multiply[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = (tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] * tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_not_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_not_equal[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] != tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_power[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = powf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_power[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = powf(tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)], tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_subtract[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[2520];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            T_subtract[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] = 0.000000e+00f;\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer < 25; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer) {\n    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 4096) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) >> 6)) < 99225) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) / 315)] * tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 2520)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[6350400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 6; ++ax5) {\n              for (int32_t ax6 = 0; ax6 < 2; ++ax6) {\n                for (int32_t ax7 = 0; ax7 < 3; ++ax7) {\n                  for (int32_t ax8 = 0; ax8 < 10; ++ax8) {\n                    for (int32_t ax9 = 0; ax9 < 7; ++ax9) {\n                      T_tensordot[((((((((((ax0 * 1058400) + (ax1 * 529200)) + (ax2 * 176400)) + (ax3 * 17640)) + (ax4 * 2520)) + (ax5 * 420)) + (ax6 * 210)) + (ax7 * 70)) + (ax8 * 7)) + ax9)] = (tarray[(((((ax0 * 420) + (ax1 * 210)) + (ax2 * 70)) + (ax3 * 7)) + ax4)] * tarray[(((((ax5 * 420) + (ax6 * 210)) + (ax7 * 70)) + (ax8 * 7)) + ax9)]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = coshf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = coshf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __cosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = cosf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = acosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = acosf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = asinf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = asinhf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = atanf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = atanhf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ceilf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = ceilf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.000000e+02f), 0.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            float v_ = tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)];\n            float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = erff(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = erff(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = expf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_fast_erf[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            float v_ = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n            T_fast_erf[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n      int v_ = ((int)(floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n              float v_ = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n              float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n              int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            float v__3 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n            float v__5 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n            float v__7 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n            float v__9 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n            float v__11 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n            float v__13 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n            float v__15 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n            float v__17 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n            float v__19 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n            float v__21 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n            float v__23 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n            float v__25 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n            float v__27 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n            float v__29 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n            float v__31 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n            float v__33 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n            float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n            float v__36 = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            T_fast_exp[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            float v_ = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            T_minimum[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n          }\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 10; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 4; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 2; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 2; ++ax3_1) {\n          for (int32_t ax4_1 = 0; ax4_1 < 9; ++ax4_1) {\n            float v__1 = T_minimum[(((((ax0_1 * 144) + (ax1_1 * 36)) + (ax2_1 * 18)) + (ax3_1 * 9)) + ax4_1)];\n            T_minimum[(((((ax0_1 * 144) + (ax1_1 * 36)) + (ax2_1 * 18)) + (ax3_1 * 9)) + ax4_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n          }\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 10; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 4; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 2; ++ax2_2) {\n        for (int32_t ax3_2 = 0; ax3_2 < 2; ++ax3_2) {\n          for (int32_t ax4_2 = 0; ax4_2 < 9; ++ax4_2) {\n            T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] = ((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)] * T_minimum[(((((ax0_2 * 144) + (ax1_2 * 36)) + (ax2_2 * 18)) + (ax3_2 * 9)) + ax4_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((int)(((((2 != 0) ? (((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) << ((int64_t)2)) : ((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]) << ((int64_t)2)) : ((int64_t)tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((((int)blockIdx.x) * 16) + ((int)threadIdx.x)) % 144) / 9) * 9) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9)) + 1296) - ((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) / 9) * 144))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_reverse_sequence[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = tarray[((((((ax1 * 36) + (ax2 * 18)) + (ax3 * 9)) + ax4) + 1296) - (ax0 * 144))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = floorf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_full_like[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 1.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_full_like[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = 1.000000e+00f;\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = ((int8_t)(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] != tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __logf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = logf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log10f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = log10f(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log2f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = log2f(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 10; ++k0) {\n    for (int k1 = 0; k1 < 4; ++k1) {\n      for (int k2 = 0; k2 < 2; ++k2) {\n        for (int k3 = 0; k3 < 2; ++k3) {\n          for (int k4 = 0; k4 < 9; ++k4) {\n            tarray_red[0] = max(tarray_red[0], tarray[(((((k0 * 144) + (k1 * 36)) + (k2 * 18)) + (k3 * 9)) + k4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 10; ++k0) {\n    for (int32_t k1 = 0; k1 < 4; ++k1) {\n      for (int32_t k2 = 0; k2 < 2; ++k2) {\n        for (int32_t k3 = 0; k3 < 2; ++k3) {\n          for (int32_t k4 = 0; k4 < 9; ++k4) {\n            float v_ = tarray_red[0];\n            float v__1 = tarray[(((((k0 * 144) + (k1 * 36)) + (k2 * 18)) + (k3 * 9)) + k4)];\n            tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 10; ++k0) {\n    for (int k1 = 0; k1 < 4; ++k1) {\n      for (int k2 = 0; k2 < 2; ++k2) {\n        for (int k3 = 0; k3 < 2; ++k3) {\n          for (int k4 = 0; k4 < 9; ++k4) {\n            tarray_red[0] = min(tarray_red[0], tarray[(((((k0 * 144) + (k1 * 36)) + (k2 * 18)) + (k3 * 9)) + k4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 10; ++k0) {\n    for (int32_t k1 = 0; k1 < 4; ++k1) {\n      for (int32_t k2 = 0; k2 < 2; ++k2) {\n        for (int32_t k3 = 0; k3 < 2; ++k3) {\n          for (int32_t k4 = 0; k4 < 9; ++k4) {\n            float v_ = tarray_red[0];\n            float v__1 = tarray[(((((k0 * 144) + (k1 * 36)) + (k2 * 18)) + (k3 * 9)) + k4)];\n            tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * -1.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = (tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] * -1.000000e+00f);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(144) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 10; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 144) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[144];\n  for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n          tarray_red[((((ax1 * 36) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = 1.000000e+00f;\n          for (int32_t k0 = 0; k0 < 10; ++k0) {\n            tarray_red[((((ax1 * 36) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = (tarray_red[((((ax1 * 36) + (ax2 * 18)) + (ax3 * 9)) + ax4)] * tarray[(((((k0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    tensor[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            tensor[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_repeat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_repeat[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = roundf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = roundf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = (1.000000e+00f / sqrtf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 4) ? (int64_t)9 : ((((int)threadIdx.x) == 3) ? (int64_t)2 : ((((int)threadIdx.x) == 2) ? (int64_t)2 : ((((int)threadIdx.x) == 1) ? (int64_t)4 : (int64_t)10)))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[5];\n  for (int32_t ax0 = 0; ax0 < 5; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 4) ? (int64_t)9 : ((ax0 == 3) ? (int64_t)2 : ((ax0 == 2) ? (int64_t)2 : ((ax0 == 1) ? (int64_t)4 : (int64_t)10)))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_sign[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? 1.000000e+00f : ((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_sign[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((0.000000e+00f < tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]) ? 1.000000e+00f : ((tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __sinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = sinf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = sinhf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = sqrtf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = tanf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = tanhf(tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)135) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 27) * 18) + (((((((int)blockIdx.x) * 52) + ((int)threadIdx.x)) % 54) / 27) * 9)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[8640];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 27; ++ax4) {\n            T_tile[(((((ax0 * 864) + (ax1 * 216)) + (ax2 * 108)) + (ax3 * 27)) + ax4)] = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + ((ax3 & 1) * 9)) + (ax4 % 9))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  if (((((int)((int64_t)((int)blockIdx.x))) * 32) + (((int)((int64_t)((int)threadIdx.x))) >> 5)) < 45) {\n    if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n      T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[1440];\n  for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 2; ++ax4) {\n          for (int32_t ax5 = 0; ax5 < 9; ++ax5) {\n            T_expand_dims[(((((ax1 * 144) + (ax2 * 36)) + (ax3 * 18)) + (ax4 * 9)) + ax5)] = tarray[(((((ax1 * 144) + (ax2 * 36)) + (ax3 * 18)) + (ax4 * 9)) + ax5)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[1440];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 4; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        for (int32_t i3 = 0; i3 < 2; ++i3) {\n          for (int32_t i4 = 0; i4 < 9; ++i4) {\n            compute[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)] = tarray[(((((i0 * 144) + (i1 * 36)) + (i2 * 18)) + (i3 * 9)) + i4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 45) * 180) + (((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 90) / 45) * 90)) + (((((((int)blockIdx.x) * 17) + (((int)threadIdx.x) >> 1)) % 45) / 9) * 18)) + (((((((int)blockIdx.x) * 16) + ((int)threadIdx.x)) % 18) / 9) * 9)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[1440];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_reshape[(((((ax0 * 360) + (ax1 * 180)) + (ax2 * 90)) + (ax3 * 9)) + ax4)] = tarray[((((((ax0 * 360) + (ax1 * 180)) + ((((ax2 * 5) + (ax3 >> 1)) >> 1) * 36)) + ((((ax3 >> 1) + ax2) & 1) * 18)) + ((ax3 & 1) * 9)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_divide[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = (tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] / tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] == tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_equal[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] == tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)45) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)45 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 1440)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[2880];\n  for (int32_t ax0 = 0; ax0 < 20; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_concat[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((10 <= ax0) ? tarray[((((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4) - 1440)] : tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_elemwise_sum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_elemwise_sum[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = (tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] + tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_floor_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_floor_divide[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = floorf((tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] / tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_floor_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - (floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_floor_mod[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = (tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] - (floorf((tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] / tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)])) * tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_greater[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_greater[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] < tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_greater_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_greater_equal[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] <= tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_less[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_less[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] < tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_less_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_less_equal[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] <= tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_maximum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            float v_ = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            T_maximum[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((v_) > (v_) ? (v_) : (v_));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_minimum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            float v_ = tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)];\n            T_minimum[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((v_) < (v_) ? (v_) : (v_));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = fmodf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_mod[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = fmodf(tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)], tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_multiply[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_multiply[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = (tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] * tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_not_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_not_equal[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] != tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_power[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = powf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_power[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = powf(tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)], tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)45) {\n    T_subtract[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[1440];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_subtract[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] = 0.000000e+00f;\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer < 8; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer) {\n    if (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 256) + ((int)blockIdx.x)) < 2025) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 8192) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) >> 5)) / 45)] * tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 1440)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[2073600];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 4; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 10; ++ax5) {\n              for (int32_t ax6 = 0; ax6 < 4; ++ax6) {\n                for (int32_t ax7 = 0; ax7 < 2; ++ax7) {\n                  for (int32_t ax8 = 0; ax8 < 2; ++ax8) {\n                    for (int32_t ax9 = 0; ax9 < 9; ++ax9) {\n                      T_tensordot[((((((((((ax0 * 207360) + (ax1 * 51840)) + (ax2 * 25920)) + (ax3 * 12960)) + (ax4 * 1440)) + (ax5 * 144)) + (ax6 * 36)) + (ax7 * 18)) + (ax8 * 9)) + ax9)] = (tarray[(((((ax0 * 144) + (ax1 * 36)) + (ax2 * 18)) + (ax3 * 9)) + ax4)] * tarray[(((((ax5 * 144) + (ax6 * 36)) + (ax7 * 18)) + (ax8 * 9)) + ax9)]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = coshf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = coshf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __cosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = cosf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = acosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = acosf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = asinf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = asinhf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = atanf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = atanhf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ceilf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = ceilf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.000000e+02f), 0.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            float v_ = tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)];\n            float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = erff(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = erff(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = expf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_fast_erf[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            float v_ = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n            T_fast_erf[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n      int v_ = ((int)(floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n              float v_ = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n              float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n              int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            float v__3 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n            float v__5 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n            float v__7 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n            float v__9 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n            float v__11 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n            float v__13 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n            float v__15 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n            float v__17 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n            float v__19 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n            float v__21 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n            float v__23 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n            float v__25 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n            float v__27 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n            float v__29 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n            float v__31 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n            float v__33 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n            float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n            float v__36 = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            T_fast_exp[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            float v_ = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            T_minimum[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n          }\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 6; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 8; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 10; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 10; ++ax3_1) {\n          for (int32_t ax4_1 = 0; ax4_1 < 3; ++ax4_1) {\n            float v__1 = T_minimum[(((((ax0_1 * 2400) + (ax1_1 * 300)) + (ax2_1 * 30)) + (ax3_1 * 3)) + ax4_1)];\n            T_minimum[(((((ax0_1 * 2400) + (ax1_1 * 300)) + (ax2_1 * 30)) + (ax3_1 * 3)) + ax4_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n          }\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 6; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 8; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 10; ++ax2_2) {\n        for (int32_t ax3_2 = 0; ax3_2 < 10; ++ax3_2) {\n          for (int32_t ax4_2 = 0; ax4_2 < 3; ++ax4_2) {\n            T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] = ((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)] * T_minimum[(((((ax0_2 * 2400) + (ax1_2 * 300)) + (ax2_2 * 30)) + (ax3_2 * 3)) + ax4_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((int)(((((2 != 0) ? (((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) << ((int64_t)2)) : ((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]) << ((int64_t)2)) : ((int64_t)tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[(((((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 2400) + 12000) - ((((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) / 75) * 2400))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_reverse_sequence[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = tarray[((((((ax1 * 300) + (ax2 * 30)) + (ax3 * 3)) + ax4) + 12000) - (ax0 * 2400))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = floorf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_full_like[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 1.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_full_like[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = 1.000000e+00f;\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = ((int8_t)(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] != tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __logf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = logf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log10f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = log10f(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log2f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = log2f(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    for (int k1 = 0; k1 < 8; ++k1) {\n      for (int k2 = 0; k2 < 10; ++k2) {\n        for (int k3 = 0; k3 < 10; ++k3) {\n          for (int k4 = 0; k4 < 3; ++k4) {\n            tarray_red[0] = max(tarray_red[0], tarray[(((((k0 * 2400) + (k1 * 300)) + (k2 * 30)) + (k3 * 3)) + k4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    for (int32_t k1 = 0; k1 < 8; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        for (int32_t k3 = 0; k3 < 10; ++k3) {\n          for (int32_t k4 = 0; k4 < 3; ++k4) {\n            float v_ = tarray_red[0];\n            float v__1 = tarray[(((((k0 * 2400) + (k1 * 300)) + (k2 * 30)) + (k3 * 3)) + k4)];\n            tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 6; ++k0) {\n    for (int k1 = 0; k1 < 8; ++k1) {\n      for (int k2 = 0; k2 < 10; ++k2) {\n        for (int k3 = 0; k3 < 10; ++k3) {\n          for (int k4 = 0; k4 < 3; ++k4) {\n            tarray_red[0] = min(tarray_red[0], tarray[(((((k0 * 2400) + (k1 * 300)) + (k2 * 30)) + (k3 * 3)) + k4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 6; ++k0) {\n    for (int32_t k1 = 0; k1 < 8; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        for (int32_t k3 = 0; k3 < 10; ++k3) {\n          for (int32_t k4 = 0; k4 < 3; ++k4) {\n            float v_ = tarray_red[0];\n            float v__1 = tarray[(((((k0 * 2400) + (k1 * 300)) + (k2 * 30)) + (k3 * 3)) + k4)];\n            tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * -1.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = (tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] * -1.000000e+00f);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  if (((((int)((int64_t)((int)blockIdx.x))) * 32) + (((int)((int64_t)((int)threadIdx.x))) >> 5)) < 75) {\n    if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)75) {\n      tarray_red[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 1.000000e+00f;\n    }\n  }\n  for (int k0 = 0; k0 < 6; ++k0) {\n    if (((((int)((int64_t)((int)blockIdx.x))) * 32) + (((int)((int64_t)((int)threadIdx.x))) >> 5)) < 75) {\n      if (((((int64_t)((int)blockIdx.x)) * (int64_t)32) + (((int64_t)((int)threadIdx.x)) >> (int64_t)5)) < (int64_t)75) {\n        tarray_red[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray_red[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * tarray[(((k0 * 2400) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))]);\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[2400];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n          tarray_red[((((ax1 * 300) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = 1.000000e+00f;\n          for (int32_t k0 = 0; k0 < 6; ++k0) {\n            tarray_red[((((ax1 * 300) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = (tarray_red[((((ax1 * 300) + (ax2 * 30)) + (ax3 * 3)) + ax4)] * tarray[(((((k0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    tensor[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            tensor[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_repeat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_repeat[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = roundf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = roundf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = (1.000000e+00f / sqrtf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 4) ? (int64_t)3 : ((((int)threadIdx.x) == 3) ? (int64_t)10 : ((((int)threadIdx.x) == 2) ? (int64_t)10 : ((((int)threadIdx.x) == 1) ? (int64_t)8 : (int64_t)6)))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[5];\n  for (int32_t ax0 = 0; ax0 < 5; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 4) ? (int64_t)3 : ((ax0 == 3) ? (int64_t)10 : ((ax0 == 2) ? (int64_t)10 : ((ax0 == 1) ? (int64_t)8 : (int64_t)6)))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_sign[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? 1.000000e+00f : ((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_sign[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((0.000000e+00f < tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]) ? 1.000000e+00f : ((tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __sinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = sinf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = sinhf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = sqrtf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = tanf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = tanhf(tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)675) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 45) * 30) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90) / 9) * 3)) + ((((int)blockIdx.x) + ((int)threadIdx.x)) % 3))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[86400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 20; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 9; ++ax4) {\n            T_tile[(((((ax0 * 14400) + (ax1 * 1800)) + (ax2 * 180)) + (ax3 * 9)) + ax4)] = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + ((ax3 % 10) * 3)) + (ax4 % 3))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  if (((((int)((int64_t)((int)blockIdx.x))) * 16) + (((int)((int64_t)((int)threadIdx.x))) >> 6)) < 225) {\n    if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n      T_expand_dims[((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 225) * 14400) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[14400];\n  for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 10; ++ax4) {\n          for (int32_t ax5 = 0; ax5 < 3; ++ax5) {\n            T_expand_dims[(((((ax1 * 2400) + (ax2 * 300)) + (ax3 * 30)) + (ax4 * 3)) + ax5)] = tarray[(((((ax1 * 2400) + (ax2 * 300)) + (ax3 * 30)) + (ax4 * 3)) + ax5)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[14400];\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        for (int32_t i3 = 0; i3 < 10; ++i3) {\n          for (int32_t i4 = 0; i4 < 3; ++i4) {\n            compute[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)] = tarray[(((((i0 * 2400) + (i1 * 300)) + (i2 * 30)) + (i3 * 3)) + i4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[(((((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) / 15) * 240) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 30) / 3) * 24)) + (((((((((int)blockIdx.x) * 2) + (((int)threadIdx.x) >> 3)) % 3) * 8) + (((int)threadIdx.x) & 7)) / 3) * 3)) + ((((((((int)blockIdx.x) * 2) + (((int)threadIdx.x) >> 3)) % 3) * 2) + (((int)threadIdx.x) & 7)) % 3))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[14400];\n  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 6; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 8; ++ax4) {\n            T_reshape[(((((ax0 * 1440) + (ax1 * 240)) + (ax2 * 24)) + (ax3 * 8)) + ax4)] = tarray[(((((ax0 * 1440) + (ax1 * 240)) + (ax2 * 24)) + ((((ax3 * 8) + ax4) / 3) * 3)) + (((ax3 * 2) + ax4) % 3))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_divide[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = (tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] / tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] == tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_equal[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] == tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)8) + (((int64_t)((int)threadIdx.x)) >> (int64_t)7)) < (int64_t)225) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)225 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 14400)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[28800];\n  for (int32_t ax0 = 0; ax0 < 12; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_concat[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((6 <= ax0) ? tarray[((((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4) - 14400)] : tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_elemwise_sum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_elemwise_sum[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = (tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] + tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_floor_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_floor_divide[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = floorf((tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] / tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_floor_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - (floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_floor_mod[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = (tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] - (floorf((tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] / tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)])) * tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_greater[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_greater[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] < tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_greater_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_greater_equal[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] <= tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_less[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_less[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] < tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_less_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_less_equal[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] <= tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_maximum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            float v_ = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            T_maximum[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((v_) > (v_) ? (v_) : (v_));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_minimum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            float v_ = tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)];\n            T_minimum[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((v_) < (v_) ? (v_) : (v_));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = fmodf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_mod[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = fmodf(tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)], tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_multiply[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_multiply[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = (tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] * tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_not_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_not_equal[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] != tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_power[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = powf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_power[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = powf(tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)], tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)16) + (((int64_t)((int)threadIdx.x)) >> (int64_t)6)) < (int64_t)225) {\n    T_subtract[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[14400];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            T_subtract[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] = 0.000000e+00f;\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer < 792; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer) {\n    if (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 64) + (((int)blockIdx.x) >> 2)) < 50625) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 4096) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) >> 6)) / 225)] * tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 14400)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[207360000];\n  for (int32_t ax0 = 0; ax0 < 6; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 6; ++ax5) {\n              for (int32_t ax6 = 0; ax6 < 8; ++ax6) {\n                for (int32_t ax7 = 0; ax7 < 10; ++ax7) {\n                  for (int32_t ax8 = 0; ax8 < 10; ++ax8) {\n                    for (int32_t ax9 = 0; ax9 < 3; ++ax9) {\n                      T_tensordot[((((((((((ax0 * 34560000) + (ax1 * 4320000)) + (ax2 * 432000)) + (ax3 * 43200)) + (ax4 * 14400)) + (ax5 * 2400)) + (ax6 * 300)) + (ax7 * 30)) + (ax8 * 3)) + ax9)] = (tarray[(((((ax0 * 2400) + (ax1 * 300)) + (ax2 * 30)) + (ax3 * 3)) + ax4)] * tarray[(((((ax5 * 2400) + (ax6 * 300)) + (ax7 * 30)) + (ax8 * 3)) + ax9)]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = coshf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = coshf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __cosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = cosf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = acosf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = acosf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = asinf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = asinhf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = atanf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = atanhf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ceilf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = ceilf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.000000e+02f), 0.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            float v_ = tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)];\n            float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = erff(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = erff(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = expf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_fast_erf[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            float v_ = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n            T_fast_erf[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n      int v_ = ((int)(floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n              float v_ = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n              float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n              int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            float v__3 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n            float v__5 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n            float v__7 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n            float v__9 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n            float v__11 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n            float v__13 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n            float v__15 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n            float v__17 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n            float v__19 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n            float v__21 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n            float v__23 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n            float v__25 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n            float v__27 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n            float v__29 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n            float v__31 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n            float v__33 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n            float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n            float v__36 = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            T_fast_exp[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            float v_ = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            T_minimum[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n          }\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 7; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 8; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 3; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 3; ++ax3_1) {\n          for (int32_t ax4_1 = 0; ax4_1 < 5; ++ax4_1) {\n            float v__1 = T_minimum[(((((ax0_1 * 360) + (ax1_1 * 45)) + (ax2_1 * 15)) + (ax3_1 * 5)) + ax4_1)];\n            T_minimum[(((((ax0_1 * 360) + (ax1_1 * 45)) + (ax2_1 * 15)) + (ax3_1 * 5)) + ax4_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n          }\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 7; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 8; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 3; ++ax2_2) {\n        for (int32_t ax3_2 = 0; ax3_2 < 3; ++ax3_2) {\n          for (int32_t ax4_2 = 0; ax4_2 < 5; ++ax4_2) {\n            T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] = ((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * (((T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)] * T_minimum[(((((ax0_2 * 360) + (ax1_2 * 45)) + (ax2_2 * 15)) + (ax3_2 * 5)) + ax4_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((int)(((((2 != 0) ? (((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) << ((int64_t)2)) : ((int64_t)tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]) << ((int64_t)2)) : ((int64_t)tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[(((((((((((int)blockIdx.x) * 304) + ((int)threadIdx.x)) % 360) / 45) * 45) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 45) / 5) * 5)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 5)) + 2160) - ((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 45) * 360))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_reverse_sequence[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = tarray[((((((ax1 * 45) + (ax2 * 15)) + (ax3 * 5)) + ax4) + 2160) - (ax0 * 360))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = floorf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_full_like) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_full_like[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 1.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_full_like[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = 1.000000e+00f;\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = ((int8_t)(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] != tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __logf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = logf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log10f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = log10f(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log2f(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = log2f(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    for (int k1 = 0; k1 < 8; ++k1) {\n      for (int k2 = 0; k2 < 3; ++k2) {\n        for (int k3 = 0; k3 < 3; ++k3) {\n          for (int k4 = 0; k4 < 5; ++k4) {\n            tarray_red[0] = max(tarray_red[0], tarray[(((((k0 * 360) + (k1 * 45)) + (k2 * 15)) + (k3 * 5)) + k4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 7; ++k0) {\n    for (int32_t k1 = 0; k1 < 8; ++k1) {\n      for (int32_t k2 = 0; k2 < 3; ++k2) {\n        for (int32_t k3 = 0; k3 < 3; ++k3) {\n          for (int32_t k4 = 0; k4 < 5; ++k4) {\n            float v_ = tarray_red[0];\n            float v__1 = tarray[(((((k0 * 360) + (k1 * 45)) + (k2 * 15)) + (k3 * 5)) + k4)];\n            tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    for (int k1 = 0; k1 < 8; ++k1) {\n      for (int k2 = 0; k2 < 3; ++k2) {\n        for (int k3 = 0; k3 < 3; ++k3) {\n          for (int k4 = 0; k4 < 5; ++k4) {\n            tarray_red[0] = min(tarray_red[0], tarray[(((((k0 * 360) + (k1 * 45)) + (k2 * 15)) + (k3 * 5)) + k4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 7; ++k0) {\n    for (int32_t k1 = 0; k1 < 8; ++k1) {\n      for (int32_t k2 = 0; k2 < 3; ++k2) {\n        for (int32_t k3 = 0; k3 < 3; ++k3) {\n          for (int32_t k4 = 0; k4 < 5; ++k4) {\n            float v_ = tarray_red[0];\n            float v__1 = tarray[(((((k0 * 360) + (k1 * 45)) + (k2 * 15)) + (k3 * 5)) + k4)];\n            tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * -1.000000e+00f);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = (tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] * -1.000000e+00f);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(360) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(360) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 7; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 360) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[360];\n  for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n          tarray_red[((((ax1 * 45) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = 1.000000e+00f;\n          for (int32_t k0 = 0; k0 < 7; ++k0) {\n            tarray_red[((((ax1 * 45) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = (tarray_red[((((ax1 * 45) + (ax2 * 15)) + (ax3 * 5)) + ax4)] * tarray[(((((k0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    tensor[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            tensor[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_repeat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_repeat[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = roundf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = roundf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = (1.000000e+00f / sqrtf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 4) ? (int64_t)5 : ((((int)threadIdx.x) == 3) ? (int64_t)3 : ((((int)threadIdx.x) == 2) ? (int64_t)3 : ((((int)threadIdx.x) == 1) ? (int64_t)8 : (int64_t)7)))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[5];\n  for (int32_t ax0 = 0; ax0 < 5; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 4) ? (int64_t)5 : ((ax0 == 3) ? (int64_t)3 : ((ax0 == 2) ? (int64_t)3 : ((ax0 == 1) ? (int64_t)8 : (int64_t)7)))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_sign[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? 1.000000e+00f : ((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_sign[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((0.000000e+00f < tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]) ? 1.000000e+00f : ((tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __sinf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = sinf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sinhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = sinhf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sqrtf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = sqrtf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = tanf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanhf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = tanhf(tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)64) + (((int64_t)((int)threadIdx.x)) >> (int64_t)4)) < (int64_t)945) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 45) * 15) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 45) / 15) * 5)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 5))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[15120];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 6; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 15; ++ax4) {\n            T_tile[(((((ax0 * 2160) + (ax1 * 270)) + (ax2 * 90)) + (ax3 * 15)) + ax4)] = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + ((ax3 % 3) * 5)) + (ax4 % 5))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  if (((((int)((int64_t)((int)blockIdx.x))) * 128) + (((int)((int64_t)((int)threadIdx.x))) >> 3)) < 315) {\n    if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n      T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[2520];\n  for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n        for (int32_t ax4 = 0; ax4 < 3; ++ax4) {\n          for (int32_t ax5 = 0; ax5 < 5; ++ax5) {\n            T_expand_dims[(((((ax1 * 360) + (ax2 * 45)) + (ax3 * 15)) + (ax4 * 5)) + ax5)] = tarray[(((((ax1 * 360) + (ax2 * 45)) + (ax3 * 15)) + (ax4 * 5)) + ax5)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[2520];\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        for (int32_t i3 = 0; i3 < 3; ++i3) {\n          for (int32_t i4 = 0; i4 < 5; ++i4) {\n            compute[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)] = tarray[(((((i0 * 360) + (i1 * 45)) + (i2 * 15)) + (i3 * 5)) + i4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 45) * 360) + (((((((int)blockIdx.x) * 38) + (((int)threadIdx.x) >> 3)) % 45) / 15) * 120)) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 15) / 5) * 40)) + (((((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 40) / 5) * 5)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 5))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 3; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 8; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_reshape[(((((ax0 * 360) + (ax1 * 120)) + (ax2 * 40)) + (ax3 * 5)) + ax4)] = tarray[(((((ax0 * 360) + (ax1 * 120)) + ((((ax2 * 8) + ax3) / 3) * 15)) + ((((ax2 * 2) + ax3) % 3) * 5)) + ax4)];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_divide[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = (tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] / tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] == tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_equal[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] == tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)64) + (((int64_t)((int)threadIdx.x)) >> (int64_t)4)) < (int64_t)315) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)315 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 2520)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[5040];\n  for (int32_t ax0 = 0; ax0 < 14; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_concat[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((7 <= ax0) ? tarray[((((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4) - 2520)] : tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_elemwise_sum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_elemwise_sum[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = (tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] + tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_floor_divide[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_floor_divide[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = floorf((tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] / tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_floor_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - (floorf((tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])) * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_floor_mod[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = (tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] - (floorf((tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] / tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)])) * tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_greater[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_greater[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] < tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_greater_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_greater_equal[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] <= tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_less[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] < tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_less[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] < tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_less_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] <= tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_less_equal[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] <= tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_maximum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            float v_ = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            T_maximum[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((v_) > (v_) ? (v_) : (v_));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_minimum[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            float v_ = tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)];\n            T_minimum[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((v_) < (v_) ? (v_) : (v_));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_mod[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = fmodf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_mod[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = fmodf(tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)], tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_multiply[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_multiply[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = (tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] * tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_not_equal[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((signed char)(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] != tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]));\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_not_equal[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = ((int8_t)(tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] != tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_power[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = powf(tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_power[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = powf(tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)], tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_subtract) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)315) {\n    T_subtract[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[2520];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            T_subtract[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] = 0.000000e+00f;\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer < 25; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer) {\n    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 4096) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) >> 6)) < 99225) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) / 315)] * tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 2520)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[6350400];\n  for (int32_t ax0 = 0; ax0 < 7; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 8; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 3; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n            for (int32_t ax5 = 0; ax5 < 7; ++ax5) {\n              for (int32_t ax6 = 0; ax6 < 8; ++ax6) {\n                for (int32_t ax7 = 0; ax7 < 3; ++ax7) {\n                  for (int32_t ax8 = 0; ax8 < 3; ++ax8) {\n                    for (int32_t ax9 = 0; ax9 < 5; ++ax9) {\n                      T_tensordot[((((((((((ax0 * 907200) + (ax1 * 113400)) + (ax2 * 37800)) + (ax3 * 12600)) + (ax4 * 2520)) + (ax5 * 360)) + (ax6 * 45)) + (ax7 * 15)) + (ax8 * 5)) + ax9)] = (tarray[(((((ax0 * 360) + (ax1 * 45)) + (ax2 * 15)) + (ax3 * 5)) + ax4)] * tarray[(((((ax5 * 360) + (ax6 * 45)) + (ax7 * 15)) + (ax8 * 5)) + ax9)]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = coshf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat coshf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = coshf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cosh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __cosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat cosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = cosf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "cos"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = acosf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat acosf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = acosf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "acos"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = asinf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asin"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = asinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat asinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = asinhf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "asinh"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = atanf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atan"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = atanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat atanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = atanhf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "atanh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ceilf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat ceilf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = ceilf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "ceil"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = max(min(tarray[((int)threadIdx.x)], 1.000000e+02f), 0.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          float v_ = tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)];\n          float v__1 = (v_) < (1.000000e+02f) ? (v_) : (1.000000e+02f);\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = ((v__1) > (0.000000e+00f) ? (v__1) : (0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "clip"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = erff(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat erff(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = erff(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "erf"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __expf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = expf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "exp"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_fast_erf, float* __restrict__ tarray) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(tarray[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_erf[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          float v_ = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__1 = (v_) < (4.000000e+00f) ? (v_) : (4.000000e+00f);\n          T_fast_erf[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * (((((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f)) * ((v__1) > (-4.000000e+00f) ? (v__1) : (-4.000000e+00f))) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_erf"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_fast_exp, float* __restrict__ tarray) {\n    int v_ = ((int)(floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_fast_exp[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(tarray[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_fast_exp[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n            float v_ = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n            float v__1 = (v_) < (8.837627e+01f) ? (v_) : (8.837627e+01f);\n            int32_t v__2 = ((int32_t)(floorf(((((v__1) > (-8.837626e+01f) ? (v__1) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          float v__3 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__4 = (v__3) < (8.837627e+01f) ? (v__3) : (8.837627e+01f);\n          float v__5 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n          float v__7 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n          float v__9 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n          float v__11 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n          float v__13 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n          float v__15 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n          float v__17 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n          float v__19 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n          float v__21 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n          float v__23 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n          float v__25 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n          float v__27 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n          float v__29 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n          float v__31 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n          float v__33 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n          float v__35 = (*(float *)(&(v__2))) * ((((((((((((((1.987569e-04f * (((v__4) > (-8.837626e+01f) ? (v__4) : (-8.837626e+01f)) - (floorf(((((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) - (floorf(((((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) - (floorf(((((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) - (floorf(((((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) - (floorf(((((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) - (floorf(((((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) - (floorf(((((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) - (floorf(((((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n          float v__36 = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          T_fast_exp[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((v__35) > (v__36) ? (v__35) : (v__36));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_exp"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_fast_tanh, float* __restrict__ tarray) {\n  T_fast_tanh[((int)threadIdx.x)] = ((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)])) * max(-9.000000e+00f, min(9.000000e+00f, tarray[((int)threadIdx.x)]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          float v_ = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          T_minimum[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((9.000000e+00f) < (v_) ? (9.000000e+00f) : (v_));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 10; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 7; ++ax2_1) {\n        for (int32_t ax4_1 = 0; ax4_1 < 7; ++ax4_1) {\n          float v__1 = T_minimum[((((ax0_1 * 490) + (ax1_1 * 49)) + (ax2_1 * 7)) + ax4_1)];\n          T_minimum[((((ax0_1 * 490) + (ax1_1 * 49)) + (ax2_1 * 7)) + ax4_1)] = ((-9.000000e+00f) > (v__1) ? (-9.000000e+00f) : (v__1));\n        }\n      }\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 2; ++ax0_2) {\n    for (int32_t ax1_2 = 0; ax1_2 < 10; ++ax1_2) {\n      for (int32_t ax2_2 = 0; ax2_2 < 7; ++ax2_2) {\n        for (int32_t ax4_2 = 0; ax4_2 < 7; ++ax4_2) {\n          T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] = ((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * (((T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)] * T_minimum[((((ax0_2 * 490) + (ax1_2 * 49)) + (ax2_2 * 7)) + ax4_2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fast_tanh"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(int* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((int)(((((2 != 0) ? (((int64_t)tarray[((int)threadIdx.x)]) << ((int64_t)2)) : ((int64_t)tarray[((int)threadIdx.x)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int32_t compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = ((int32_t)(((((2 != 0) ? (((int64_t)tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]) << ((int64_t)2)) : ((int64_t)tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)])) * (int64_t)2) + ((int64_t)1 << ((int64_t)((0 + 31) - 1)))) >> ((int64_t)(0 + 31))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "fixed_point_multiply"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ tarray) {\n  T_reverse_sequence[((int)threadIdx.x)] = tarray[(((((int)threadIdx.x) % 490) + 490) - ((((int)threadIdx.x) / 490) * 490))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reverse_sequence[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_reverse_sequence[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = tarray[(((((ax1 * 49) + (ax2 * 7)) + ax4) + 490) - (ax0 * 490))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "flip"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = floorf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = floorf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_full_like);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_full_like) {\n  T_full_like[((int)threadIdx.x)] = 1.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_full_like[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_full_like[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = 1.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "full_like"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = ((int8_t)(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] != tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "isnan"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __logf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat logf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = logf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log10f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log10f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = log10f(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log10"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __log2f(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat log2f(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = log2f(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "log2"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = -3.402823e+38f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    for (int k1 = 0; k1 < 10; ++k1) {\n      for (int k2 = 0; k2 < 7; ++k2) {\n        for (int k4 = 0; k4 < 7; ++k4) {\n          tarray_red[0] = max(tarray_red[0], tarray[((((k0 * 490) + (k1 * 49)) + (k2 * 7)) + k4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = -3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    for (int32_t k1 = 0; k1 < 10; ++k1) {\n      for (int32_t k2 = 0; k2 < 7; ++k2) {\n        for (int32_t k4 = 0; k4 < 7; ++k4) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 490) + (k1 * 49)) + (k2 * 7)) + k4)];\n          tarray_red[0] = ((v_) > (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "max"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[0] = 3.402823e+38f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    for (int k1 = 0; k1 < 10; ++k1) {\n      for (int k2 = 0; k2 < 7; ++k2) {\n        for (int k4 = 0; k4 < 7; ++k4) {\n          tarray_red[0] = min(tarray_red[0], tarray[((((k0 * 490) + (k1 * 49)) + (k2 * 7)) + k4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[1];\n  tarray_red[0] = 3.402823e+38f;\n  for (int32_t k0 = 0; k0 < 2; ++k0) {\n    for (int32_t k1 = 0; k1 < 10; ++k1) {\n      for (int32_t k2 = 0; k2 < 7; ++k2) {\n        for (int32_t k4 = 0; k4 < 7; ++k4) {\n          float v_ = tarray_red[0];\n          float v__1 = tarray[((((k0 * 490) + (k1 * 49)) + (k2 * 7)) + k4)];\n          tarray_red[0] = ((v_) < (v__1) ? (v_) : (v__1));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "min"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * -1.000000e+00f);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = (tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] * -1.000000e+00f);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "negative"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(490) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red);\nextern \"C\" __global__ void __launch_bounds__(490) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tarray_red) {\n  tarray_red[((int)threadIdx.x)] = 1.000000e+00f;\n  for (int k0 = 0; k0 < 2; ++k0) {\n    tarray_red[((int)threadIdx.x)] = (tarray_red[((int)threadIdx.x)] * tarray[((k0 * 490) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tarray_red[490];\n  for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n      for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n        tarray_red[(((ax1 * 49) + (ax2 * 7)) + ax4)] = 1.000000e+00f;\n        for (int32_t k0 = 0; k0 < 2; ++k0) {\n          tarray_red[(((ax1 * 49) + (ax2 * 7)) + ax4)] = (tarray_red[(((ax1 * 49) + (ax2 * 7)) + ax4)] * tarray[((((k0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "prod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ tarray, float* __restrict__ tensor) {\n  tensor[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float tensor[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          tensor[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reinterpret"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_repeat, float* __restrict__ tarray) {\n  T_repeat[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_repeat[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_repeat[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "repeat"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 64; ++ax1) {\n      T_reshape[((ax0 * 64) + ax1)] = tarray[((ax0 * 64) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_1"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[128];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n      T_reshape[((ax0 * 32) + ax1)] = tarray[((ax0 * 32) + ax1)];\n    }\n  }\n}\n\n",
    "op_name": "reshape_2"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = roundf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat roundf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = roundf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "round"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / sqrtf(tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = (1.000000e+00f / sqrtf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "rsqrt"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int* __restrict__ T_shape) {\n  T_shape[((int)threadIdx.x)] = ((int)((((int)threadIdx.x) == 4) ? (int64_t)7 : ((((int)threadIdx.x) == 3) ? (int64_t)1 : ((((int)threadIdx.x) == 2) ? (int64_t)7 : ((((int)threadIdx.x) == 1) ? (int64_t)10 : (int64_t)2)))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int32_t T_shape[5];\n  for (int32_t ax0 = 0; ax0 < 5; ++ax0) {\n    T_shape[ax0] = ((int32_t)((ax0 == 4) ? (int64_t)7 : ((ax0 == 3) ? (int64_t)1 : ((ax0 == 2) ? (int64_t)7 : ((ax0 == 1) ? (int64_t)10 : (int64_t)2)))));\n  }\n}\n\n",
    "op_name": "shape"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - tarray[((int)threadIdx.x)]))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]))));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sigmoid"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_sign, float* __restrict__ tarray) {\n  T_sign[((int)threadIdx.x)] = ((0.000000e+00f < tarray[((int)threadIdx.x)]) ? 1.000000e+00f : ((tarray[((int)threadIdx.x)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_sign[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_sign[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((0.000000e+00f < tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]) ? 1.000000e+00f : ((tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] < 0.000000e+00f) ? -1.000000e+00f : 0.000000e+00f));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sign"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = __sinf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = sinf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sin"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sinhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sinhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = sinhf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sinh"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = sqrtf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat sqrtf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = sqrtf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "sqrt"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = tanf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tan"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tanhf(tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat tanhf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = tanhf(tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tanh"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tile, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)735) {\n    T_tile[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tarray[(((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 21) * 7) + (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 7))];\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tile[5880];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax3 = 0; ax3 < 2; ++ax3) {\n          for (int32_t ax4 = 0; ax4 < 21; ++ax4) {\n            T_tile[(((((ax0 * 2940) + (ax1 * 294)) + (ax2 * 42)) + (ax3 * 21)) + ax4)] = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + (ax4 % 7))];\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tile"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_expand_dims, float* __restrict__ tarray) {\n  T_expand_dims[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_expand_dims[980];\n  for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n        for (int32_t ax5 = 0; ax5 < 7; ++ax5) {\n          T_expand_dims[((((ax1 * 490) + (ax2 * 49)) + (ax3 * 7)) + ax5)] = tarray[((((ax1 * 490) + (ax2 * 49)) + (ax3 * 7)) + ax5)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "expand_dims"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ compute, float* __restrict__ tarray) {\n  compute[((int)threadIdx.x)] = tarray[((int)threadIdx.x)];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float compute[980];\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        for (int32_t i4 = 0; i4 < 7; ++i4) {\n          compute[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)] = tarray[((((i0 * 490) + (i1 * 49)) + (i2 * 7)) + i4)];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "identity"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ tarray) {\n  T_reshape[((int)threadIdx.x)] = tarray[((((((int)threadIdx.x) / 49) * 49) + ((((((((int)threadIdx.x) % 490) / 70) * 3) + ((((int)threadIdx.x) % 70) / 7)) % 7) * 7)) + (((int)threadIdx.x) % 7))];\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_reshape[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 7; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 10; ++ax4) {\n          T_reshape[((((ax0 * 490) + (ax1 * 70)) + (ax2 * 10)) + ax4)] = tarray[((((ax0 * 490) + (ax1 * 70)) + ((((ax2 * 10) + ax4) / 7) * 7)) + (((ax2 * 3) + ax4) % 7))];\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "reshape"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_ones) {\n  const_vector_np_ones[((int)threadIdx.x)] = 1.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_ones[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_ones[i] = 1.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_ones"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(double* __restrict__ const_vector_np_zeros) {\n  const_vector_np_zeros[((int)threadIdx.x)] = 0.000000e+00;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  double const_vector_np_zeros[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_zeros[i] = 0.000000e+00;\n  }\n}\n\n",
    "op_name": "const_vector_np_zeros"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full);\nextern \"C\" __global__ void __launch_bounds__(128) default_function_kernel(int64_t* __restrict__ const_vector_np_full) {\n  const_vector_np_full[((int)threadIdx.x)] = (int64_t)7;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_full[128];\n  for (int32_t i = 0; i < 128; ++i) {\n    const_vector_np_full[i] = (int64_t)7;\n  }\n}\n\n",
    "op_name": "const_vector_np_full"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange);\nextern \"C\" __global__ void __launch_bounds__(5) default_function_kernel(int64_t* __restrict__ const_vector_np_arange) {\n  const_vector_np_arange[((int)threadIdx.x)] = ((((int)threadIdx.x) == 4) ? (int64_t)8 : ((((int)threadIdx.x) == 3) ? (int64_t)6 : ((((int)threadIdx.x) == 2) ? (int64_t)4 : ((((int)threadIdx.x) == 1) ? (int64_t)2 : (int64_t)0))));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  int64_t const_vector_np_arange[5];\n  for (int32_t i = 0; i < 5; ++i) {\n    const_vector_np_arange[i] = ((i == 4) ? (int64_t)8 : ((i == 3) ? (int64_t)6 : ((i == 2) ? (int64_t)4 : ((i == 1) ? (int64_t)2 : (int64_t)0))));\n  }\n}\n\n",
    "op_name": "const_vector_np_arange"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ tarray) {\n  T_divide[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_divide[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_divide[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = (tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] / tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "divide"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_equal, float* __restrict__ tarray) {\n  T_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] == tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_equal[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_equal[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] == tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "equal"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ tarray) {\n  if (((((int64_t)((int)blockIdx.x)) * (int64_t)128) + (((int64_t)((int)threadIdx.x)) >> (int64_t)3)) < (int64_t)245) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (((int64_t)245 <= ((((int64_t)((int)blockIdx.x)) * (int64_t)256) + (((int64_t)((int)threadIdx.x)) >> (int64_t)2))) ? tarray[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 980)] : tarray[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_concat[1960];\n  for (int32_t ax0 = 0; ax0 < 4; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_concat[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((2 <= ax0) ? tarray[(((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4) - 980)] : tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "concatenate"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_elemwise_sum, float* __restrict__ tarray) {\n  T_elemwise_sum[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] + tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_elemwise_sum[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_elemwise_sum[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = (tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] + tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "elemwise_sum"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_floor_divide, float* __restrict__ tarray) {\n  T_floor_divide[((int)threadIdx.x)] = floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_divide[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_floor_divide[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = floorf((tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] / tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_divide"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_floor_mod, float* __restrict__ tarray) {\n  T_floor_mod[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] - (floorf((tarray[((int)threadIdx.x)] / tarray[((int)threadIdx.x)])) * tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_floor_mod[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_floor_mod[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = (tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] - (floorf((tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] / tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)])) * tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "floor_mod"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_greater, float* __restrict__ tarray) {\n  T_greater[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_greater[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] < tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_greater_equal, float* __restrict__ tarray) {\n  T_greater_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_greater_equal[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_greater_equal[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] <= tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "greater_equal"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_less, float* __restrict__ tarray) {\n  T_less[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] < tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_less[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] < tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "left_shift"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_less_equal, float* __restrict__ tarray) {\n  T_less_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] <= tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_less_equal[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_less_equal[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] <= tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "less_equal"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_maximum, float* __restrict__ tarray) {\n  T_maximum[((int)threadIdx.x)] = max(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_maximum[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          float v_ = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          T_maximum[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((v_) > (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "maximum"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_minimum, float* __restrict__ tarray) {\n  T_minimum[((int)threadIdx.x)] = min(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_minimum[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          float v_ = tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)];\n          T_minimum[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((v_) < (v_) ? (v_) : (v_));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "minimum"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ tarray) {\n  T_mod[((int)threadIdx.x)] = fmodf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_mod[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_mod[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = fmodf(tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)], tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "mod"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ tarray) {\n  T_multiply[((int)threadIdx.x)] = (tarray[((int)threadIdx.x)] * tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_multiply[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_multiply[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = (tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] * tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "multiply"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(signed char* __restrict__ T_not_equal, float* __restrict__ tarray) {\n  T_not_equal[((int)threadIdx.x)] = ((signed char)(tarray[((int)threadIdx.x)] != tarray[((int)threadIdx.x)]));\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  int8_t T_not_equal[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_not_equal[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = ((int8_t)(tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] != tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]));\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "not_equal"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_power, float* __restrict__ tarray) {\n  T_power[((int)threadIdx.x)] = powf(tarray[((int)threadIdx.x)], tarray[((int)threadIdx.x)]);\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nfloat powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_power[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_power[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = powf(tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)], tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)]);\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "power"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_subtract);\nextern \"C\" __global__ void __launch_bounds__(980) default_function_kernel(float* __restrict__ T_subtract) {\n  T_subtract[((int)threadIdx.x)] = 0.000000e+00f;\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel();\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel() {\n  float T_subtract[980];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          T_subtract[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] = 0.000000e+00f;\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "stack"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.",
    "input": "\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray);\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_tensordot, float* __restrict__ tarray) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer) {\n    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 16384) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.x) >> 4)) < 60025) {\n      T_tensordot[(((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + (((int)threadIdx.x) >> 2)) / 245)] * tarray[((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_ax5_fused_ax6_fused_ax7_fused_ax8_fused_ax9_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 980)]);\n    }\n  }\n}\n\n",
    "output": "#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nvoid default_function_kernel(float* tarray) {\n  float T_tensordot[960400];\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 10; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n        for (int32_t ax4 = 0; ax4 < 7; ++ax4) {\n          for (int32_t ax5 = 0; ax5 < 2; ++ax5) {\n            for (int32_t ax6 = 0; ax6 < 10; ++ax6) {\n              for (int32_t ax7 = 0; ax7 < 7; ++ax7) {\n                for (int32_t ax9 = 0; ax9 < 7; ++ax9) {\n                  T_tensordot[((((((((ax0 * 480200) + (ax1 * 48020)) + (ax2 * 6860)) + (ax4 * 980)) + (ax5 * 490)) + (ax6 * 49)) + (ax7 * 7)) + ax9)] = (tarray[((((ax0 * 490) + (ax1 * 49)) + (ax2 * 7)) + ax4)] * tarray[((((ax5 * 490) + (ax6 * 49)) + (ax7 * 7)) + ax9)]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
    "op_name": "tensordot"
  }
]