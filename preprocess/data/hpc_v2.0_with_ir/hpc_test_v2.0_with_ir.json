[
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((5, 2, 28, 8, 20), \"float32\"), Scale: T.Buffer((2, 20), \"float32\"), Shift: T.Buffer((2, 20), \"float32\"), ScaleShift: T.Buffer((5, 2, 28, 8, 20), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused_j_outer_inner_fused in T.parallel(560):\n            for j_inner, cb_inner in T.grid(4, 20):\n                cse_var_2: T.int32 = b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused_j_outer_inner_fused % 112 // 56 * 20 + cb_inner\n                cse_var_1: T.int32 = b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused_j_outer_inner_fused * 80 + j_inner * 20 + cb_inner\n                ScaleShift_1 = T.Buffer((44800,), data=ScaleShift.data)\n                data_1 = T.Buffer((44800,), data=data.data)\n                Scale_1 = T.Buffer((40,), data=Scale.data)\n                Shift_1 = T.Buffer((40,), data=Shift.data)\n                ScaleShift_1[cse_var_1] = data_1[cse_var_1] * Scale_1[cse_var_2] + Shift_1[cse_var_2]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ Scale, float* __restrict__ ScaleShift, float* __restrict__ Shift, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ Scale, float* __restrict__ ScaleShift, float* __restrict__ Shift, float* __restrict__ data) {\n  ScaleShift[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = ((data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] * Scale[((((((int)blockIdx.x) % 140) / 70) * 20) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 20))]) + Shift[((((((int)blockIdx.x) % 140) / 70) * 20) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 20))]);\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t Scale_code = arg_type_ids[1];\n  int32_t Shift_code = arg_type_ids[2];\n  int32_t ScaleShift_code = arg_type_ids[3];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* Scale = (((TVMValue*)args)[1].v_handle);\n  void* Shift = (((TVMValue*)args)[2].v_handle);\n  void* ScaleShift = (((TVMValue*)args)[3].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* Scale_1 = (((DLTensor*)Scale)[0].data);\n  void* default_function_Scale_shape = (((DLTensor*)Scale)[0].shape);\n  void* default_function_Scale_strides = (((DLTensor*)Scale)[0].strides);\n  void* Shift_1 = (((DLTensor*)Shift)[0].data);\n  void* default_function_Shift_shape = (((DLTensor*)Shift)[0].shape);\n  void* default_function_Shift_strides = (((DLTensor*)Shift)[0].strides);\n  void* ScaleShift_1 = (((DLTensor*)ScaleShift)[0].data);\n  void* default_function_ScaleShift_shape = (((DLTensor*)ScaleShift)[0].shape);\n  void* default_function_ScaleShift_strides = (((DLTensor*)ScaleShift)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_Scale_strides == NULL)) {\n  }\n  if (!(default_function_Shift_strides == NULL)) {\n  }\n  if (!(default_function_ScaleShift_strides == NULL)) {\n  }\n  for (int32_t b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused_j_outer_inner_fused = 0; b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused_j_outer_inner_fused < 560; ++b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused_j_outer_inner_fused) {\n    for (int32_t j_inner = 0; j_inner < 4; ++j_inner) {\n      for (int32_t cb_inner = 0; cb_inner < 20; ++cb_inner) {\n        int32_t cse_var_2 = ((((b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused_j_outer_inner_fused % 112) / 56) * 20) + cb_inner);\n        int32_t cse_var_1 = (((b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused_j_outer_inner_fused * 80) + (j_inner * 20)) + cb_inner);\n        ((float*)ScaleShift_1)[cse_var_1] = ((((float*)data_1)[cse_var_1] * ((float*)Scale_1)[cse_var_2]) + ((float*)Shift_1)[cse_var_2]);\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "scale_shift_nchwc[5__20__28__8]"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((7, 4, 20, 20), \"float32\"), compute: T.Buffer((7, 1600), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i in T.parallel(7):\n            for j in range(1600):\n                cse_var_1: T.int32 = i * 1600 + j\n                compute_1 = T.Buffer((11200,), data=compute.data)\n                data_1 = T.Buffer((11200,), data=data.data)\n                compute_1[cse_var_1] = data_1[cse_var_1]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(25) default_function_kernel(float* __restrict__ compute, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(25) default_function_kernel(float* __restrict__ compute, float* __restrict__ data) {\n  compute[((((int)blockIdx.x) * 25) + ((int)threadIdx.x))] = data[((((int)blockIdx.x) * 25) + ((int)threadIdx.x))];\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t compute_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* compute = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* compute_1 = (((DLTensor*)compute)[0].data);\n  void* default_function_compute_shape = (((DLTensor*)compute)[0].shape);\n  void* default_function_compute_strides = (((DLTensor*)compute)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_compute_strides == NULL)) {\n  }\n  for (int32_t i = 0; i < 7; ++i) {\n    for (int32_t j = 0; j < 1600; ++j) {\n      int32_t cse_var_1 = ((i * 1600) + j);\n      ((float*)compute_1)[cse_var_1] = ((float*)data_1)[cse_var_1];\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "flatten[7__4__20__20]"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((24, 12), \"float32\"), MirrorPadInput: T.Buffer((27, 15), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(405):\n            cse_var_2: T.int32 = i0_i1_fused // 15\n            cse_var_1: T.int32 = i0_i1_fused % 15\n            MirrorPadInput_1 = T.Buffer((405,), data=MirrorPadInput.data)\n            data_1 = T.Buffer((288,), data=data.data)\n            MirrorPadInput_1[i0_i1_fused] = data_1[T.if_then_else(375 <= i0_i1_fused, 48 - cse_var_2, T.if_then_else(i0_i1_fused < 15, 0, cse_var_2 - 1)) * 12 + T.if_then_else(cse_var_1 == 14, 11, T.if_then_else(cse_var_1 < 2, 1 - cse_var_1, cse_var_1 - 2))]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ MirrorPadInput, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ MirrorPadInput, float* __restrict__ data) {\n  if (((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) < 405) {\n    MirrorPadInput[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = data[((((375 <= ((((int)blockIdx.x) * 64) + ((int)threadIdx.x))) ? (48 - (((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) / 15)) : ((((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) < 15) ? 0 : ((((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) / 15) - 1))) * 12) + (((((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 15) == 14) ? (25 - (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 15)) : (((((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 15) < 2) ? (1 - (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 15)) : ((((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 15) - 2))))];\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t MirrorPadInput_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* MirrorPadInput = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* MirrorPadInput_1 = (((DLTensor*)MirrorPadInput)[0].data);\n  void* default_function_MirrorPadInput_shape = (((DLTensor*)MirrorPadInput)[0].shape);\n  void* default_function_MirrorPadInput_strides = (((DLTensor*)MirrorPadInput)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_MirrorPadInput_strides == NULL)) {\n  }\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 405; ++i0_i1_fused) {\n    int32_t cse_var_2 = (i0_i1_fused / 15);\n    int32_t cse_var_1 = (i0_i1_fused % 15);\n    ((float*)MirrorPadInput_1)[i0_i1_fused] = ((float*)data_1)[((((375 <= i0_i1_fused) ? (48 - cse_var_2) : ((i0_i1_fused < 15) ? 0 : (cse_var_2 - 1))) * 12) + ((cse_var_1 == 14) ? 11 : ((cse_var_1 < 2) ? (1 - cse_var_1) : (cse_var_1 - 2))))];\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "mirror_pad[4__4__24__12]"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((8, 16, 7, 8), \"float32\"), kernel: T.Buffer((68, 16, 3, 3), \"float32\"), conv2d_nchw: T.Buffer((8, 68, 3, 3), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused in T.parallel(12):\n            conv2d_nchw_local = T.allocate([136], \"float32x3\", \"local\")\n            pad_temp = T.allocate([432], \"float32\", \"global\")\n            conv2d_nchw_local_1 = T.Buffer((136,), \"float32x3\", data=conv2d_nchw_local, scope=\"local\")\n            for ff_c_outer_inner_init in range(17):\n                conv2d_nchw_local_1[ff_c_outer_inner_init] = T.Broadcast(T.float32(0), 3)\n                conv2d_nchw_local_1[ff_c_outer_inner_init + 17] = T.Broadcast(T.float32(0), 3)\n                conv2d_nchw_local_1[ff_c_outer_inner_init + 34] = T.Broadcast(T.float32(0), 3)\n                conv2d_nchw_local_1[ff_c_outer_inner_init + 51] = T.Broadcast(T.float32(0), 3)\n                conv2d_nchw_local_1[ff_c_outer_inner_init + 68] = T.Broadcast(T.float32(0), 3)\n                conv2d_nchw_local_1[ff_c_outer_inner_init + 85] = T.Broadcast(T.float32(0), 3)\n                conv2d_nchw_local_1[ff_c_outer_inner_init + 102] = T.Broadcast(T.float32(0), 3)\n                conv2d_nchw_local_1[ff_c_outer_inner_init + 119] = T.Broadcast(T.float32(0), 3)\n            for rc_outer in range(8):\n                pad_temp_1 = T.Buffer((432,), data=pad_temp)\n                for i0 in range(8):\n                    cse_var_5: T.int32 = nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused % 3\n                    cse_var_4: T.int32 = i0 * 54\n                    cse_var_3: T.bool = cse_var_5 < 2\n                    cse_var_2: T.bool = 1 <= cse_var_5\n                    cse_var_1: T.int32 = i0 * 896 + rc_outer * 112 + cse_var_5 * 24\n                    pad_temp_1[cse_var_4] = T.float32(0)\n                    data_1 = T.Buffer((7168,), data=data.data)\n                    pad_temp_1[cse_var_4 + 1] = T.if_then_else(cse_var_2, data_1[cse_var_1 - 8], T.float32(0))\n                    pad_temp_1[cse_var_4 + 2] = T.if_then_else(cse_var_2, data_1[cse_var_1 - 7], T.float32(0))\n                    pad_temp_1[cse_var_4 + 3] = T.if_then_else(cse_var_2, data_1[cse_var_1 - 6], T.float32(0))\n                    pad_temp_1[cse_var_4 + 4] = T.if_then_else(cse_var_2, data_1[cse_var_1 - 5], T.float32(0))\n                    pad_temp_1[cse_var_4 + 5] = T.if_then_else(cse_var_2, data_1[cse_var_1 - 4], T.float32(0))\n                    pad_temp_1[cse_var_4 + 6] = T.if_then_else(cse_var_2, data_1[cse_var_1 - 3], T.float32(0))\n                    pad_temp_1[cse_var_4 + 7] = T.if_then_else(cse_var_2, data_1[cse_var_1 - 2], T.float32(0))\n                    pad_temp_1[cse_var_4 + 8] = T.if_then_else(cse_var_2, data_1[cse_var_1 - 1], T.float32(0))\n                    pad_temp_1[cse_var_4 + 9] = T.float32(0)\n                    pad_temp_1[cse_var_4 + 10] = data_1[cse_var_1]\n                    pad_temp_1[cse_var_4 + 11] = data_1[cse_var_1 + 1]\n                    pad_temp_1[cse_var_4 + 12] = data_1[cse_var_1 + 2]\n                    pad_temp_1[cse_var_4 + 13] = data_1[cse_var_1 + 3]\n                    pad_temp_1[cse_var_4 + 14] = data_1[cse_var_1 + 4]\n                    pad_temp_1[cse_var_4 + 15] = data_1[cse_var_1 + 5]\n                    pad_temp_1[cse_var_4 + 16] = data_1[cse_var_1 + 6]\n                    pad_temp_1[cse_var_4 + 17] = data_1[cse_var_1 + 7]\n                    pad_temp_1[cse_var_4 + 18] = T.float32(0)\n                    pad_temp_1[cse_var_4 + 19] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 8], T.float32(0))\n                    pad_temp_1[cse_var_4 + 20] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 9], T.float32(0))\n                    pad_temp_1[cse_var_4 + 21] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 10], T.float32(0))\n                    pad_temp_1[cse_var_4 + 22] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 11], T.float32(0))\n                    pad_temp_1[cse_var_4 + 23] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 12], T.float32(0))\n                    pad_temp_1[cse_var_4 + 24] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 13], T.float32(0))\n                    pad_temp_1[cse_var_4 + 25] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 14], T.float32(0))\n                    pad_temp_1[cse_var_4 + 26] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 15], T.float32(0))\n                    pad_temp_1[cse_var_4 + 27] = T.float32(0)\n                    pad_temp_1[cse_var_4 + 28] = T.if_then_else(cse_var_2, data_1[cse_var_1 + 48], T.float32(0))\n                    pad_temp_1[cse_var_4 + 29] = T.if_then_else(cse_var_2, data_1[cse_var_1 + 49], T.float32(0))\n                    pad_temp_1[cse_var_4 + 30] = T.if_then_else(cse_var_2, data_1[cse_var_1 + 50], T.float32(0))\n                    pad_temp_1[cse_var_4 + 31] = T.if_then_else(cse_var_2, data_1[cse_var_1 + 51], T.float32(0))\n                    pad_temp_1[cse_var_4 + 32] = T.if_then_else(cse_var_2, data_1[cse_var_1 + 52], T.float32(0))\n                    pad_temp_1[cse_var_4 + 33] = T.if_then_else(cse_var_2, data_1[cse_var_1 + 53], T.float32(0))\n                    pad_temp_1[cse_var_4 + 34] = T.if_then_else(cse_var_2, data_1[cse_var_1 + 54], T.float32(0))\n                    pad_temp_1[cse_var_4 + 35] = T.if_then_else(cse_var_2, data_1[cse_var_1 + 55], T.float32(0))\n                    pad_temp_1[cse_var_4 + 36] = T.float32(0)\n                    pad_temp_1[cse_var_4 + 37] = data_1[cse_var_1 + 56]\n                    pad_temp_1[cse_var_4 + 38] = data_1[cse_var_1 + 57]\n                    pad_temp_1[cse_var_4 + 39] = data_1[cse_var_1 + 58]\n                    pad_temp_1[cse_var_4 + 40] = data_1[cse_var_1 + 59]\n                    pad_temp_1[cse_var_4 + 41] = data_1[cse_var_1 + 60]\n                    pad_temp_1[cse_var_4 + 42] = data_1[cse_var_1 + 61]\n                    pad_temp_1[cse_var_4 + 43] = data_1[cse_var_1 + 62]\n                    pad_temp_1[cse_var_4 + 44] = data_1[cse_var_1 + 63]\n                    pad_temp_1[cse_var_4 + 45] = T.float32(0)\n                    pad_temp_1[cse_var_4 + 46] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 64], T.float32(0))\n                    pad_temp_1[cse_var_4 + 47] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 65], T.float32(0))\n                    pad_temp_1[cse_var_4 + 48] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 66], T.float32(0))\n                    pad_temp_1[cse_var_4 + 49] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 67], T.float32(0))\n                    pad_temp_1[cse_var_4 + 50] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 68], T.float32(0))\n                    pad_temp_1[cse_var_4 + 51] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 69], T.float32(0))\n                    pad_temp_1[cse_var_4 + 52] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 70], T.float32(0))\n                    pad_temp_1[cse_var_4 + 53] = T.if_then_else(cse_var_3, data_1[cse_var_1 + 71], T.float32(0))\n                for rx_outer, ff_c_outer_inner in T.grid(3, 17):\n                    cse_var_18: T.int32 = ff_c_outer_inner + 85\n                    cse_var_17: T.int32 = ff_c_outer_inner + 68\n                    cse_var_16: T.int32 = ff_c_outer_inner + 51\n                    cse_var_15: T.int32 = ff_c_outer_inner + 34\n                    cse_var_14: T.int32 = ff_c_outer_inner + 17\n                    cse_var_13: T.int32 = ff_c_outer_inner + 119\n                    cse_var_12: T.int32 = ff_c_outer_inner + 102\n                    cse_var_11: T.int32 = nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused // 3 * 2448 + ff_c_outer_inner * 144 + rc_outer * 18 + rx_outer\n                    cse_var_10: T.int32 = cse_var_11 + 9\n                    cse_var_9: T.int32 = cse_var_11 + 6\n                    cse_var_8: T.int32 = cse_var_11 + 3\n                    cse_var_7: T.int32 = cse_var_11 + 15\n                    cse_var_6: T.int32 = cse_var_11 + 12\n                    kernel_1 = T.Buffer((9792,), data=kernel.data)\n                    conv2d_nchw_local_1[ff_c_outer_inner] = conv2d_nchw_local_1[ff_c_outer_inner] + pad_temp_1[rx_outer:rx_outer + 9:3] * T.Broadcast(kernel_1[cse_var_11], 3)\n                    conv2d_nchw_local_1[cse_var_14] = conv2d_nchw_local_1[cse_var_14] + pad_temp_1[rx_outer + 54:rx_outer + 54 + 9:3] * T.Broadcast(kernel_1[cse_var_11], 3)\n                    conv2d_nchw_local_1[cse_var_15] = conv2d_nchw_local_1[cse_var_15] + pad_temp_1[rx_outer + 108:rx_outer + 108 + 9:3] * T.Broadcast(kernel_1[cse_var_11], 3)\n                    conv2d_nchw_local_1[cse_var_16] = conv2d_nchw_local_1[cse_var_16] + pad_temp_1[rx_outer + 162:rx_outer + 162 + 9:3] * T.Broadcast(kernel_1[cse_var_11], 3)\n                    conv2d_nchw_local_1[cse_var_17] = conv2d_nchw_local_1[cse_var_17] + pad_temp_1[rx_outer + 216:rx_outer + 216 + 9:3] * T.Broadcast(kernel_1[cse_var_11], 3)\n                    conv2d_nchw_local_1[cse_var_18] = conv2d_nchw_local_1[cse_var_18] + pad_temp_1[rx_outer + 270:rx_outer + 270 + 9:3] * T.Broadcast(kernel_1[cse_var_11], 3)\n                    conv2d_nchw_local_1[cse_var_12] = conv2d_nchw_local_1[cse_var_12] + pad_temp_1[rx_outer + 324:rx_outer + 324 + 9:3] * T.Broadcast(kernel_1[cse_var_11], 3)\n                    conv2d_nchw_local_1[cse_var_13] = conv2d_nchw_local_1[cse_var_13] + pad_temp_1[rx_outer + 378:rx_outer + 378 + 9:3] * T.Broadcast(kernel_1[cse_var_11], 3)\n                    conv2d_nchw_local_1[ff_c_outer_inner] = conv2d_nchw_local_1[ff_c_outer_inner] + pad_temp_1[rx_outer + 9:rx_outer + 9 + 9:3] * T.Broadcast(kernel_1[cse_var_8], 3)\n                    conv2d_nchw_local_1[cse_var_14] = conv2d_nchw_local_1[cse_var_14] + pad_temp_1[rx_outer + 63:rx_outer + 63 + 9:3] * T.Broadcast(kernel_1[cse_var_8], 3)\n                    conv2d_nchw_local_1[cse_var_15] = conv2d_nchw_local_1[cse_var_15] + pad_temp_1[rx_outer + 117:rx_outer + 117 + 9:3] * T.Broadcast(kernel_1[cse_var_8], 3)\n                    conv2d_nchw_local_1[cse_var_16] = conv2d_nchw_local_1[cse_var_16] + pad_temp_1[rx_outer + 171:rx_outer + 171 + 9:3] * T.Broadcast(kernel_1[cse_var_8], 3)\n                    conv2d_nchw_local_1[cse_var_17] = conv2d_nchw_local_1[cse_var_17] + pad_temp_1[rx_outer + 225:rx_outer + 225 + 9:3] * T.Broadcast(kernel_1[cse_var_8], 3)\n                    conv2d_nchw_local_1[cse_var_18] = conv2d_nchw_local_1[cse_var_18] + pad_temp_1[rx_outer + 279:rx_outer + 279 + 9:3] * T.Broadcast(kernel_1[cse_var_8], 3)\n                    conv2d_nchw_local_1[cse_var_12] = conv2d_nchw_local_1[cse_var_12] + pad_temp_1[rx_outer + 333:rx_outer + 333 + 9:3] * T.Broadcast(kernel_1[cse_var_8], 3)\n                    conv2d_nchw_local_1[cse_var_13] = conv2d_nchw_local_1[cse_var_13] + pad_temp_1[rx_outer + 387:rx_outer + 387 + 9:3] * T.Broadcast(kernel_1[cse_var_8], 3)\n                    conv2d_nchw_local_1[ff_c_outer_inner] = conv2d_nchw_local_1[ff_c_outer_inner] + pad_temp_1[rx_outer + 18:rx_outer + 18 + 9:3] * T.Broadcast(kernel_1[cse_var_9], 3)\n                    conv2d_nchw_local_1[cse_var_14] = conv2d_nchw_local_1[cse_var_14] + pad_temp_1[rx_outer + 72:rx_outer + 72 + 9:3] * T.Broadcast(kernel_1[cse_var_9], 3)\n                    conv2d_nchw_local_1[cse_var_15] = conv2d_nchw_local_1[cse_var_15] + pad_temp_1[rx_outer + 126:rx_outer + 126 + 9:3] * T.Broadcast(kernel_1[cse_var_9], 3)\n                    conv2d_nchw_local_1[cse_var_16] = conv2d_nchw_local_1[cse_var_16] + pad_temp_1[rx_outer + 180:rx_outer + 180 + 9:3] * T.Broadcast(kernel_1[cse_var_9], 3)\n                    conv2d_nchw_local_1[cse_var_17] = conv2d_nchw_local_1[cse_var_17] + pad_temp_1[rx_outer + 234:rx_outer + 234 + 9:3] * T.Broadcast(kernel_1[cse_var_9], 3)\n                    conv2d_nchw_local_1[cse_var_18] = conv2d_nchw_local_1[cse_var_18] + pad_temp_1[rx_outer + 288:rx_outer + 288 + 9:3] * T.Broadcast(kernel_1[cse_var_9], 3)\n                    conv2d_nchw_local_1[cse_var_12] = conv2d_nchw_local_1[cse_var_12] + pad_temp_1[rx_outer + 342:rx_outer + 342 + 9:3] * T.Broadcast(kernel_1[cse_var_9], 3)\n                    conv2d_nchw_local_1[cse_var_13] = conv2d_nchw_local_1[cse_var_13] + pad_temp_1[rx_outer + 396:rx_outer + 396 + 9:3] * T.Broadcast(kernel_1[cse_var_9], 3)\n                    conv2d_nchw_local_1[ff_c_outer_inner] = conv2d_nchw_local_1[ff_c_outer_inner] + pad_temp_1[rx_outer + 27:rx_outer + 27 + 9:3] * T.Broadcast(kernel_1[cse_var_10], 3)\n                    conv2d_nchw_local_1[cse_var_14] = conv2d_nchw_local_1[cse_var_14] + pad_temp_1[rx_outer + 81:rx_outer + 81 + 9:3] * T.Broadcast(kernel_1[cse_var_10], 3)\n                    conv2d_nchw_local_1[cse_var_15] = conv2d_nchw_local_1[cse_var_15] + pad_temp_1[rx_outer + 135:rx_outer + 135 + 9:3] * T.Broadcast(kernel_1[cse_var_10], 3)\n                    conv2d_nchw_local_1[cse_var_16] = conv2d_nchw_local_1[cse_var_16] + pad_temp_1[rx_outer + 189:rx_outer + 189 + 9:3] * T.Broadcast(kernel_1[cse_var_10], 3)\n                    conv2d_nchw_local_1[cse_var_17] = conv2d_nchw_local_1[cse_var_17] + pad_temp_1[rx_outer + 243:rx_outer + 243 + 9:3] * T.Broadcast(kernel_1[cse_var_10], 3)\n                    conv2d_nchw_local_1[cse_var_18] = conv2d_nchw_local_1[cse_var_18] + pad_temp_1[rx_outer + 297:rx_outer + 297 + 9:3] * T.Broadcast(kernel_1[cse_var_10], 3)\n                    conv2d_nchw_local_1[cse_var_12] = conv2d_nchw_local_1[cse_var_12] + pad_temp_1[rx_outer + 351:rx_outer + 351 + 9:3] * T.Broadcast(kernel_1[cse_var_10], 3)\n                    conv2d_nchw_local_1[cse_var_13] = conv2d_nchw_local_1[cse_var_13] + pad_temp_1[rx_outer + 405:rx_outer + 405 + 9:3] * T.Broadcast(kernel_1[cse_var_10], 3)\n                    conv2d_nchw_local_1[ff_c_outer_inner] = conv2d_nchw_local_1[ff_c_outer_inner] + pad_temp_1[rx_outer + 36:rx_outer + 36 + 9:3] * T.Broadcast(kernel_1[cse_var_6], 3)\n                    conv2d_nchw_local_1[cse_var_14] = conv2d_nchw_local_1[cse_var_14] + pad_temp_1[rx_outer + 90:rx_outer + 90 + 9:3] * T.Broadcast(kernel_1[cse_var_6], 3)\n                    conv2d_nchw_local_1[cse_var_15] = conv2d_nchw_local_1[cse_var_15] + pad_temp_1[rx_outer + 144:rx_outer + 144 + 9:3] * T.Broadcast(kernel_1[cse_var_6], 3)\n                    conv2d_nchw_local_1[cse_var_16] = conv2d_nchw_local_1[cse_var_16] + pad_temp_1[rx_outer + 198:rx_outer + 198 + 9:3] * T.Broadcast(kernel_1[cse_var_6], 3)\n                    conv2d_nchw_local_1[cse_var_17] = conv2d_nchw_local_1[cse_var_17] + pad_temp_1[rx_outer + 252:rx_outer + 252 + 9:3] * T.Broadcast(kernel_1[cse_var_6], 3)\n                    conv2d_nchw_local_1[cse_var_18] = conv2d_nchw_local_1[cse_var_18] + pad_temp_1[rx_outer + 306:rx_outer + 306 + 9:3] * T.Broadcast(kernel_1[cse_var_6], 3)\n                    conv2d_nchw_local_1[cse_var_12] = conv2d_nchw_local_1[cse_var_12] + pad_temp_1[rx_outer + 360:rx_outer + 360 + 9:3] * T.Broadcast(kernel_1[cse_var_6], 3)\n                    conv2d_nchw_local_1[cse_var_13] = conv2d_nchw_local_1[cse_var_13] + pad_temp_1[rx_outer + 414:rx_outer + 414 + 9:3] * T.Broadcast(kernel_1[cse_var_6], 3)\n                    conv2d_nchw_local_1[ff_c_outer_inner] = conv2d_nchw_local_1[ff_c_outer_inner] + pad_temp_1[rx_outer + 45:rx_outer + 45 + 9:3] * T.Broadcast(kernel_1[cse_var_7], 3)\n                    conv2d_nchw_local_1[cse_var_14] = conv2d_nchw_local_1[cse_var_14] + pad_temp_1[rx_outer + 99:rx_outer + 99 + 9:3] * T.Broadcast(kernel_1[cse_var_7], 3)\n                    conv2d_nchw_local_1[cse_var_15] = conv2d_nchw_local_1[cse_var_15] + pad_temp_1[rx_outer + 153:rx_outer + 153 + 9:3] * T.Broadcast(kernel_1[cse_var_7], 3)\n                    conv2d_nchw_local_1[cse_var_16] = conv2d_nchw_local_1[cse_var_16] + pad_temp_1[rx_outer + 207:rx_outer + 207 + 9:3] * T.Broadcast(kernel_1[cse_var_7], 3)\n                    conv2d_nchw_local_1[cse_var_17] = conv2d_nchw_local_1[cse_var_17] + pad_temp_1[rx_outer + 261:rx_outer + 261 + 9:3] * T.Broadcast(kernel_1[cse_var_7], 3)\n                    conv2d_nchw_local_1[cse_var_18] = conv2d_nchw_local_1[cse_var_18] + pad_temp_1[rx_outer + 315:rx_outer + 315 + 9:3] * T.Broadcast(kernel_1[cse_var_7], 3)\n                    conv2d_nchw_local_1[cse_var_12] = conv2d_nchw_local_1[cse_var_12] + pad_temp_1[rx_outer + 369:rx_outer + 369 + 9:3] * T.Broadcast(kernel_1[cse_var_7], 3)\n                    conv2d_nchw_local_1[cse_var_13] = conv2d_nchw_local_1[cse_var_13] + pad_temp_1[rx_outer + 423:rx_outer + 423 + 9:3] * T.Broadcast(kernel_1[cse_var_7], 3)\n            for nn_inner, ff_inner in T.grid(8, 17):\n                conv2d_nchw_1 = T.Buffer((4896,), data=conv2d_nchw.data)\n                conv2d_nchw_1[nn_inner * 612 + nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused // 3 * 153 + ff_inner * 9 + nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused % 3 * 3:nn_inner * 612 + nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused // 3 * 153 + ff_inner * 9 + nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused % 3 * 3 + 3] = conv2d_nchw_local_1[nn_inner * 17 + ff_inner]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(34) default_function_kernel(float* __restrict__ conv2d_nchw, float* __restrict__ data, float* __restrict__ kernel);\nextern \"C\" __global__ void __launch_bounds__(34) default_function_kernel(float* __restrict__ conv2d_nchw, float* __restrict__ data, float* __restrict__ kernel) {\n  float conv2d_nchw_local[18];\n  __shared__ float pad_temp_shared[2592];\n  __shared__ float kernel_shared[4896];\n  conv2d_nchw_local[0] = 0.000000e+00f;\n  conv2d_nchw_local[3] = 0.000000e+00f;\n  conv2d_nchw_local[6] = 0.000000e+00f;\n  conv2d_nchw_local[1] = 0.000000e+00f;\n  conv2d_nchw_local[4] = 0.000000e+00f;\n  conv2d_nchw_local[7] = 0.000000e+00f;\n  conv2d_nchw_local[2] = 0.000000e+00f;\n  conv2d_nchw_local[5] = 0.000000e+00f;\n  conv2d_nchw_local[8] = 0.000000e+00f;\n  conv2d_nchw_local[9] = 0.000000e+00f;\n  conv2d_nchw_local[12] = 0.000000e+00f;\n  conv2d_nchw_local[15] = 0.000000e+00f;\n  conv2d_nchw_local[10] = 0.000000e+00f;\n  conv2d_nchw_local[13] = 0.000000e+00f;\n  conv2d_nchw_local[16] = 0.000000e+00f;\n  conv2d_nchw_local[11] = 0.000000e+00f;\n  conv2d_nchw_local[14] = 0.000000e+00f;\n  conv2d_nchw_local[17] = 0.000000e+00f;\n  pad_temp_shared[((int)threadIdx.x)] = (((9 <= ((int)threadIdx.x)) && (1 <= (((int)threadIdx.x) % 9))) ? data[(((((((int)blockIdx.x) >> 1) * 1792) + ((((int)threadIdx.x) / 9) * 8)) + (((int)threadIdx.x) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 34)] = ((1 <= ((((int)threadIdx.x) + 7) % 9)) ? data[(((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 34) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 68)] = ((((9 <= ((((int)threadIdx.x) + 68) % 81)) && (((((int)threadIdx.x) + 68) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 68) / 81) * 56)) + ((((((int)threadIdx.x) + 68) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 102)] = ((1 <= ((((int)threadIdx.x) + 3) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 102) / 81) * 56)) + (((((int)threadIdx.x) + 21) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 136)] = ((((9 <= ((((int)threadIdx.x) + 55) % 81)) && (((((int)threadIdx.x) + 55) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 1) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 136) / 81) * 56)) + ((((((int)threadIdx.x) + 55) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 1) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 170)] = (((1 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 170) / 81) * 56)) + (((((int)threadIdx.x) + 8) / 9) * 8)) + ((((int)threadIdx.x) + 8) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 204)] = (((((int)threadIdx.x) < 30) && (1 <= ((((int)threadIdx.x) + 6) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 204) / 81) * 56)) + (((((int)threadIdx.x) + 42) / 9) * 8)) + ((((int)threadIdx.x) + 6) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 238)] = ((((9 <= ((((int)threadIdx.x) + 76) % 81)) && (((((int)threadIdx.x) + 76) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 238) / 81) * 56)) + ((((((int)threadIdx.x) + 76) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 4) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 272)] = ((1 <= ((((int)threadIdx.x) + 2) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 272) / 81) * 56)) + (((((int)threadIdx.x) + 29) / 9) * 8)) + ((((int)threadIdx.x) + 2) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 306)] = ((((1 <= (((((int)threadIdx.x) / 9) + 7) % 9)) && (((((int)threadIdx.x) + 63) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 306) / 81) * 56)) + ((((((int)threadIdx.x) / 9) + 7) % 9) * 8)) + (((int)threadIdx.x) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 340)] = ((1 <= ((((int)threadIdx.x) + 7) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 340) / 81) * 56)) + (((((int)threadIdx.x) + 16) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 374)] = ((((9 <= ((((int)threadIdx.x) + 50) % 81)) && (((((int)threadIdx.x) + 50) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 374) / 81) * 56)) + ((((((int)threadIdx.x) + 50) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 408)] = (((6 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 408) / 81) * 56)) + (((((int)threadIdx.x) + 3) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 442)] = ((1 <= ((((int)threadIdx.x) + 1) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 442) / 81) * 56)) + (((((int)threadIdx.x) + 37) / 9) * 8)) + ((((int)threadIdx.x) + 1) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 476)] = ((((9 <= ((((int)threadIdx.x) + 71) % 81)) && (((((int)threadIdx.x) + 71) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 476) / 81) * 56)) + ((((((int)threadIdx.x) + 71) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 8) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 510)] = ((1 <= ((((int)threadIdx.x) + 6) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 510) / 81) * 56)) + (((((int)threadIdx.x) + 24) / 9) * 8)) + ((((int)threadIdx.x) + 6) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 544)] = ((((9 <= ((((int)threadIdx.x) + 58) % 81)) && (((((int)threadIdx.x) + 58) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 544) / 81) * 56)) + ((((((int)threadIdx.x) + 58) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 4) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 578)] = ((1 <= ((((int)threadIdx.x) + 2) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 578) / 81) * 56)) + (((((int)threadIdx.x) + 11) / 9) * 8)) + ((((int)threadIdx.x) + 2) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 612)] = (((((int)threadIdx.x) < 27) && (1 <= (((int)threadIdx.x) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 612) / 81) * 56)) + ((((int)threadIdx.x) / 9) * 8)) + (((int)threadIdx.x) % 9)) + 31)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 646)] = ((((9 <= ((((int)threadIdx.x) + 79) % 81)) && (((((int)threadIdx.x) + 79) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 646) / 81) * 56)) + ((((((int)threadIdx.x) + 79) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 680)] = ((1 <= ((((int)threadIdx.x) + 5) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 680) / 81) * 56)) + (((((int)threadIdx.x) + 32) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 714)] = ((((9 <= ((((int)threadIdx.x) + 66) % 81)) && (((((int)threadIdx.x) + 66) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 714) / 81) * 56)) + ((((((int)threadIdx.x) + 66) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 748)] = ((1 <= ((((int)threadIdx.x) + 1) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 748) / 81) * 56)) + (((((int)threadIdx.x) + 19) / 9) * 8)) + ((((int)threadIdx.x) + 1) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 782)] = ((((9 <= ((((int)threadIdx.x) + 53) % 81)) && (((((int)threadIdx.x) + 53) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 782) / 81) * 56)) + ((((((int)threadIdx.x) + 53) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 8) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 816)] = (((3 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 816) / 81) * 56)) + (((((int)threadIdx.x) + 6) / 9) * 8)) + ((((int)threadIdx.x) + 6) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 850)] = (((((int)threadIdx.x) < 32) && (1 <= ((((int)threadIdx.x) + 4) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 850) / 81) * 56)) + (((((int)threadIdx.x) + 40) / 9) * 8)) + ((((int)threadIdx.x) + 4) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 884)] = ((((9 <= ((((int)threadIdx.x) + 74) % 81)) && (((((int)threadIdx.x) + 74) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 884) / 81) * 56)) + ((((((int)threadIdx.x) + 74) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 2) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 918)] = ((1 <= (((int)threadIdx.x) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 918) / 81) * 56)) + ((((int)threadIdx.x) / 9) * 8)) + (((int)threadIdx.x) % 9)) + 15)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 952)] = ((((9 <= ((((int)threadIdx.x) + 61) % 81)) && (((((int)threadIdx.x) + 61) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 952) / 81) * 56)) + ((((((int)threadIdx.x) + 61) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 986)] = ((1 <= ((((int)threadIdx.x) + 5) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 986) / 81) * 56)) + (((((int)threadIdx.x) + 14) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1020)] = ((((9 <= ((((int)threadIdx.x) + 48) % 81)) && (((((int)threadIdx.x) + 48) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1020) / 81) * 56)) + ((((((int)threadIdx.x) + 48) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1054)] = (((8 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 1) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1054) / 81) * 56)) + (((((int)threadIdx.x) + 1) / 9) * 8)) + ((((int)threadIdx.x) + 1) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1088)] = ((1 <= ((((int)threadIdx.x) + 8) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1088) / 81) * 56)) + (((((int)threadIdx.x) + 35) / 9) * 8)) + ((((int)threadIdx.x) + 8) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1122)] = ((((9 <= ((((int)threadIdx.x) + 69) % 81)) && (((((int)threadIdx.x) + 69) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1122) / 81) * 56)) + ((((((int)threadIdx.x) + 69) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 6) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1156)] = ((1 <= ((((int)threadIdx.x) + 4) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1156) / 81) * 56)) + (((((int)threadIdx.x) + 22) / 9) * 8)) + ((((int)threadIdx.x) + 4) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1190)] = ((((9 <= ((((int)threadIdx.x) + 56) % 81)) && (((((int)threadIdx.x) + 56) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1190) / 81) * 56)) + ((((((int)threadIdx.x) + 56) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 2) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1224)] = ((1 <= (((int)threadIdx.x) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1224) / 81) * 56)) + ((((int)threadIdx.x) / 9) * 8)) + (((int)threadIdx.x) % 9)) - 1)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1258)] = (((((int)threadIdx.x) < 29) && (1 <= ((((int)threadIdx.x) + 7) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1258) / 81) * 56)) + (((((int)threadIdx.x) + 43) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1292)] = ((((9 <= ((((int)threadIdx.x) + 77) % 81)) && (((((int)threadIdx.x) + 77) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1292) / 81) * 56)) + ((((((int)threadIdx.x) + 77) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1326)] = ((1 <= ((((int)threadIdx.x) + 3) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1326) / 81) * 56)) + (((((int)threadIdx.x) + 30) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1360)] = ((((9 <= ((((int)threadIdx.x) + 64) % 81)) && (((((int)threadIdx.x) + 64) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 1) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1360) / 81) * 56)) + ((((((int)threadIdx.x) + 64) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 1) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1394)] = ((1 <= ((((int)threadIdx.x) + 8) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1394) / 81) * 56)) + (((((int)threadIdx.x) + 17) / 9) * 8)) + ((((int)threadIdx.x) + 8) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1428)] = ((((9 <= ((((int)threadIdx.x) + 51) % 81)) && (((((int)threadIdx.x) + 51) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1428) / 81) * 56)) + ((((((int)threadIdx.x) + 51) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 6) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1462)] = (((5 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1462) / 81) * 56)) + (((((int)threadIdx.x) + 4) / 9) * 8)) + ((((int)threadIdx.x) + 4) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1496)] = ((1 <= ((((int)threadIdx.x) + 2) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1496) / 81) * 56)) + (((((int)threadIdx.x) + 38) / 9) * 8)) + ((((int)threadIdx.x) + 2) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1530)] = ((((1 <= (((((int)threadIdx.x) / 9) + 8) % 9)) && (((((int)threadIdx.x) + 72) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1530) / 81) * 56)) + ((((((int)threadIdx.x) / 9) + 8) % 9) * 8)) + (((int)threadIdx.x) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1564)] = ((1 <= ((((int)threadIdx.x) + 7) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1564) / 81) * 56)) + (((((int)threadIdx.x) + 25) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1598)] = ((((9 <= ((((int)threadIdx.x) + 59) % 81)) && (((((int)threadIdx.x) + 59) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1598) / 81) * 56)) + ((((((int)threadIdx.x) + 59) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1632)] = ((1 <= ((((int)threadIdx.x) + 3) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1632) / 81) * 56)) + (((((int)threadIdx.x) + 12) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1666)] = (((((int)threadIdx.x) < 26) && (1 <= ((((int)threadIdx.x) + 1) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1666) / 81) * 56)) + (((((int)threadIdx.x) + 46) / 9) * 8)) + ((((int)threadIdx.x) + 1) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1700)] = ((((9 <= ((((int)threadIdx.x) + 80) % 81)) && (((((int)threadIdx.x) + 80) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1700) / 81) * 56)) + ((((((int)threadIdx.x) + 80) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 8) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1734)] = ((1 <= ((((int)threadIdx.x) + 6) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1734) / 81) * 56)) + (((((int)threadIdx.x) + 33) / 9) * 8)) + ((((int)threadIdx.x) + 6) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1768)] = ((((9 <= ((((int)threadIdx.x) + 67) % 81)) && (((((int)threadIdx.x) + 67) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1768) / 81) * 56)) + ((((((int)threadIdx.x) + 67) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 4) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1802)] = ((1 <= ((((int)threadIdx.x) + 2) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1802) / 81) * 56)) + (((((int)threadIdx.x) + 20) / 9) * 8)) + ((((int)threadIdx.x) + 2) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1836)] = ((((1 <= (((((int)threadIdx.x) / 9) + 6) % 9)) && (((((int)threadIdx.x) + 54) % 81) < 72)) && (1 <= (((int)threadIdx.x) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1836) / 81) * 56)) + ((((((int)threadIdx.x) / 9) + 6) % 9) * 8)) + (((int)threadIdx.x) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1870)] = (((2 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1870) / 81) * 56)) + (((((int)threadIdx.x) + 7) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1904)] = (((((int)threadIdx.x) < 31) && (1 <= ((((int)threadIdx.x) + 5) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1904) / 81) * 56)) + (((((int)threadIdx.x) + 41) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1938)] = ((((9 <= ((((int)threadIdx.x) + 75) % 81)) && (((((int)threadIdx.x) + 75) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1938) / 81) * 56)) + ((((((int)threadIdx.x) + 75) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 1972)] = ((1 <= ((((int)threadIdx.x) + 1) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 1972) / 81) * 56)) + (((((int)threadIdx.x) + 28) / 9) * 8)) + ((((int)threadIdx.x) + 1) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2006)] = ((((9 <= ((((int)threadIdx.x) + 62) % 81)) && (((((int)threadIdx.x) + 62) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 8) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2006) / 81) * 56)) + ((((((int)threadIdx.x) + 62) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 8) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2040)] = ((1 <= ((((int)threadIdx.x) + 6) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2040) / 81) * 56)) + (((((int)threadIdx.x) + 15) / 9) * 8)) + ((((int)threadIdx.x) + 6) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2074)] = ((((9 <= ((((int)threadIdx.x) + 49) % 81)) && (((((int)threadIdx.x) + 49) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 4) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2074) / 81) * 56)) + ((((((int)threadIdx.x) + 49) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 4) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2108)] = (((7 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2108) / 81) * 56)) + (((((int)threadIdx.x) + 2) / 9) * 8)) + ((((int)threadIdx.x) + 2) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2142)] = ((1 <= (((int)threadIdx.x) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2142) / 81) * 56)) + ((((int)threadIdx.x) / 9) * 8)) + (((int)threadIdx.x) % 9)) + 23)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2176)] = ((((9 <= ((((int)threadIdx.x) + 70) % 81)) && (((((int)threadIdx.x) + 70) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2176) / 81) * 56)) + ((((((int)threadIdx.x) + 70) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2210)] = ((1 <= ((((int)threadIdx.x) + 5) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2210) / 81) * 56)) + (((((int)threadIdx.x) + 23) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2244)] = ((((9 <= ((((int)threadIdx.x) + 57) % 81)) && (((((int)threadIdx.x) + 57) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 3) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2244) / 81) * 56)) + ((((((int)threadIdx.x) + 57) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2278)] = ((1 <= ((((int)threadIdx.x) + 1) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2278) / 81) * 56)) + (((((int)threadIdx.x) + 10) / 9) * 8)) + ((((int)threadIdx.x) + 1) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2312)] = (((((int)threadIdx.x) < 28) && (1 <= ((((int)threadIdx.x) + 8) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2312) / 81) * 56)) + (((((int)threadIdx.x) + 44) / 9) * 8)) + ((((int)threadIdx.x) + 8) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2346)] = ((((9 <= ((((int)threadIdx.x) + 78) % 81)) && (((((int)threadIdx.x) + 78) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 6) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2346) / 81) * 56)) + ((((((int)threadIdx.x) + 78) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 6) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2380)] = ((1 <= ((((int)threadIdx.x) + 4) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2380) / 81) * 56)) + (((((int)threadIdx.x) + 31) / 9) * 8)) + ((((int)threadIdx.x) + 4) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2414)] = ((((9 <= ((((int)threadIdx.x) + 65) % 81)) && (((((int)threadIdx.x) + 65) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 2) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2414) / 81) * 56)) + ((((((int)threadIdx.x) + 65) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 2) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2448)] = ((1 <= (((int)threadIdx.x) % 9)) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2448) / 81) * 56)) + ((((int)threadIdx.x) / 9) * 8)) + (((int)threadIdx.x) % 9)) + 7)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2482)] = ((((9 <= ((((int)threadIdx.x) + 52) % 81)) && (((((int)threadIdx.x) + 52) % 81) < 72)) && (1 <= ((((int)threadIdx.x) + 7) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2482) / 81) * 56)) + ((((((int)threadIdx.x) + 52) % 81) / 9) * 8)) + ((((int)threadIdx.x) + 7) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2516)] = (((4 <= ((int)threadIdx.x)) && (1 <= ((((int)threadIdx.x) + 5) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2516) / 81) * 56)) + (((((int)threadIdx.x) + 5) / 9) * 8)) + ((((int)threadIdx.x) + 5) % 9)) - 9)] : 0.000000e+00f);\n  pad_temp_shared[(((int)threadIdx.x) + 2550)] = (((((int)threadIdx.x) < 33) && (1 <= ((((int)threadIdx.x) + 3) % 9))) ? data[((((((((int)blockIdx.x) >> 1) * 1792) + (((((int)threadIdx.x) + 2550) / 81) * 56)) + (((((int)threadIdx.x) + 39) / 9) * 8)) + ((((int)threadIdx.x) + 3) % 9)) - 9)] : 0.000000e+00f);\n  if (((int)threadIdx.x) < 8) {\n    pad_temp_shared[(((int)threadIdx.x) + 2584)] = 0.000000e+00f;\n  }\n  kernel_shared[((int)threadIdx.x)] = kernel[(((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x))];\n  kernel_shared[(((int)threadIdx.x) + 34)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 34)];\n  kernel_shared[(((int)threadIdx.x) + 68)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 68)];\n  kernel_shared[(((int)threadIdx.x) + 102)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 102)];\n  kernel_shared[(((int)threadIdx.x) + 136)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 136)];\n  kernel_shared[(((int)threadIdx.x) + 170)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 170)];\n  kernel_shared[(((int)threadIdx.x) + 204)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 204)];\n  kernel_shared[(((int)threadIdx.x) + 238)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 238)];\n  kernel_shared[(((int)threadIdx.x) + 272)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 272)];\n  kernel_shared[(((int)threadIdx.x) + 306)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 306)];\n  kernel_shared[(((int)threadIdx.x) + 340)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 340)];\n  kernel_shared[(((int)threadIdx.x) + 374)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 374)];\n  kernel_shared[(((int)threadIdx.x) + 408)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 408)];\n  kernel_shared[(((int)threadIdx.x) + 442)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 442)];\n  kernel_shared[(((int)threadIdx.x) + 476)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 476)];\n  kernel_shared[(((int)threadIdx.x) + 510)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 510)];\n  kernel_shared[(((int)threadIdx.x) + 544)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 544)];\n  kernel_shared[(((int)threadIdx.x) + 578)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 578)];\n  kernel_shared[(((int)threadIdx.x) + 612)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 612)];\n  kernel_shared[(((int)threadIdx.x) + 646)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 646)];\n  kernel_shared[(((int)threadIdx.x) + 680)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 680)];\n  kernel_shared[(((int)threadIdx.x) + 714)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 714)];\n  kernel_shared[(((int)threadIdx.x) + 748)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 748)];\n  kernel_shared[(((int)threadIdx.x) + 782)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 782)];\n  kernel_shared[(((int)threadIdx.x) + 816)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 816)];\n  kernel_shared[(((int)threadIdx.x) + 850)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 850)];\n  kernel_shared[(((int)threadIdx.x) + 884)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 884)];\n  kernel_shared[(((int)threadIdx.x) + 918)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 918)];\n  kernel_shared[(((int)threadIdx.x) + 952)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 952)];\n  kernel_shared[(((int)threadIdx.x) + 986)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 986)];\n  kernel_shared[(((int)threadIdx.x) + 1020)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1020)];\n  kernel_shared[(((int)threadIdx.x) + 1054)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1054)];\n  kernel_shared[(((int)threadIdx.x) + 1088)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1088)];\n  kernel_shared[(((int)threadIdx.x) + 1122)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1122)];\n  kernel_shared[(((int)threadIdx.x) + 1156)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1156)];\n  kernel_shared[(((int)threadIdx.x) + 1190)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1190)];\n  kernel_shared[(((int)threadIdx.x) + 1224)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1224)];\n  kernel_shared[(((int)threadIdx.x) + 1258)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1258)];\n  kernel_shared[(((int)threadIdx.x) + 1292)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1292)];\n  kernel_shared[(((int)threadIdx.x) + 1326)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1326)];\n  kernel_shared[(((int)threadIdx.x) + 1360)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1360)];\n  kernel_shared[(((int)threadIdx.x) + 1394)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1394)];\n  kernel_shared[(((int)threadIdx.x) + 1428)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1428)];\n  kernel_shared[(((int)threadIdx.x) + 1462)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1462)];\n  kernel_shared[(((int)threadIdx.x) + 1496)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1496)];\n  kernel_shared[(((int)threadIdx.x) + 1530)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1530)];\n  kernel_shared[(((int)threadIdx.x) + 1564)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1564)];\n  kernel_shared[(((int)threadIdx.x) + 1598)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1598)];\n  kernel_shared[(((int)threadIdx.x) + 1632)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1632)];\n  kernel_shared[(((int)threadIdx.x) + 1666)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1666)];\n  kernel_shared[(((int)threadIdx.x) + 1700)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1700)];\n  kernel_shared[(((int)threadIdx.x) + 1734)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1734)];\n  kernel_shared[(((int)threadIdx.x) + 1768)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1768)];\n  kernel_shared[(((int)threadIdx.x) + 1802)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1802)];\n  kernel_shared[(((int)threadIdx.x) + 1836)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1836)];\n  kernel_shared[(((int)threadIdx.x) + 1870)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1870)];\n  kernel_shared[(((int)threadIdx.x) + 1904)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1904)];\n  kernel_shared[(((int)threadIdx.x) + 1938)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1938)];\n  kernel_shared[(((int)threadIdx.x) + 1972)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 1972)];\n  kernel_shared[(((int)threadIdx.x) + 2006)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2006)];\n  kernel_shared[(((int)threadIdx.x) + 2040)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2040)];\n  kernel_shared[(((int)threadIdx.x) + 2074)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2074)];\n  kernel_shared[(((int)threadIdx.x) + 2108)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2108)];\n  kernel_shared[(((int)threadIdx.x) + 2142)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2142)];\n  kernel_shared[(((int)threadIdx.x) + 2176)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2176)];\n  kernel_shared[(((int)threadIdx.x) + 2210)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2210)];\n  kernel_shared[(((int)threadIdx.x) + 2244)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2244)];\n  kernel_shared[(((int)threadIdx.x) + 2278)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2278)];\n  kernel_shared[(((int)threadIdx.x) + 2312)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2312)];\n  kernel_shared[(((int)threadIdx.x) + 2346)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2346)];\n  kernel_shared[(((int)threadIdx.x) + 2380)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2380)];\n  kernel_shared[(((int)threadIdx.x) + 2414)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2414)];\n  kernel_shared[(((int)threadIdx.x) + 2448)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2448)];\n  kernel_shared[(((int)threadIdx.x) + 2482)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2482)];\n  kernel_shared[(((int)threadIdx.x) + 2516)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2516)];\n  kernel_shared[(((int)threadIdx.x) + 2550)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2550)];\n  kernel_shared[(((int)threadIdx.x) + 2584)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2584)];\n  kernel_shared[(((int)threadIdx.x) + 2618)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2618)];\n  kernel_shared[(((int)threadIdx.x) + 2652)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2652)];\n  kernel_shared[(((int)threadIdx.x) + 2686)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2686)];\n  kernel_shared[(((int)threadIdx.x) + 2720)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2720)];\n  kernel_shared[(((int)threadIdx.x) + 2754)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2754)];\n  kernel_shared[(((int)threadIdx.x) + 2788)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2788)];\n  kernel_shared[(((int)threadIdx.x) + 2822)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2822)];\n  kernel_shared[(((int)threadIdx.x) + 2856)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2856)];\n  kernel_shared[(((int)threadIdx.x) + 2890)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2890)];\n  kernel_shared[(((int)threadIdx.x) + 2924)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2924)];\n  kernel_shared[(((int)threadIdx.x) + 2958)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2958)];\n  kernel_shared[(((int)threadIdx.x) + 2992)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 2992)];\n  kernel_shared[(((int)threadIdx.x) + 3026)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3026)];\n  kernel_shared[(((int)threadIdx.x) + 3060)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3060)];\n  kernel_shared[(((int)threadIdx.x) + 3094)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3094)];\n  kernel_shared[(((int)threadIdx.x) + 3128)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3128)];\n  kernel_shared[(((int)threadIdx.x) + 3162)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3162)];\n  kernel_shared[(((int)threadIdx.x) + 3196)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3196)];\n  kernel_shared[(((int)threadIdx.x) + 3230)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3230)];\n  kernel_shared[(((int)threadIdx.x) + 3264)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3264)];\n  kernel_shared[(((int)threadIdx.x) + 3298)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3298)];\n  kernel_shared[(((int)threadIdx.x) + 3332)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3332)];\n  kernel_shared[(((int)threadIdx.x) + 3366)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3366)];\n  kernel_shared[(((int)threadIdx.x) + 3400)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3400)];\n  kernel_shared[(((int)threadIdx.x) + 3434)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3434)];\n  kernel_shared[(((int)threadIdx.x) + 3468)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3468)];\n  kernel_shared[(((int)threadIdx.x) + 3502)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3502)];\n  kernel_shared[(((int)threadIdx.x) + 3536)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3536)];\n  kernel_shared[(((int)threadIdx.x) + 3570)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3570)];\n  kernel_shared[(((int)threadIdx.x) + 3604)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3604)];\n  kernel_shared[(((int)threadIdx.x) + 3638)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3638)];\n  kernel_shared[(((int)threadIdx.x) + 3672)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3672)];\n  kernel_shared[(((int)threadIdx.x) + 3706)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3706)];\n  kernel_shared[(((int)threadIdx.x) + 3740)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3740)];\n  kernel_shared[(((int)threadIdx.x) + 3774)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3774)];\n  kernel_shared[(((int)threadIdx.x) + 3808)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3808)];\n  kernel_shared[(((int)threadIdx.x) + 3842)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3842)];\n  kernel_shared[(((int)threadIdx.x) + 3876)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3876)];\n  kernel_shared[(((int)threadIdx.x) + 3910)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3910)];\n  kernel_shared[(((int)threadIdx.x) + 3944)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3944)];\n  kernel_shared[(((int)threadIdx.x) + 3978)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 3978)];\n  kernel_shared[(((int)threadIdx.x) + 4012)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4012)];\n  kernel_shared[(((int)threadIdx.x) + 4046)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4046)];\n  kernel_shared[(((int)threadIdx.x) + 4080)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4080)];\n  kernel_shared[(((int)threadIdx.x) + 4114)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4114)];\n  kernel_shared[(((int)threadIdx.x) + 4148)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4148)];\n  kernel_shared[(((int)threadIdx.x) + 4182)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4182)];\n  kernel_shared[(((int)threadIdx.x) + 4216)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4216)];\n  kernel_shared[(((int)threadIdx.x) + 4250)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4250)];\n  kernel_shared[(((int)threadIdx.x) + 4284)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4284)];\n  kernel_shared[(((int)threadIdx.x) + 4318)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4318)];\n  kernel_shared[(((int)threadIdx.x) + 4352)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4352)];\n  kernel_shared[(((int)threadIdx.x) + 4386)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4386)];\n  kernel_shared[(((int)threadIdx.x) + 4420)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4420)];\n  kernel_shared[(((int)threadIdx.x) + 4454)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4454)];\n  kernel_shared[(((int)threadIdx.x) + 4488)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4488)];\n  kernel_shared[(((int)threadIdx.x) + 4522)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4522)];\n  kernel_shared[(((int)threadIdx.x) + 4556)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4556)];\n  kernel_shared[(((int)threadIdx.x) + 4590)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4590)];\n  kernel_shared[(((int)threadIdx.x) + 4624)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4624)];\n  kernel_shared[(((int)threadIdx.x) + 4658)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4658)];\n  kernel_shared[(((int)threadIdx.x) + 4692)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4692)];\n  kernel_shared[(((int)threadIdx.x) + 4726)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4726)];\n  kernel_shared[(((int)threadIdx.x) + 4760)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4760)];\n  kernel_shared[(((int)threadIdx.x) + 4794)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4794)];\n  kernel_shared[(((int)threadIdx.x) + 4828)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4828)];\n  kernel_shared[(((int)threadIdx.x) + 4862)] = kernel[((((((int)blockIdx.x) & 1) * 4896) + ((int)threadIdx.x)) + 4862)];\n  __syncthreads();\n  for (int rc_outer_inner = 0; rc_outer_inner < 4; ++rc_outer_inner) {\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[(rc_outer_inner * 324)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 27)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 54)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 1)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 28)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 55)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 2)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 29)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 56)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 81)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 108)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 135)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 82)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 109)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 136)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 83)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 110)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 137)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 162)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 189)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 216)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 163)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 190)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 217)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 164)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 191)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 218)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 243)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 270)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 297)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 244)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 271)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 298)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 245)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 272)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 299)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 3)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 30)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 57)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 4)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 31)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 58)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 5)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 32)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 59)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 84)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 111)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 138)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 85)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 112)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 139)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 86)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 113)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 140)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 165)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 192)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 219)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 166)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 193)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 220)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 167)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 194)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 221)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 246)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 273)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 300)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 247)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 274)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 301)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 248)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 275)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 302)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 6)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 33)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 60)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 7)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 34)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 61)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 8)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 35)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 62)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 87)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 114)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 141)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 88)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 115)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 142)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 89)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 116)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 143)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 168)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 195)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 222)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 169)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 196)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 223)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 170)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 197)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 224)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 249)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 276)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 303)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 250)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 277)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 304)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 251)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 278)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 305)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1296)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1323)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1350)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1297)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1324)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1351)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1298)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1325)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1352)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1377)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1404)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1431)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1378)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1405)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1432)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1379)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1406)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1433)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1458)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1485)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1512)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1459)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1486)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1513)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1460)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1487)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1514)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1539)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1566)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1593)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1540)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1567)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1594)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1541)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1568)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1595)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1299)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1326)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1353)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1300)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1327)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1354)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1301)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1328)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1355)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1380)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1407)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1434)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1381)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1408)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1435)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1382)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1409)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1436)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1461)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1488)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1515)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1462)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1489)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1516)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1463)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1490)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1517)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1542)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1569)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1596)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1543)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1570)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1597)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1544)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1571)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1598)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1302)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1329)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1356)] * kernel_shared[((((int)threadIdx.x) * 144) + (rc_outer_inner * 36))]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1303)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1330)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1357)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 1)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1304)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1331)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1358)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 2)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1383)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1410)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1437)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 9)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1384)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1411)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1438)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 10)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1385)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1412)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1439)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 11)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1464)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1491)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1518)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 18)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1465)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1492)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1519)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 19)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1466)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1493)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1520)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 20)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1545)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1572)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1599)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 27)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1546)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1573)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1600)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 28)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1547)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1574)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1601)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 29)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 9)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 36)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 63)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 10)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 37)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 64)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 11)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 38)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 65)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 90)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 117)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 144)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 91)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 118)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 145)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 92)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 119)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 146)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 171)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 198)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 225)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 172)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 199)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 226)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 173)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 200)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 227)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 252)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 279)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 306)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 253)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 280)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 307)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 254)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 281)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 308)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 12)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 39)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 66)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 13)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 40)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 67)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 14)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 41)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 68)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 93)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 120)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 147)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 94)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 121)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 148)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 95)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 122)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 149)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 174)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 201)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 228)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 175)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 202)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 229)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 176)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 203)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 230)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 255)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 282)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 309)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 256)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 283)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 310)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 257)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 284)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 311)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 15)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 42)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 69)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 16)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 43)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 70)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 17)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 44)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 71)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 96)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 123)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 150)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 97)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 124)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 151)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 98)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 125)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 152)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 177)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 204)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 231)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 178)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 205)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 232)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 179)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 206)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 233)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 258)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 285)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 312)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 259)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 286)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 313)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 260)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 287)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 314)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1305)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1332)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1359)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1306)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1333)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1360)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1307)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1334)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1361)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1386)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1413)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1440)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1387)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1414)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1441)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1388)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1415)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1442)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1467)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1494)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1521)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1468)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1495)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1522)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1469)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1496)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1523)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1548)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1575)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1602)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1549)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1576)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1603)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1550)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1577)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1604)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1308)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1335)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1362)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1309)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1336)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1363)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1310)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1337)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1364)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1389)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1416)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1443)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1390)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1417)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1444)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1391)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1418)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1445)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1470)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1497)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1524)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1471)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1498)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1525)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1472)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1499)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1526)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1551)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1578)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1605)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1552)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1579)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1606)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1553)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1580)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1607)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1311)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1338)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1365)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 3)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1312)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1339)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1366)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 4)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1313)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1340)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1367)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 5)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1392)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1419)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1446)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 12)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1393)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1420)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1447)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 13)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1394)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1421)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1448)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 14)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1473)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1500)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1527)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 21)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1474)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1501)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1528)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 22)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1475)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1502)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1529)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 23)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1554)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1581)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1608)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 30)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1555)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1582)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1609)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 31)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1556)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1583)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1610)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 32)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 18)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 45)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 72)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 19)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 46)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 73)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 20)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 47)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 74)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 99)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 126)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 153)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 100)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 127)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 154)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 101)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 128)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 155)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 180)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 207)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 234)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 181)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 208)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 235)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 182)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 209)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 236)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 261)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 288)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 315)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 262)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 289)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 316)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((rc_outer_inner * 324) + 263)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[((rc_outer_inner * 324) + 290)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[6] = (conv2d_nchw_local[6] + (pad_temp_shared[((rc_outer_inner * 324) + 317)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 21)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 48)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 75)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 22)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 49)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 76)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 23)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 50)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 77)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 102)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 129)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 156)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 103)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 130)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 157)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 104)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 131)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 158)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 183)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 210)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 237)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 184)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 211)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 238)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 185)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 212)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 239)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 264)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 291)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 318)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 265)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 292)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 319)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[((rc_outer_inner * 324) + 266)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[((rc_outer_inner * 324) + 293)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[7] = (conv2d_nchw_local[7] + (pad_temp_shared[((rc_outer_inner * 324) + 320)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 24)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 51)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 78)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 25)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 52)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 79)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 26)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 53)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 80)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 105)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 132)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 159)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 106)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 133)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 160)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 107)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 134)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 161)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 186)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 213)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 240)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 187)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 214)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 241)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 188)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 215)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 242)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 267)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 294)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 321)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 268)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 295)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 322)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[((rc_outer_inner * 324) + 269)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[((rc_outer_inner * 324) + 296)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[8] = (conv2d_nchw_local[8] + (pad_temp_shared[((rc_outer_inner * 324) + 323)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1314)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1341)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1368)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1315)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1342)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1369)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1316)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1343)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1370)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1395)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1422)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1449)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1396)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1423)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1450)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1397)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1424)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1451)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1476)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1503)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1530)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1477)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1504)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1531)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1478)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1505)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1532)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1557)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1584)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1611)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1558)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1585)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1612)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[9] = (conv2d_nchw_local[9] + (pad_temp_shared[((rc_outer_inner * 324) + 1559)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[12] = (conv2d_nchw_local[12] + (pad_temp_shared[((rc_outer_inner * 324) + 1586)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[15] = (conv2d_nchw_local[15] + (pad_temp_shared[((rc_outer_inner * 324) + 1613)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1317)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1344)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1371)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1318)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1345)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1372)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1319)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1346)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1373)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1398)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1425)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1452)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1399)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1426)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1453)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1400)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1427)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1454)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1479)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1506)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1533)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1480)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1507)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1534)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1481)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1508)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1535)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1560)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1587)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1614)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1561)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1588)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1615)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[10] = (conv2d_nchw_local[10] + (pad_temp_shared[((rc_outer_inner * 324) + 1562)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[13] = (conv2d_nchw_local[13] + (pad_temp_shared[((rc_outer_inner * 324) + 1589)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[16] = (conv2d_nchw_local[16] + (pad_temp_shared[((rc_outer_inner * 324) + 1616)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1320)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1347)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1374)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 6)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1321)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1348)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1375)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 7)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1322)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1349)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1376)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 8)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1401)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1428)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1455)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 15)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1402)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1429)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1456)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 16)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1403)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1430)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1457)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 17)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1482)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1509)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1536)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 24)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1483)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1510)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1537)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 25)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1484)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1511)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1538)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 26)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1563)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1590)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1617)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 33)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1564)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1591)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1618)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 34)]));\n    conv2d_nchw_local[11] = (conv2d_nchw_local[11] + (pad_temp_shared[((rc_outer_inner * 324) + 1565)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[14] = (conv2d_nchw_local[14] + (pad_temp_shared[((rc_outer_inner * 324) + 1592)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n    conv2d_nchw_local[17] = (conv2d_nchw_local[17] + (pad_temp_shared[((rc_outer_inner * 324) + 1619)] * kernel_shared[(((((int)threadIdx.x) * 144) + (rc_outer_inner * 36)) + 35)]));\n  }\n  for (int nn_inner = 0; nn_inner < 2; ++nn_inner) {\n    for (int yy_inner = 0; yy_inner < 3; ++yy_inner) {\n      for (int xx_inner = 0; xx_inner < 3; ++xx_inner) {\n        conv2d_nchw[(((((((((int)blockIdx.x) >> 1) * 1224) + (nn_inner * 612)) + ((((int)blockIdx.x) & 1) * 306)) + (((int)threadIdx.x) * 9)) + (yy_inner * 3)) + xx_inner)] = conv2d_nchw_local[(((nn_inner * 9) + (yy_inner * 3)) + xx_inner)];\n      }\n    }\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t kernel_code = arg_type_ids[1];\n  int32_t conv2d_nchw_code = arg_type_ids[2];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* kernel = (((TVMValue*)args)[1].v_handle);\n  void* conv2d_nchw = (((TVMValue*)args)[2].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* kernel_1 = (((DLTensor*)kernel)[0].data);\n  void* default_function_kernel_shape = (((DLTensor*)kernel)[0].shape);\n  void* default_function_kernel_strides = (((DLTensor*)kernel)[0].strides);\n  void* conv2d_nchw_1 = (((DLTensor*)conv2d_nchw)[0].data);\n  void* default_function_conv2d_nchw_shape = (((DLTensor*)conv2d_nchw)[0].shape);\n  void* default_function_conv2d_nchw_strides = (((DLTensor*)conv2d_nchw)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_kernel_strides == NULL)) {\n  }\n  if (!(default_function_conv2d_nchw_strides == NULL)) {\n  }\n  for (int32_t nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused = 0; nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused < 12; ++nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused) {\n    void* conv2d_nchw_local = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)1632, 2, 32);\n    if (conv2d_nchw_local == NULL) {\n      return -1;\n    }\n    void* pad_temp = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)1728, 2, 32);\n    if (pad_temp == NULL) {\n      return -1;\n    }\n    for (int32_t ff_c_outer_inner_init = 0; ff_c_outer_inner_init < 17; ++ff_c_outer_inner_init) {\n      ((float3*)conv2d_nchw_local)[ff_c_outer_inner_init] = ((float3)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n      ((float3*)conv2d_nchw_local)[(ff_c_outer_inner_init + 17)] = ((float3)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n      ((float3*)conv2d_nchw_local)[(ff_c_outer_inner_init + 34)] = ((float3)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n      ((float3*)conv2d_nchw_local)[(ff_c_outer_inner_init + 51)] = ((float3)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n      ((float3*)conv2d_nchw_local)[(ff_c_outer_inner_init + 68)] = ((float3)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n      ((float3*)conv2d_nchw_local)[(ff_c_outer_inner_init + 85)] = ((float3)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n      ((float3*)conv2d_nchw_local)[(ff_c_outer_inner_init + 102)] = ((float3)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n      ((float3*)conv2d_nchw_local)[(ff_c_outer_inner_init + 119)] = ((float3)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    }\n    for (int32_t rc_outer = 0; rc_outer < 8; ++rc_outer) {\n      for (int32_t i0 = 0; i0 < 8; ++i0) {\n        int32_t cse_var_5 = (nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused % 3);\n        int32_t cse_var_4 = (i0 * 54);\n        bool cse_var_3 = (cse_var_5 < 2);\n        bool cse_var_2 = (1 <= cse_var_5);\n        int32_t cse_var_1 = (((i0 * 896) + (rc_outer * 112)) + (cse_var_5 * 24));\n        ((float*)pad_temp)[cse_var_4] = 0.000000e+00f;\n        ((float*)pad_temp)[(cse_var_4 + 1)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 - 8)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 2)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 - 7)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 3)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 - 6)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 4)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 - 5)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 5)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 - 4)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 6)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 - 3)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 7)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 - 2)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 8)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 - 1)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 9)] = 0.000000e+00f;\n        ((float*)pad_temp)[(cse_var_4 + 10)] = ((float*)data_1)[cse_var_1];\n        ((float*)pad_temp)[(cse_var_4 + 11)] = ((float*)data_1)[(cse_var_1 + 1)];\n        ((float*)pad_temp)[(cse_var_4 + 12)] = ((float*)data_1)[(cse_var_1 + 2)];\n        ((float*)pad_temp)[(cse_var_4 + 13)] = ((float*)data_1)[(cse_var_1 + 3)];\n        ((float*)pad_temp)[(cse_var_4 + 14)] = ((float*)data_1)[(cse_var_1 + 4)];\n        ((float*)pad_temp)[(cse_var_4 + 15)] = ((float*)data_1)[(cse_var_1 + 5)];\n        ((float*)pad_temp)[(cse_var_4 + 16)] = ((float*)data_1)[(cse_var_1 + 6)];\n        ((float*)pad_temp)[(cse_var_4 + 17)] = ((float*)data_1)[(cse_var_1 + 7)];\n        ((float*)pad_temp)[(cse_var_4 + 18)] = 0.000000e+00f;\n        ((float*)pad_temp)[(cse_var_4 + 19)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 8)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 20)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 9)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 21)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 10)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 22)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 11)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 23)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 12)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 24)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 13)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 25)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 14)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 26)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 15)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 27)] = 0.000000e+00f;\n        ((float*)pad_temp)[(cse_var_4 + 28)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 + 48)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 29)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 + 49)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 30)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 + 50)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 31)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 + 51)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 32)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 + 52)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 33)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 + 53)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 34)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 + 54)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 35)] = (cse_var_2 ? ((float*)data_1)[(cse_var_1 + 55)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 36)] = 0.000000e+00f;\n        ((float*)pad_temp)[(cse_var_4 + 37)] = ((float*)data_1)[(cse_var_1 + 56)];\n        ((float*)pad_temp)[(cse_var_4 + 38)] = ((float*)data_1)[(cse_var_1 + 57)];\n        ((float*)pad_temp)[(cse_var_4 + 39)] = ((float*)data_1)[(cse_var_1 + 58)];\n        ((float*)pad_temp)[(cse_var_4 + 40)] = ((float*)data_1)[(cse_var_1 + 59)];\n        ((float*)pad_temp)[(cse_var_4 + 41)] = ((float*)data_1)[(cse_var_1 + 60)];\n        ((float*)pad_temp)[(cse_var_4 + 42)] = ((float*)data_1)[(cse_var_1 + 61)];\n        ((float*)pad_temp)[(cse_var_4 + 43)] = ((float*)data_1)[(cse_var_1 + 62)];\n        ((float*)pad_temp)[(cse_var_4 + 44)] = ((float*)data_1)[(cse_var_1 + 63)];\n        ((float*)pad_temp)[(cse_var_4 + 45)] = 0.000000e+00f;\n        ((float*)pad_temp)[(cse_var_4 + 46)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 64)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 47)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 65)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 48)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 66)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 49)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 67)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 50)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 68)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 51)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 69)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 52)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 70)] : 0.000000e+00f);\n        ((float*)pad_temp)[(cse_var_4 + 53)] = (cse_var_3 ? ((float*)data_1)[(cse_var_1 + 71)] : 0.000000e+00f);\n      }\n      for (int32_t rx_outer = 0; rx_outer < 3; ++rx_outer) {\n        for (int32_t ff_c_outer_inner = 0; ff_c_outer_inner < 17; ++ff_c_outer_inner) {\n          int32_t cse_var_18 = (ff_c_outer_inner + 85);\n          int32_t cse_var_17 = (ff_c_outer_inner + 68);\n          int32_t cse_var_16 = (ff_c_outer_inner + 51);\n          int32_t cse_var_15 = (ff_c_outer_inner + 34);\n          int32_t cse_var_14 = (ff_c_outer_inner + 17);\n          int32_t cse_var_13 = (ff_c_outer_inner + 119);\n          int32_t cse_var_12 = (ff_c_outer_inner + 102);\n          int32_t cse_var_11 = (((((nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused / 3) * 2448) + (ff_c_outer_inner * 144)) + (rc_outer * 18)) + rx_outer);\n          int32_t cse_var_10 = (cse_var_11 + 9);\n          int32_t cse_var_9 = (cse_var_11 + 6);\n          int32_t cse_var_8 = (cse_var_11 + 3);\n          int32_t cse_var_7 = (cse_var_11 + 15);\n          int32_t cse_var_6 = (cse_var_11 + 12);\n          int32_t3 v_ = int32_t3((rx_outer)+(3*0), (rx_outer)+(3*1), (rx_outer)+(3*2));\n          ((float3*)conv2d_nchw_local)[ff_c_outer_inner] = (((float3*)conv2d_nchw_local)[ff_c_outer_inner] + ((float3(((float*)pad_temp)[v_.s0],((float*)pad_temp)[v_.s1],((float*)pad_temp)[v_.s2])) * ((float3)(((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11]))));\n          int32_t3 v__1 = int32_t3(((rx_outer + 54))+(3*0), ((rx_outer + 54))+(3*1), ((rx_outer + 54))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_14] = (((float3*)conv2d_nchw_local)[cse_var_14] + ((float3(((float*)pad_temp)[v__1.s0],((float*)pad_temp)[v__1.s1],((float*)pad_temp)[v__1.s2])) * ((float3)(((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11]))));\n          int32_t3 v__2 = int32_t3(((rx_outer + 108))+(3*0), ((rx_outer + 108))+(3*1), ((rx_outer + 108))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_15] = (((float3*)conv2d_nchw_local)[cse_var_15] + ((float3(((float*)pad_temp)[v__2.s0],((float*)pad_temp)[v__2.s1],((float*)pad_temp)[v__2.s2])) * ((float3)(((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11]))));\n          int32_t3 v__3 = int32_t3(((rx_outer + 162))+(3*0), ((rx_outer + 162))+(3*1), ((rx_outer + 162))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_16] = (((float3*)conv2d_nchw_local)[cse_var_16] + ((float3(((float*)pad_temp)[v__3.s0],((float*)pad_temp)[v__3.s1],((float*)pad_temp)[v__3.s2])) * ((float3)(((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11]))));\n          int32_t3 v__4 = int32_t3(((rx_outer + 216))+(3*0), ((rx_outer + 216))+(3*1), ((rx_outer + 216))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_17] = (((float3*)conv2d_nchw_local)[cse_var_17] + ((float3(((float*)pad_temp)[v__4.s0],((float*)pad_temp)[v__4.s1],((float*)pad_temp)[v__4.s2])) * ((float3)(((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11]))));\n          int32_t3 v__5 = int32_t3(((rx_outer + 270))+(3*0), ((rx_outer + 270))+(3*1), ((rx_outer + 270))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_18] = (((float3*)conv2d_nchw_local)[cse_var_18] + ((float3(((float*)pad_temp)[v__5.s0],((float*)pad_temp)[v__5.s1],((float*)pad_temp)[v__5.s2])) * ((float3)(((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11]))));\n          int32_t3 v__6 = int32_t3(((rx_outer + 324))+(3*0), ((rx_outer + 324))+(3*1), ((rx_outer + 324))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_12] = (((float3*)conv2d_nchw_local)[cse_var_12] + ((float3(((float*)pad_temp)[v__6.s0],((float*)pad_temp)[v__6.s1],((float*)pad_temp)[v__6.s2])) * ((float3)(((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11]))));\n          int32_t3 v__7 = int32_t3(((rx_outer + 378))+(3*0), ((rx_outer + 378))+(3*1), ((rx_outer + 378))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_13] = (((float3*)conv2d_nchw_local)[cse_var_13] + ((float3(((float*)pad_temp)[v__7.s0],((float*)pad_temp)[v__7.s1],((float*)pad_temp)[v__7.s2])) * ((float3)(((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11], ((float*)kernel_1)[cse_var_11]))));\n          int32_t3 v__8 = int32_t3(((rx_outer + 9))+(3*0), ((rx_outer + 9))+(3*1), ((rx_outer + 9))+(3*2));\n          ((float3*)conv2d_nchw_local)[ff_c_outer_inner] = (((float3*)conv2d_nchw_local)[ff_c_outer_inner] + ((float3(((float*)pad_temp)[v__8.s0],((float*)pad_temp)[v__8.s1],((float*)pad_temp)[v__8.s2])) * ((float3)(((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8]))));\n          int32_t3 v__9 = int32_t3(((rx_outer + 63))+(3*0), ((rx_outer + 63))+(3*1), ((rx_outer + 63))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_14] = (((float3*)conv2d_nchw_local)[cse_var_14] + ((float3(((float*)pad_temp)[v__9.s0],((float*)pad_temp)[v__9.s1],((float*)pad_temp)[v__9.s2])) * ((float3)(((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8]))));\n          int32_t3 v__10 = int32_t3(((rx_outer + 117))+(3*0), ((rx_outer + 117))+(3*1), ((rx_outer + 117))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_15] = (((float3*)conv2d_nchw_local)[cse_var_15] + ((float3(((float*)pad_temp)[v__10.s0],((float*)pad_temp)[v__10.s1],((float*)pad_temp)[v__10.s2])) * ((float3)(((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8]))));\n          int32_t3 v__11 = int32_t3(((rx_outer + 171))+(3*0), ((rx_outer + 171))+(3*1), ((rx_outer + 171))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_16] = (((float3*)conv2d_nchw_local)[cse_var_16] + ((float3(((float*)pad_temp)[v__11.s0],((float*)pad_temp)[v__11.s1],((float*)pad_temp)[v__11.s2])) * ((float3)(((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8]))));\n          int32_t3 v__12 = int32_t3(((rx_outer + 225))+(3*0), ((rx_outer + 225))+(3*1), ((rx_outer + 225))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_17] = (((float3*)conv2d_nchw_local)[cse_var_17] + ((float3(((float*)pad_temp)[v__12.s0],((float*)pad_temp)[v__12.s1],((float*)pad_temp)[v__12.s2])) * ((float3)(((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8]))));\n          int32_t3 v__13 = int32_t3(((rx_outer + 279))+(3*0), ((rx_outer + 279))+(3*1), ((rx_outer + 279))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_18] = (((float3*)conv2d_nchw_local)[cse_var_18] + ((float3(((float*)pad_temp)[v__13.s0],((float*)pad_temp)[v__13.s1],((float*)pad_temp)[v__13.s2])) * ((float3)(((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8]))));\n          int32_t3 v__14 = int32_t3(((rx_outer + 333))+(3*0), ((rx_outer + 333))+(3*1), ((rx_outer + 333))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_12] = (((float3*)conv2d_nchw_local)[cse_var_12] + ((float3(((float*)pad_temp)[v__14.s0],((float*)pad_temp)[v__14.s1],((float*)pad_temp)[v__14.s2])) * ((float3)(((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8]))));\n          int32_t3 v__15 = int32_t3(((rx_outer + 387))+(3*0), ((rx_outer + 387))+(3*1), ((rx_outer + 387))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_13] = (((float3*)conv2d_nchw_local)[cse_var_13] + ((float3(((float*)pad_temp)[v__15.s0],((float*)pad_temp)[v__15.s1],((float*)pad_temp)[v__15.s2])) * ((float3)(((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8], ((float*)kernel_1)[cse_var_8]))));\n          int32_t3 v__16 = int32_t3(((rx_outer + 18))+(3*0), ((rx_outer + 18))+(3*1), ((rx_outer + 18))+(3*2));\n          ((float3*)conv2d_nchw_local)[ff_c_outer_inner] = (((float3*)conv2d_nchw_local)[ff_c_outer_inner] + ((float3(((float*)pad_temp)[v__16.s0],((float*)pad_temp)[v__16.s1],((float*)pad_temp)[v__16.s2])) * ((float3)(((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9]))));\n          int32_t3 v__17 = int32_t3(((rx_outer + 72))+(3*0), ((rx_outer + 72))+(3*1), ((rx_outer + 72))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_14] = (((float3*)conv2d_nchw_local)[cse_var_14] + ((float3(((float*)pad_temp)[v__17.s0],((float*)pad_temp)[v__17.s1],((float*)pad_temp)[v__17.s2])) * ((float3)(((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9]))));\n          int32_t3 v__18 = int32_t3(((rx_outer + 126))+(3*0), ((rx_outer + 126))+(3*1), ((rx_outer + 126))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_15] = (((float3*)conv2d_nchw_local)[cse_var_15] + ((float3(((float*)pad_temp)[v__18.s0],((float*)pad_temp)[v__18.s1],((float*)pad_temp)[v__18.s2])) * ((float3)(((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9]))));\n          int32_t3 v__19 = int32_t3(((rx_outer + 180))+(3*0), ((rx_outer + 180))+(3*1), ((rx_outer + 180))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_16] = (((float3*)conv2d_nchw_local)[cse_var_16] + ((float3(((float*)pad_temp)[v__19.s0],((float*)pad_temp)[v__19.s1],((float*)pad_temp)[v__19.s2])) * ((float3)(((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9]))));\n          int32_t3 v__20 = int32_t3(((rx_outer + 234))+(3*0), ((rx_outer + 234))+(3*1), ((rx_outer + 234))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_17] = (((float3*)conv2d_nchw_local)[cse_var_17] + ((float3(((float*)pad_temp)[v__20.s0],((float*)pad_temp)[v__20.s1],((float*)pad_temp)[v__20.s2])) * ((float3)(((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9]))));\n          int32_t3 v__21 = int32_t3(((rx_outer + 288))+(3*0), ((rx_outer + 288))+(3*1), ((rx_outer + 288))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_18] = (((float3*)conv2d_nchw_local)[cse_var_18] + ((float3(((float*)pad_temp)[v__21.s0],((float*)pad_temp)[v__21.s1],((float*)pad_temp)[v__21.s2])) * ((float3)(((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9]))));\n          int32_t3 v__22 = int32_t3(((rx_outer + 342))+(3*0), ((rx_outer + 342))+(3*1), ((rx_outer + 342))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_12] = (((float3*)conv2d_nchw_local)[cse_var_12] + ((float3(((float*)pad_temp)[v__22.s0],((float*)pad_temp)[v__22.s1],((float*)pad_temp)[v__22.s2])) * ((float3)(((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9]))));\n          int32_t3 v__23 = int32_t3(((rx_outer + 396))+(3*0), ((rx_outer + 396))+(3*1), ((rx_outer + 396))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_13] = (((float3*)conv2d_nchw_local)[cse_var_13] + ((float3(((float*)pad_temp)[v__23.s0],((float*)pad_temp)[v__23.s1],((float*)pad_temp)[v__23.s2])) * ((float3)(((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9], ((float*)kernel_1)[cse_var_9]))));\n          int32_t3 v__24 = int32_t3(((rx_outer + 27))+(3*0), ((rx_outer + 27))+(3*1), ((rx_outer + 27))+(3*2));\n          ((float3*)conv2d_nchw_local)[ff_c_outer_inner] = (((float3*)conv2d_nchw_local)[ff_c_outer_inner] + ((float3(((float*)pad_temp)[v__24.s0],((float*)pad_temp)[v__24.s1],((float*)pad_temp)[v__24.s2])) * ((float3)(((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10]))));\n          int32_t3 v__25 = int32_t3(((rx_outer + 81))+(3*0), ((rx_outer + 81))+(3*1), ((rx_outer + 81))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_14] = (((float3*)conv2d_nchw_local)[cse_var_14] + ((float3(((float*)pad_temp)[v__25.s0],((float*)pad_temp)[v__25.s1],((float*)pad_temp)[v__25.s2])) * ((float3)(((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10]))));\n          int32_t3 v__26 = int32_t3(((rx_outer + 135))+(3*0), ((rx_outer + 135))+(3*1), ((rx_outer + 135))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_15] = (((float3*)conv2d_nchw_local)[cse_var_15] + ((float3(((float*)pad_temp)[v__26.s0],((float*)pad_temp)[v__26.s1],((float*)pad_temp)[v__26.s2])) * ((float3)(((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10]))));\n          int32_t3 v__27 = int32_t3(((rx_outer + 189))+(3*0), ((rx_outer + 189))+(3*1), ((rx_outer + 189))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_16] = (((float3*)conv2d_nchw_local)[cse_var_16] + ((float3(((float*)pad_temp)[v__27.s0],((float*)pad_temp)[v__27.s1],((float*)pad_temp)[v__27.s2])) * ((float3)(((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10]))));\n          int32_t3 v__28 = int32_t3(((rx_outer + 243))+(3*0), ((rx_outer + 243))+(3*1), ((rx_outer + 243))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_17] = (((float3*)conv2d_nchw_local)[cse_var_17] + ((float3(((float*)pad_temp)[v__28.s0],((float*)pad_temp)[v__28.s1],((float*)pad_temp)[v__28.s2])) * ((float3)(((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10]))));\n          int32_t3 v__29 = int32_t3(((rx_outer + 297))+(3*0), ((rx_outer + 297))+(3*1), ((rx_outer + 297))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_18] = (((float3*)conv2d_nchw_local)[cse_var_18] + ((float3(((float*)pad_temp)[v__29.s0],((float*)pad_temp)[v__29.s1],((float*)pad_temp)[v__29.s2])) * ((float3)(((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10]))));\n          int32_t3 v__30 = int32_t3(((rx_outer + 351))+(3*0), ((rx_outer + 351))+(3*1), ((rx_outer + 351))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_12] = (((float3*)conv2d_nchw_local)[cse_var_12] + ((float3(((float*)pad_temp)[v__30.s0],((float*)pad_temp)[v__30.s1],((float*)pad_temp)[v__30.s2])) * ((float3)(((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10]))));\n          int32_t3 v__31 = int32_t3(((rx_outer + 405))+(3*0), ((rx_outer + 405))+(3*1), ((rx_outer + 405))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_13] = (((float3*)conv2d_nchw_local)[cse_var_13] + ((float3(((float*)pad_temp)[v__31.s0],((float*)pad_temp)[v__31.s1],((float*)pad_temp)[v__31.s2])) * ((float3)(((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10], ((float*)kernel_1)[cse_var_10]))));\n          int32_t3 v__32 = int32_t3(((rx_outer + 36))+(3*0), ((rx_outer + 36))+(3*1), ((rx_outer + 36))+(3*2));\n          ((float3*)conv2d_nchw_local)[ff_c_outer_inner] = (((float3*)conv2d_nchw_local)[ff_c_outer_inner] + ((float3(((float*)pad_temp)[v__32.s0],((float*)pad_temp)[v__32.s1],((float*)pad_temp)[v__32.s2])) * ((float3)(((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6]))));\n          int32_t3 v__33 = int32_t3(((rx_outer + 90))+(3*0), ((rx_outer + 90))+(3*1), ((rx_outer + 90))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_14] = (((float3*)conv2d_nchw_local)[cse_var_14] + ((float3(((float*)pad_temp)[v__33.s0],((float*)pad_temp)[v__33.s1],((float*)pad_temp)[v__33.s2])) * ((float3)(((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6]))));\n          int32_t3 v__34 = int32_t3(((rx_outer + 144))+(3*0), ((rx_outer + 144))+(3*1), ((rx_outer + 144))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_15] = (((float3*)conv2d_nchw_local)[cse_var_15] + ((float3(((float*)pad_temp)[v__34.s0],((float*)pad_temp)[v__34.s1],((float*)pad_temp)[v__34.s2])) * ((float3)(((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6]))));\n          int32_t3 v__35 = int32_t3(((rx_outer + 198))+(3*0), ((rx_outer + 198))+(3*1), ((rx_outer + 198))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_16] = (((float3*)conv2d_nchw_local)[cse_var_16] + ((float3(((float*)pad_temp)[v__35.s0],((float*)pad_temp)[v__35.s1],((float*)pad_temp)[v__35.s2])) * ((float3)(((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6]))));\n          int32_t3 v__36 = int32_t3(((rx_outer + 252))+(3*0), ((rx_outer + 252))+(3*1), ((rx_outer + 252))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_17] = (((float3*)conv2d_nchw_local)[cse_var_17] + ((float3(((float*)pad_temp)[v__36.s0],((float*)pad_temp)[v__36.s1],((float*)pad_temp)[v__36.s2])) * ((float3)(((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6]))));\n          int32_t3 v__37 = int32_t3(((rx_outer + 306))+(3*0), ((rx_outer + 306))+(3*1), ((rx_outer + 306))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_18] = (((float3*)conv2d_nchw_local)[cse_var_18] + ((float3(((float*)pad_temp)[v__37.s0],((float*)pad_temp)[v__37.s1],((float*)pad_temp)[v__37.s2])) * ((float3)(((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6]))));\n          int32_t3 v__38 = int32_t3(((rx_outer + 360))+(3*0), ((rx_outer + 360))+(3*1), ((rx_outer + 360))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_12] = (((float3*)conv2d_nchw_local)[cse_var_12] + ((float3(((float*)pad_temp)[v__38.s0],((float*)pad_temp)[v__38.s1],((float*)pad_temp)[v__38.s2])) * ((float3)(((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6]))));\n          int32_t3 v__39 = int32_t3(((rx_outer + 414))+(3*0), ((rx_outer + 414))+(3*1), ((rx_outer + 414))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_13] = (((float3*)conv2d_nchw_local)[cse_var_13] + ((float3(((float*)pad_temp)[v__39.s0],((float*)pad_temp)[v__39.s1],((float*)pad_temp)[v__39.s2])) * ((float3)(((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6], ((float*)kernel_1)[cse_var_6]))));\n          int32_t3 v__40 = int32_t3(((rx_outer + 45))+(3*0), ((rx_outer + 45))+(3*1), ((rx_outer + 45))+(3*2));\n          ((float3*)conv2d_nchw_local)[ff_c_outer_inner] = (((float3*)conv2d_nchw_local)[ff_c_outer_inner] + ((float3(((float*)pad_temp)[v__40.s0],((float*)pad_temp)[v__40.s1],((float*)pad_temp)[v__40.s2])) * ((float3)(((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7]))));\n          int32_t3 v__41 = int32_t3(((rx_outer + 99))+(3*0), ((rx_outer + 99))+(3*1), ((rx_outer + 99))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_14] = (((float3*)conv2d_nchw_local)[cse_var_14] + ((float3(((float*)pad_temp)[v__41.s0],((float*)pad_temp)[v__41.s1],((float*)pad_temp)[v__41.s2])) * ((float3)(((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7]))));\n          int32_t3 v__42 = int32_t3(((rx_outer + 153))+(3*0), ((rx_outer + 153))+(3*1), ((rx_outer + 153))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_15] = (((float3*)conv2d_nchw_local)[cse_var_15] + ((float3(((float*)pad_temp)[v__42.s0],((float*)pad_temp)[v__42.s1],((float*)pad_temp)[v__42.s2])) * ((float3)(((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7]))));\n          int32_t3 v__43 = int32_t3(((rx_outer + 207))+(3*0), ((rx_outer + 207))+(3*1), ((rx_outer + 207))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_16] = (((float3*)conv2d_nchw_local)[cse_var_16] + ((float3(((float*)pad_temp)[v__43.s0],((float*)pad_temp)[v__43.s1],((float*)pad_temp)[v__43.s2])) * ((float3)(((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7]))));\n          int32_t3 v__44 = int32_t3(((rx_outer + 261))+(3*0), ((rx_outer + 261))+(3*1), ((rx_outer + 261))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_17] = (((float3*)conv2d_nchw_local)[cse_var_17] + ((float3(((float*)pad_temp)[v__44.s0],((float*)pad_temp)[v__44.s1],((float*)pad_temp)[v__44.s2])) * ((float3)(((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7]))));\n          int32_t3 v__45 = int32_t3(((rx_outer + 315))+(3*0), ((rx_outer + 315))+(3*1), ((rx_outer + 315))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_18] = (((float3*)conv2d_nchw_local)[cse_var_18] + ((float3(((float*)pad_temp)[v__45.s0],((float*)pad_temp)[v__45.s1],((float*)pad_temp)[v__45.s2])) * ((float3)(((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7]))));\n          int32_t3 v__46 = int32_t3(((rx_outer + 369))+(3*0), ((rx_outer + 369))+(3*1), ((rx_outer + 369))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_12] = (((float3*)conv2d_nchw_local)[cse_var_12] + ((float3(((float*)pad_temp)[v__46.s0],((float*)pad_temp)[v__46.s1],((float*)pad_temp)[v__46.s2])) * ((float3)(((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7]))));\n          int32_t3 v__47 = int32_t3(((rx_outer + 423))+(3*0), ((rx_outer + 423))+(3*1), ((rx_outer + 423))+(3*2));\n          ((float3*)conv2d_nchw_local)[cse_var_13] = (((float3*)conv2d_nchw_local)[cse_var_13] + ((float3(((float*)pad_temp)[v__47.s0],((float*)pad_temp)[v__47.s1],((float*)pad_temp)[v__47.s2])) * ((float3)(((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7], ((float*)kernel_1)[cse_var_7]))));\n        }\n      }\n    }\n    for (int32_t nn_inner = 0; nn_inner < 8; ++nn_inner) {\n      for (int32_t ff_inner = 0; ff_inner < 17; ++ff_inner) {\n        *(float3*)(((float*)conv2d_nchw_1) + ((((nn_inner * 612) + ((nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused / 3) * 153)) + (ff_inner * 9)) + ((nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused % 3) * 3))) = ((float3*)conv2d_nchw_local)[((nn_inner * 17) + ff_inner)];\n      }\n    }\n    if (TVMBackendFreeWorkspace(1, dev_id, pad_temp) != 0) {\n      return -1;\n    }\n    if (TVMBackendFreeWorkspace(1, dev_id, conv2d_nchw_local) != 0) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "conv2d[8__7__8__68__16__3__3__(3__3)__(1__1)]"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((1, 12, 8), \"float32\"), pool_max: T.Buffer((1, 12, 4), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        pad_temp = T.allocate([3], \"float32\", \"global\")\n        pad_temp_1 = T.Buffer((3,), data=pad_temp, align=8)\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        data_1 = T.Buffer((96,), data=data.data)\n        pad_temp_1[1] = data_1[0]\n        pad_temp_1[2] = data_1[1]\n        pool_max_1 = T.Buffer((48,), data=pool_max.data)\n        pool_max_1[0] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[0] = T.max(pool_max_1[0], pad_temp_1[0])\n        pool_max_1[0] = T.max(pool_max_1[0], pad_temp_1[1])\n        pool_max_1[0] = T.max(pool_max_1[0], pad_temp_1[2])\n        pad_temp_1[0] = data_1[1]\n        pad_temp_1[1] = data_1[2]\n        pad_temp_1[2] = data_1[3]\n        pool_max_1[1] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[1] = T.max(pool_max_1[1], pad_temp_1[0])\n        pool_max_1[1] = T.max(pool_max_1[1], pad_temp_1[1])\n        pool_max_1[1] = T.max(pool_max_1[1], pad_temp_1[2])\n        pad_temp_1[0] = data_1[3]\n        pad_temp_1[1] = data_1[4]\n        pad_temp_1[2] = data_1[5]\n        pool_max_1[2] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[2] = T.max(pool_max_1[2], pad_temp_1[0])\n        pool_max_1[2] = T.max(pool_max_1[2], pad_temp_1[1])\n        pool_max_1[2] = T.max(pool_max_1[2], pad_temp_1[2])\n        pad_temp_1[0] = data_1[5]\n        pad_temp_1[1] = data_1[6]\n        pad_temp_1[2] = data_1[7]\n        pool_max_1[3] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[3] = T.max(pool_max_1[3], pad_temp_1[0])\n        pool_max_1[3] = T.max(pool_max_1[3], pad_temp_1[1])\n        pool_max_1[3] = T.max(pool_max_1[3], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[8]\n        pad_temp_1[2] = data_1[9]\n        pool_max_1[4] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[4] = T.max(pool_max_1[4], pad_temp_1[0])\n        pool_max_1[4] = T.max(pool_max_1[4], pad_temp_1[1])\n        pool_max_1[4] = T.max(pool_max_1[4], pad_temp_1[2])\n        pad_temp_1[0] = data_1[9]\n        pad_temp_1[1] = data_1[10]\n        pad_temp_1[2] = data_1[11]\n        pool_max_1[5] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[5] = T.max(pool_max_1[5], pad_temp_1[0])\n        pool_max_1[5] = T.max(pool_max_1[5], pad_temp_1[1])\n        pool_max_1[5] = T.max(pool_max_1[5], pad_temp_1[2])\n        pad_temp_1[0] = data_1[11]\n        pad_temp_1[1] = data_1[12]\n        pad_temp_1[2] = data_1[13]\n        pool_max_1[6] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[6] = T.max(pool_max_1[6], pad_temp_1[0])\n        pool_max_1[6] = T.max(pool_max_1[6], pad_temp_1[1])\n        pool_max_1[6] = T.max(pool_max_1[6], pad_temp_1[2])\n        pad_temp_1[0] = data_1[13]\n        pad_temp_1[1] = data_1[14]\n        pad_temp_1[2] = data_1[15]\n        pool_max_1[7] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[7] = T.max(pool_max_1[7], pad_temp_1[0])\n        pool_max_1[7] = T.max(pool_max_1[7], pad_temp_1[1])\n        pool_max_1[7] = T.max(pool_max_1[7], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[16]\n        pad_temp_1[2] = data_1[17]\n        pool_max_1[8] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[8] = T.max(pool_max_1[8], pad_temp_1[0])\n        pool_max_1[8] = T.max(pool_max_1[8], pad_temp_1[1])\n        pool_max_1[8] = T.max(pool_max_1[8], pad_temp_1[2])\n        pad_temp_1[0] = data_1[17]\n        pad_temp_1[1] = data_1[18]\n        pad_temp_1[2] = data_1[19]\n        pool_max_1[9] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[9] = T.max(pool_max_1[9], pad_temp_1[0])\n        pool_max_1[9] = T.max(pool_max_1[9], pad_temp_1[1])\n        pool_max_1[9] = T.max(pool_max_1[9], pad_temp_1[2])\n        pad_temp_1[0] = data_1[19]\n        pad_temp_1[1] = data_1[20]\n        pad_temp_1[2] = data_1[21]\n        pool_max_1[10] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[10] = T.max(pool_max_1[10], pad_temp_1[0])\n        pool_max_1[10] = T.max(pool_max_1[10], pad_temp_1[1])\n        pool_max_1[10] = T.max(pool_max_1[10], pad_temp_1[2])\n        pad_temp_1[0] = data_1[21]\n        pad_temp_1[1] = data_1[22]\n        pad_temp_1[2] = data_1[23]\n        pool_max_1[11] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[11] = T.max(pool_max_1[11], pad_temp_1[0])\n        pool_max_1[11] = T.max(pool_max_1[11], pad_temp_1[1])\n        pool_max_1[11] = T.max(pool_max_1[11], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[24]\n        pad_temp_1[2] = data_1[25]\n        pool_max_1[12] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[12] = T.max(pool_max_1[12], pad_temp_1[0])\n        pool_max_1[12] = T.max(pool_max_1[12], pad_temp_1[1])\n        pool_max_1[12] = T.max(pool_max_1[12], pad_temp_1[2])\n        pad_temp_1[0] = data_1[25]\n        pad_temp_1[1] = data_1[26]\n        pad_temp_1[2] = data_1[27]\n        pool_max_1[13] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[13] = T.max(pool_max_1[13], pad_temp_1[0])\n        pool_max_1[13] = T.max(pool_max_1[13], pad_temp_1[1])\n        pool_max_1[13] = T.max(pool_max_1[13], pad_temp_1[2])\n        pad_temp_1[0] = data_1[27]\n        pad_temp_1[1] = data_1[28]\n        pad_temp_1[2] = data_1[29]\n        pool_max_1[14] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[14] = T.max(pool_max_1[14], pad_temp_1[0])\n        pool_max_1[14] = T.max(pool_max_1[14], pad_temp_1[1])\n        pool_max_1[14] = T.max(pool_max_1[14], pad_temp_1[2])\n        pad_temp_1[0] = data_1[29]\n        pad_temp_1[1] = data_1[30]\n        pad_temp_1[2] = data_1[31]\n        pool_max_1[15] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[15] = T.max(pool_max_1[15], pad_temp_1[0])\n        pool_max_1[15] = T.max(pool_max_1[15], pad_temp_1[1])\n        pool_max_1[15] = T.max(pool_max_1[15], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[32]\n        pad_temp_1[2] = data_1[33]\n        pool_max_1[16] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[16] = T.max(pool_max_1[16], pad_temp_1[0])\n        pool_max_1[16] = T.max(pool_max_1[16], pad_temp_1[1])\n        pool_max_1[16] = T.max(pool_max_1[16], pad_temp_1[2])\n        pad_temp_1[0] = data_1[33]\n        pad_temp_1[1] = data_1[34]\n        pad_temp_1[2] = data_1[35]\n        pool_max_1[17] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[17] = T.max(pool_max_1[17], pad_temp_1[0])\n        pool_max_1[17] = T.max(pool_max_1[17], pad_temp_1[1])\n        pool_max_1[17] = T.max(pool_max_1[17], pad_temp_1[2])\n        pad_temp_1[0] = data_1[35]\n        pad_temp_1[1] = data_1[36]\n        pad_temp_1[2] = data_1[37]\n        pool_max_1[18] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[18] = T.max(pool_max_1[18], pad_temp_1[0])\n        pool_max_1[18] = T.max(pool_max_1[18], pad_temp_1[1])\n        pool_max_1[18] = T.max(pool_max_1[18], pad_temp_1[2])\n        pad_temp_1[0] = data_1[37]\n        pad_temp_1[1] = data_1[38]\n        pad_temp_1[2] = data_1[39]\n        pool_max_1[19] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[19] = T.max(pool_max_1[19], pad_temp_1[0])\n        pool_max_1[19] = T.max(pool_max_1[19], pad_temp_1[1])\n        pool_max_1[19] = T.max(pool_max_1[19], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[40]\n        pad_temp_1[2] = data_1[41]\n        pool_max_1[20] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[20] = T.max(pool_max_1[20], pad_temp_1[0])\n        pool_max_1[20] = T.max(pool_max_1[20], pad_temp_1[1])\n        pool_max_1[20] = T.max(pool_max_1[20], pad_temp_1[2])\n        pad_temp_1[0] = data_1[41]\n        pad_temp_1[1] = data_1[42]\n        pad_temp_1[2] = data_1[43]\n        pool_max_1[21] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[21] = T.max(pool_max_1[21], pad_temp_1[0])\n        pool_max_1[21] = T.max(pool_max_1[21], pad_temp_1[1])\n        pool_max_1[21] = T.max(pool_max_1[21], pad_temp_1[2])\n        pad_temp_1[0] = data_1[43]\n        pad_temp_1[1] = data_1[44]\n        pad_temp_1[2] = data_1[45]\n        pool_max_1[22] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[22] = T.max(pool_max_1[22], pad_temp_1[0])\n        pool_max_1[22] = T.max(pool_max_1[22], pad_temp_1[1])\n        pool_max_1[22] = T.max(pool_max_1[22], pad_temp_1[2])\n        pad_temp_1[0] = data_1[45]\n        pad_temp_1[1] = data_1[46]\n        pad_temp_1[2] = data_1[47]\n        pool_max_1[23] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[23] = T.max(pool_max_1[23], pad_temp_1[0])\n        pool_max_1[23] = T.max(pool_max_1[23], pad_temp_1[1])\n        pool_max_1[23] = T.max(pool_max_1[23], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[48]\n        pad_temp_1[2] = data_1[49]\n        pool_max_1[24] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[24] = T.max(pool_max_1[24], pad_temp_1[0])\n        pool_max_1[24] = T.max(pool_max_1[24], pad_temp_1[1])\n        pool_max_1[24] = T.max(pool_max_1[24], pad_temp_1[2])\n        pad_temp_1[0] = data_1[49]\n        pad_temp_1[1] = data_1[50]\n        pad_temp_1[2] = data_1[51]\n        pool_max_1[25] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[25] = T.max(pool_max_1[25], pad_temp_1[0])\n        pool_max_1[25] = T.max(pool_max_1[25], pad_temp_1[1])\n        pool_max_1[25] = T.max(pool_max_1[25], pad_temp_1[2])\n        pad_temp_1[0] = data_1[51]\n        pad_temp_1[1] = data_1[52]\n        pad_temp_1[2] = data_1[53]\n        pool_max_1[26] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[26] = T.max(pool_max_1[26], pad_temp_1[0])\n        pool_max_1[26] = T.max(pool_max_1[26], pad_temp_1[1])\n        pool_max_1[26] = T.max(pool_max_1[26], pad_temp_1[2])\n        pad_temp_1[0] = data_1[53]\n        pad_temp_1[1] = data_1[54]\n        pad_temp_1[2] = data_1[55]\n        pool_max_1[27] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[27] = T.max(pool_max_1[27], pad_temp_1[0])\n        pool_max_1[27] = T.max(pool_max_1[27], pad_temp_1[1])\n        pool_max_1[27] = T.max(pool_max_1[27], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[56]\n        pad_temp_1[2] = data_1[57]\n        pool_max_1[28] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[28] = T.max(pool_max_1[28], pad_temp_1[0])\n        pool_max_1[28] = T.max(pool_max_1[28], pad_temp_1[1])\n        pool_max_1[28] = T.max(pool_max_1[28], pad_temp_1[2])\n        pad_temp_1[0] = data_1[57]\n        pad_temp_1[1] = data_1[58]\n        pad_temp_1[2] = data_1[59]\n        pool_max_1[29] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[29] = T.max(pool_max_1[29], pad_temp_1[0])\n        pool_max_1[29] = T.max(pool_max_1[29], pad_temp_1[1])\n        pool_max_1[29] = T.max(pool_max_1[29], pad_temp_1[2])\n        pad_temp_1[0] = data_1[59]\n        pad_temp_1[1] = data_1[60]\n        pad_temp_1[2] = data_1[61]\n        pool_max_1[30] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[30] = T.max(pool_max_1[30], pad_temp_1[0])\n        pool_max_1[30] = T.max(pool_max_1[30], pad_temp_1[1])\n        pool_max_1[30] = T.max(pool_max_1[30], pad_temp_1[2])\n        pad_temp_1[0] = data_1[61]\n        pad_temp_1[1] = data_1[62]\n        pad_temp_1[2] = data_1[63]\n        pool_max_1[31] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[31] = T.max(pool_max_1[31], pad_temp_1[0])\n        pool_max_1[31] = T.max(pool_max_1[31], pad_temp_1[1])\n        pool_max_1[31] = T.max(pool_max_1[31], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[64]\n        pad_temp_1[2] = data_1[65]\n        pool_max_1[32] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[32] = T.max(pool_max_1[32], pad_temp_1[0])\n        pool_max_1[32] = T.max(pool_max_1[32], pad_temp_1[1])\n        pool_max_1[32] = T.max(pool_max_1[32], pad_temp_1[2])\n        pad_temp_1[0] = data_1[65]\n        pad_temp_1[1] = data_1[66]\n        pad_temp_1[2] = data_1[67]\n        pool_max_1[33] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[33] = T.max(pool_max_1[33], pad_temp_1[0])\n        pool_max_1[33] = T.max(pool_max_1[33], pad_temp_1[1])\n        pool_max_1[33] = T.max(pool_max_1[33], pad_temp_1[2])\n        pad_temp_1[0] = data_1[67]\n        pad_temp_1[1] = data_1[68]\n        pad_temp_1[2] = data_1[69]\n        pool_max_1[34] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[34] = T.max(pool_max_1[34], pad_temp_1[0])\n        pool_max_1[34] = T.max(pool_max_1[34], pad_temp_1[1])\n        pool_max_1[34] = T.max(pool_max_1[34], pad_temp_1[2])\n        pad_temp_1[0] = data_1[69]\n        pad_temp_1[1] = data_1[70]\n        pad_temp_1[2] = data_1[71]\n        pool_max_1[35] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[35] = T.max(pool_max_1[35], pad_temp_1[0])\n        pool_max_1[35] = T.max(pool_max_1[35], pad_temp_1[1])\n        pool_max_1[35] = T.max(pool_max_1[35], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[72]\n        pad_temp_1[2] = data_1[73]\n        pool_max_1[36] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[36] = T.max(pool_max_1[36], pad_temp_1[0])\n        pool_max_1[36] = T.max(pool_max_1[36], pad_temp_1[1])\n        pool_max_1[36] = T.max(pool_max_1[36], pad_temp_1[2])\n        pad_temp_1[0] = data_1[73]\n        pad_temp_1[1] = data_1[74]\n        pad_temp_1[2] = data_1[75]\n        pool_max_1[37] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[37] = T.max(pool_max_1[37], pad_temp_1[0])\n        pool_max_1[37] = T.max(pool_max_1[37], pad_temp_1[1])\n        pool_max_1[37] = T.max(pool_max_1[37], pad_temp_1[2])\n        pad_temp_1[0] = data_1[75]\n        pad_temp_1[1] = data_1[76]\n        pad_temp_1[2] = data_1[77]\n        pool_max_1[38] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[38] = T.max(pool_max_1[38], pad_temp_1[0])\n        pool_max_1[38] = T.max(pool_max_1[38], pad_temp_1[1])\n        pool_max_1[38] = T.max(pool_max_1[38], pad_temp_1[2])\n        pad_temp_1[0] = data_1[77]\n        pad_temp_1[1] = data_1[78]\n        pad_temp_1[2] = data_1[79]\n        pool_max_1[39] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[39] = T.max(pool_max_1[39], pad_temp_1[0])\n        pool_max_1[39] = T.max(pool_max_1[39], pad_temp_1[1])\n        pool_max_1[39] = T.max(pool_max_1[39], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[80]\n        pad_temp_1[2] = data_1[81]\n        pool_max_1[40] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[40] = T.max(pool_max_1[40], pad_temp_1[0])\n        pool_max_1[40] = T.max(pool_max_1[40], pad_temp_1[1])\n        pool_max_1[40] = T.max(pool_max_1[40], pad_temp_1[2])\n        pad_temp_1[0] = data_1[81]\n        pad_temp_1[1] = data_1[82]\n        pad_temp_1[2] = data_1[83]\n        pool_max_1[41] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[41] = T.max(pool_max_1[41], pad_temp_1[0])\n        pool_max_1[41] = T.max(pool_max_1[41], pad_temp_1[1])\n        pool_max_1[41] = T.max(pool_max_1[41], pad_temp_1[2])\n        pad_temp_1[0] = data_1[83]\n        pad_temp_1[1] = data_1[84]\n        pad_temp_1[2] = data_1[85]\n        pool_max_1[42] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[42] = T.max(pool_max_1[42], pad_temp_1[0])\n        pool_max_1[42] = T.max(pool_max_1[42], pad_temp_1[1])\n        pool_max_1[42] = T.max(pool_max_1[42], pad_temp_1[2])\n        pad_temp_1[0] = data_1[85]\n        pad_temp_1[1] = data_1[86]\n        pad_temp_1[2] = data_1[87]\n        pool_max_1[43] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[43] = T.max(pool_max_1[43], pad_temp_1[0])\n        pool_max_1[43] = T.max(pool_max_1[43], pad_temp_1[1])\n        pool_max_1[43] = T.max(pool_max_1[43], pad_temp_1[2])\n        pad_temp_1[0] = T.float32(-3.4028234663852886e+38)\n        pad_temp_1[1] = data_1[88]\n        pad_temp_1[2] = data_1[89]\n        pool_max_1[44] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[44] = T.max(pool_max_1[44], pad_temp_1[0])\n        pool_max_1[44] = T.max(pool_max_1[44], pad_temp_1[1])\n        pool_max_1[44] = T.max(pool_max_1[44], pad_temp_1[2])\n        pad_temp_1[0] = data_1[89]\n        pad_temp_1[1] = data_1[90]\n        pad_temp_1[2] = data_1[91]\n        pool_max_1[45] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[45] = T.max(pool_max_1[45], pad_temp_1[0])\n        pool_max_1[45] = T.max(pool_max_1[45], pad_temp_1[1])\n        pool_max_1[45] = T.max(pool_max_1[45], pad_temp_1[2])\n        pad_temp_1[0] = data_1[91]\n        pad_temp_1[1] = data_1[92]\n        pad_temp_1[2] = data_1[93]\n        pool_max_1[46] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[46] = T.max(pool_max_1[46], pad_temp_1[0])\n        pool_max_1[46] = T.max(pool_max_1[46], pad_temp_1[1])\n        pool_max_1[46] = T.max(pool_max_1[46], pad_temp_1[2])\n        pad_temp_1[0] = data_1[93]\n        pad_temp_1[1] = data_1[94]\n        pad_temp_1[2] = data_1[95]\n        pool_max_1[47] = T.float32(-3.4028234663852886e+38)\n        pool_max_1[47] = T.max(pool_max_1[47], pad_temp_1[0])\n        pool_max_1[47] = T.max(pool_max_1[47], pad_temp_1[1])\n        pool_max_1[47] = T.max(pool_max_1[47], pad_temp_1[2])\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ data, float* __restrict__ pool_max);\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ data, float* __restrict__ pool_max) {\n  pool_max[((int)threadIdx.x)] = -3.402823e+38f;\n  for (int rv0 = 0; rv0 < 3; ++rv0) {\n    pool_max[((int)threadIdx.x)] = max(pool_max[((int)threadIdx.x)], ((1 <= (((((int)threadIdx.x) & 3) * 2) + rv0)) ? data[(((((int)threadIdx.x) * 2) + rv0) - 1)] : -3.402823e+38f));\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t pool_max_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* pool_max = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* pool_max_1 = (((DLTensor*)pool_max)[0].data);\n  void* default_function_pool_max_shape = (((DLTensor*)pool_max)[0].shape);\n  void* default_function_pool_max_strides = (((DLTensor*)pool_max)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_pool_max_strides == NULL)) {\n  }\n  float pad_temp[3];\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[0];\n  pad_temp[2] = ((float*)data_1)[1];\n  ((float*)pool_max_1)[0] = -3.402823e+38f;\n  float v_ = ((float*)pool_max_1)[0];\n  float v__1 = pad_temp[0];\n  ((float*)pool_max_1)[0] = ((v_) > (v__1) ? (v_) : (v__1));\n  float v__2 = ((float*)pool_max_1)[0];\n  float v__3 = pad_temp[1];\n  ((float*)pool_max_1)[0] = ((v__2) > (v__3) ? (v__2) : (v__3));\n  float v__4 = ((float*)pool_max_1)[0];\n  float v__5 = pad_temp[2];\n  ((float*)pool_max_1)[0] = ((v__4) > (v__5) ? (v__4) : (v__5));\n  pad_temp[0] = ((float*)data_1)[1];\n  pad_temp[1] = ((float*)data_1)[2];\n  pad_temp[2] = ((float*)data_1)[3];\n  ((float*)pool_max_1)[1] = -3.402823e+38f;\n  float v__6 = ((float*)pool_max_1)[1];\n  float v__7 = pad_temp[0];\n  ((float*)pool_max_1)[1] = ((v__6) > (v__7) ? (v__6) : (v__7));\n  float v__8 = ((float*)pool_max_1)[1];\n  float v__9 = pad_temp[1];\n  ((float*)pool_max_1)[1] = ((v__8) > (v__9) ? (v__8) : (v__9));\n  float v__10 = ((float*)pool_max_1)[1];\n  float v__11 = pad_temp[2];\n  ((float*)pool_max_1)[1] = ((v__10) > (v__11) ? (v__10) : (v__11));\n  pad_temp[0] = ((float*)data_1)[3];\n  pad_temp[1] = ((float*)data_1)[4];\n  pad_temp[2] = ((float*)data_1)[5];\n  ((float*)pool_max_1)[2] = -3.402823e+38f;\n  float v__12 = ((float*)pool_max_1)[2];\n  float v__13 = pad_temp[0];\n  ((float*)pool_max_1)[2] = ((v__12) > (v__13) ? (v__12) : (v__13));\n  float v__14 = ((float*)pool_max_1)[2];\n  float v__15 = pad_temp[1];\n  ((float*)pool_max_1)[2] = ((v__14) > (v__15) ? (v__14) : (v__15));\n  float v__16 = ((float*)pool_max_1)[2];\n  float v__17 = pad_temp[2];\n  ((float*)pool_max_1)[2] = ((v__16) > (v__17) ? (v__16) : (v__17));\n  pad_temp[0] = ((float*)data_1)[5];\n  pad_temp[1] = ((float*)data_1)[6];\n  pad_temp[2] = ((float*)data_1)[7];\n  ((float*)pool_max_1)[3] = -3.402823e+38f;\n  float v__18 = ((float*)pool_max_1)[3];\n  float v__19 = pad_temp[0];\n  ((float*)pool_max_1)[3] = ((v__18) > (v__19) ? (v__18) : (v__19));\n  float v__20 = ((float*)pool_max_1)[3];\n  float v__21 = pad_temp[1];\n  ((float*)pool_max_1)[3] = ((v__20) > (v__21) ? (v__20) : (v__21));\n  float v__22 = ((float*)pool_max_1)[3];\n  float v__23 = pad_temp[2];\n  ((float*)pool_max_1)[3] = ((v__22) > (v__23) ? (v__22) : (v__23));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[8];\n  pad_temp[2] = ((float*)data_1)[9];\n  ((float*)pool_max_1)[4] = -3.402823e+38f;\n  float v__24 = ((float*)pool_max_1)[4];\n  float v__25 = pad_temp[0];\n  ((float*)pool_max_1)[4] = ((v__24) > (v__25) ? (v__24) : (v__25));\n  float v__26 = ((float*)pool_max_1)[4];\n  float v__27 = pad_temp[1];\n  ((float*)pool_max_1)[4] = ((v__26) > (v__27) ? (v__26) : (v__27));\n  float v__28 = ((float*)pool_max_1)[4];\n  float v__29 = pad_temp[2];\n  ((float*)pool_max_1)[4] = ((v__28) > (v__29) ? (v__28) : (v__29));\n  pad_temp[0] = ((float*)data_1)[9];\n  pad_temp[1] = ((float*)data_1)[10];\n  pad_temp[2] = ((float*)data_1)[11];\n  ((float*)pool_max_1)[5] = -3.402823e+38f;\n  float v__30 = ((float*)pool_max_1)[5];\n  float v__31 = pad_temp[0];\n  ((float*)pool_max_1)[5] = ((v__30) > (v__31) ? (v__30) : (v__31));\n  float v__32 = ((float*)pool_max_1)[5];\n  float v__33 = pad_temp[1];\n  ((float*)pool_max_1)[5] = ((v__32) > (v__33) ? (v__32) : (v__33));\n  float v__34 = ((float*)pool_max_1)[5];\n  float v__35 = pad_temp[2];\n  ((float*)pool_max_1)[5] = ((v__34) > (v__35) ? (v__34) : (v__35));\n  pad_temp[0] = ((float*)data_1)[11];\n  pad_temp[1] = ((float*)data_1)[12];\n  pad_temp[2] = ((float*)data_1)[13];\n  ((float*)pool_max_1)[6] = -3.402823e+38f;\n  float v__36 = ((float*)pool_max_1)[6];\n  float v__37 = pad_temp[0];\n  ((float*)pool_max_1)[6] = ((v__36) > (v__37) ? (v__36) : (v__37));\n  float v__38 = ((float*)pool_max_1)[6];\n  float v__39 = pad_temp[1];\n  ((float*)pool_max_1)[6] = ((v__38) > (v__39) ? (v__38) : (v__39));\n  float v__40 = ((float*)pool_max_1)[6];\n  float v__41 = pad_temp[2];\n  ((float*)pool_max_1)[6] = ((v__40) > (v__41) ? (v__40) : (v__41));\n  pad_temp[0] = ((float*)data_1)[13];\n  pad_temp[1] = ((float*)data_1)[14];\n  pad_temp[2] = ((float*)data_1)[15];\n  ((float*)pool_max_1)[7] = -3.402823e+38f;\n  float v__42 = ((float*)pool_max_1)[7];\n  float v__43 = pad_temp[0];\n  ((float*)pool_max_1)[7] = ((v__42) > (v__43) ? (v__42) : (v__43));\n  float v__44 = ((float*)pool_max_1)[7];\n  float v__45 = pad_temp[1];\n  ((float*)pool_max_1)[7] = ((v__44) > (v__45) ? (v__44) : (v__45));\n  float v__46 = ((float*)pool_max_1)[7];\n  float v__47 = pad_temp[2];\n  ((float*)pool_max_1)[7] = ((v__46) > (v__47) ? (v__46) : (v__47));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[16];\n  pad_temp[2] = ((float*)data_1)[17];\n  ((float*)pool_max_1)[8] = -3.402823e+38f;\n  float v__48 = ((float*)pool_max_1)[8];\n  float v__49 = pad_temp[0];\n  ((float*)pool_max_1)[8] = ((v__48) > (v__49) ? (v__48) : (v__49));\n  float v__50 = ((float*)pool_max_1)[8];\n  float v__51 = pad_temp[1];\n  ((float*)pool_max_1)[8] = ((v__50) > (v__51) ? (v__50) : (v__51));\n  float v__52 = ((float*)pool_max_1)[8];\n  float v__53 = pad_temp[2];\n  ((float*)pool_max_1)[8] = ((v__52) > (v__53) ? (v__52) : (v__53));\n  pad_temp[0] = ((float*)data_1)[17];\n  pad_temp[1] = ((float*)data_1)[18];\n  pad_temp[2] = ((float*)data_1)[19];\n  ((float*)pool_max_1)[9] = -3.402823e+38f;\n  float v__54 = ((float*)pool_max_1)[9];\n  float v__55 = pad_temp[0];\n  ((float*)pool_max_1)[9] = ((v__54) > (v__55) ? (v__54) : (v__55));\n  float v__56 = ((float*)pool_max_1)[9];\n  float v__57 = pad_temp[1];\n  ((float*)pool_max_1)[9] = ((v__56) > (v__57) ? (v__56) : (v__57));\n  float v__58 = ((float*)pool_max_1)[9];\n  float v__59 = pad_temp[2];\n  ((float*)pool_max_1)[9] = ((v__58) > (v__59) ? (v__58) : (v__59));\n  pad_temp[0] = ((float*)data_1)[19];\n  pad_temp[1] = ((float*)data_1)[20];\n  pad_temp[2] = ((float*)data_1)[21];\n  ((float*)pool_max_1)[10] = -3.402823e+38f;\n  float v__60 = ((float*)pool_max_1)[10];\n  float v__61 = pad_temp[0];\n  ((float*)pool_max_1)[10] = ((v__60) > (v__61) ? (v__60) : (v__61));\n  float v__62 = ((float*)pool_max_1)[10];\n  float v__63 = pad_temp[1];\n  ((float*)pool_max_1)[10] = ((v__62) > (v__63) ? (v__62) : (v__63));\n  float v__64 = ((float*)pool_max_1)[10];\n  float v__65 = pad_temp[2];\n  ((float*)pool_max_1)[10] = ((v__64) > (v__65) ? (v__64) : (v__65));\n  pad_temp[0] = ((float*)data_1)[21];\n  pad_temp[1] = ((float*)data_1)[22];\n  pad_temp[2] = ((float*)data_1)[23];\n  ((float*)pool_max_1)[11] = -3.402823e+38f;\n  float v__66 = ((float*)pool_max_1)[11];\n  float v__67 = pad_temp[0];\n  ((float*)pool_max_1)[11] = ((v__66) > (v__67) ? (v__66) : (v__67));\n  float v__68 = ((float*)pool_max_1)[11];\n  float v__69 = pad_temp[1];\n  ((float*)pool_max_1)[11] = ((v__68) > (v__69) ? (v__68) : (v__69));\n  float v__70 = ((float*)pool_max_1)[11];\n  float v__71 = pad_temp[2];\n  ((float*)pool_max_1)[11] = ((v__70) > (v__71) ? (v__70) : (v__71));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[24];\n  pad_temp[2] = ((float*)data_1)[25];\n  ((float*)pool_max_1)[12] = -3.402823e+38f;\n  float v__72 = ((float*)pool_max_1)[12];\n  float v__73 = pad_temp[0];\n  ((float*)pool_max_1)[12] = ((v__72) > (v__73) ? (v__72) : (v__73));\n  float v__74 = ((float*)pool_max_1)[12];\n  float v__75 = pad_temp[1];\n  ((float*)pool_max_1)[12] = ((v__74) > (v__75) ? (v__74) : (v__75));\n  float v__76 = ((float*)pool_max_1)[12];\n  float v__77 = pad_temp[2];\n  ((float*)pool_max_1)[12] = ((v__76) > (v__77) ? (v__76) : (v__77));\n  pad_temp[0] = ((float*)data_1)[25];\n  pad_temp[1] = ((float*)data_1)[26];\n  pad_temp[2] = ((float*)data_1)[27];\n  ((float*)pool_max_1)[13] = -3.402823e+38f;\n  float v__78 = ((float*)pool_max_1)[13];\n  float v__79 = pad_temp[0];\n  ((float*)pool_max_1)[13] = ((v__78) > (v__79) ? (v__78) : (v__79));\n  float v__80 = ((float*)pool_max_1)[13];\n  float v__81 = pad_temp[1];\n  ((float*)pool_max_1)[13] = ((v__80) > (v__81) ? (v__80) : (v__81));\n  float v__82 = ((float*)pool_max_1)[13];\n  float v__83 = pad_temp[2];\n  ((float*)pool_max_1)[13] = ((v__82) > (v__83) ? (v__82) : (v__83));\n  pad_temp[0] = ((float*)data_1)[27];\n  pad_temp[1] = ((float*)data_1)[28];\n  pad_temp[2] = ((float*)data_1)[29];\n  ((float*)pool_max_1)[14] = -3.402823e+38f;\n  float v__84 = ((float*)pool_max_1)[14];\n  float v__85 = pad_temp[0];\n  ((float*)pool_max_1)[14] = ((v__84) > (v__85) ? (v__84) : (v__85));\n  float v__86 = ((float*)pool_max_1)[14];\n  float v__87 = pad_temp[1];\n  ((float*)pool_max_1)[14] = ((v__86) > (v__87) ? (v__86) : (v__87));\n  float v__88 = ((float*)pool_max_1)[14];\n  float v__89 = pad_temp[2];\n  ((float*)pool_max_1)[14] = ((v__88) > (v__89) ? (v__88) : (v__89));\n  pad_temp[0] = ((float*)data_1)[29];\n  pad_temp[1] = ((float*)data_1)[30];\n  pad_temp[2] = ((float*)data_1)[31];\n  ((float*)pool_max_1)[15] = -3.402823e+38f;\n  float v__90 = ((float*)pool_max_1)[15];\n  float v__91 = pad_temp[0];\n  ((float*)pool_max_1)[15] = ((v__90) > (v__91) ? (v__90) : (v__91));\n  float v__92 = ((float*)pool_max_1)[15];\n  float v__93 = pad_temp[1];\n  ((float*)pool_max_1)[15] = ((v__92) > (v__93) ? (v__92) : (v__93));\n  float v__94 = ((float*)pool_max_1)[15];\n  float v__95 = pad_temp[2];\n  ((float*)pool_max_1)[15] = ((v__94) > (v__95) ? (v__94) : (v__95));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[32];\n  pad_temp[2] = ((float*)data_1)[33];\n  ((float*)pool_max_1)[16] = -3.402823e+38f;\n  float v__96 = ((float*)pool_max_1)[16];\n  float v__97 = pad_temp[0];\n  ((float*)pool_max_1)[16] = ((v__96) > (v__97) ? (v__96) : (v__97));\n  float v__98 = ((float*)pool_max_1)[16];\n  float v__99 = pad_temp[1];\n  ((float*)pool_max_1)[16] = ((v__98) > (v__99) ? (v__98) : (v__99));\n  float v__100 = ((float*)pool_max_1)[16];\n  float v__101 = pad_temp[2];\n  ((float*)pool_max_1)[16] = ((v__100) > (v__101) ? (v__100) : (v__101));\n  pad_temp[0] = ((float*)data_1)[33];\n  pad_temp[1] = ((float*)data_1)[34];\n  pad_temp[2] = ((float*)data_1)[35];\n  ((float*)pool_max_1)[17] = -3.402823e+38f;\n  float v__102 = ((float*)pool_max_1)[17];\n  float v__103 = pad_temp[0];\n  ((float*)pool_max_1)[17] = ((v__102) > (v__103) ? (v__102) : (v__103));\n  float v__104 = ((float*)pool_max_1)[17];\n  float v__105 = pad_temp[1];\n  ((float*)pool_max_1)[17] = ((v__104) > (v__105) ? (v__104) : (v__105));\n  float v__106 = ((float*)pool_max_1)[17];\n  float v__107 = pad_temp[2];\n  ((float*)pool_max_1)[17] = ((v__106) > (v__107) ? (v__106) : (v__107));\n  pad_temp[0] = ((float*)data_1)[35];\n  pad_temp[1] = ((float*)data_1)[36];\n  pad_temp[2] = ((float*)data_1)[37];\n  ((float*)pool_max_1)[18] = -3.402823e+38f;\n  float v__108 = ((float*)pool_max_1)[18];\n  float v__109 = pad_temp[0];\n  ((float*)pool_max_1)[18] = ((v__108) > (v__109) ? (v__108) : (v__109));\n  float v__110 = ((float*)pool_max_1)[18];\n  float v__111 = pad_temp[1];\n  ((float*)pool_max_1)[18] = ((v__110) > (v__111) ? (v__110) : (v__111));\n  float v__112 = ((float*)pool_max_1)[18];\n  float v__113 = pad_temp[2];\n  ((float*)pool_max_1)[18] = ((v__112) > (v__113) ? (v__112) : (v__113));\n  pad_temp[0] = ((float*)data_1)[37];\n  pad_temp[1] = ((float*)data_1)[38];\n  pad_temp[2] = ((float*)data_1)[39];\n  ((float*)pool_max_1)[19] = -3.402823e+38f;\n  float v__114 = ((float*)pool_max_1)[19];\n  float v__115 = pad_temp[0];\n  ((float*)pool_max_1)[19] = ((v__114) > (v__115) ? (v__114) : (v__115));\n  float v__116 = ((float*)pool_max_1)[19];\n  float v__117 = pad_temp[1];\n  ((float*)pool_max_1)[19] = ((v__116) > (v__117) ? (v__116) : (v__117));\n  float v__118 = ((float*)pool_max_1)[19];\n  float v__119 = pad_temp[2];\n  ((float*)pool_max_1)[19] = ((v__118) > (v__119) ? (v__118) : (v__119));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[40];\n  pad_temp[2] = ((float*)data_1)[41];\n  ((float*)pool_max_1)[20] = -3.402823e+38f;\n  float v__120 = ((float*)pool_max_1)[20];\n  float v__121 = pad_temp[0];\n  ((float*)pool_max_1)[20] = ((v__120) > (v__121) ? (v__120) : (v__121));\n  float v__122 = ((float*)pool_max_1)[20];\n  float v__123 = pad_temp[1];\n  ((float*)pool_max_1)[20] = ((v__122) > (v__123) ? (v__122) : (v__123));\n  float v__124 = ((float*)pool_max_1)[20];\n  float v__125 = pad_temp[2];\n  ((float*)pool_max_1)[20] = ((v__124) > (v__125) ? (v__124) : (v__125));\n  pad_temp[0] = ((float*)data_1)[41];\n  pad_temp[1] = ((float*)data_1)[42];\n  pad_temp[2] = ((float*)data_1)[43];\n  ((float*)pool_max_1)[21] = -3.402823e+38f;\n  float v__126 = ((float*)pool_max_1)[21];\n  float v__127 = pad_temp[0];\n  ((float*)pool_max_1)[21] = ((v__126) > (v__127) ? (v__126) : (v__127));\n  float v__128 = ((float*)pool_max_1)[21];\n  float v__129 = pad_temp[1];\n  ((float*)pool_max_1)[21] = ((v__128) > (v__129) ? (v__128) : (v__129));\n  float v__130 = ((float*)pool_max_1)[21];\n  float v__131 = pad_temp[2];\n  ((float*)pool_max_1)[21] = ((v__130) > (v__131) ? (v__130) : (v__131));\n  pad_temp[0] = ((float*)data_1)[43];\n  pad_temp[1] = ((float*)data_1)[44];\n  pad_temp[2] = ((float*)data_1)[45];\n  ((float*)pool_max_1)[22] = -3.402823e+38f;\n  float v__132 = ((float*)pool_max_1)[22];\n  float v__133 = pad_temp[0];\n  ((float*)pool_max_1)[22] = ((v__132) > (v__133) ? (v__132) : (v__133));\n  float v__134 = ((float*)pool_max_1)[22];\n  float v__135 = pad_temp[1];\n  ((float*)pool_max_1)[22] = ((v__134) > (v__135) ? (v__134) : (v__135));\n  float v__136 = ((float*)pool_max_1)[22];\n  float v__137 = pad_temp[2];\n  ((float*)pool_max_1)[22] = ((v__136) > (v__137) ? (v__136) : (v__137));\n  pad_temp[0] = ((float*)data_1)[45];\n  pad_temp[1] = ((float*)data_1)[46];\n  pad_temp[2] = ((float*)data_1)[47];\n  ((float*)pool_max_1)[23] = -3.402823e+38f;\n  float v__138 = ((float*)pool_max_1)[23];\n  float v__139 = pad_temp[0];\n  ((float*)pool_max_1)[23] = ((v__138) > (v__139) ? (v__138) : (v__139));\n  float v__140 = ((float*)pool_max_1)[23];\n  float v__141 = pad_temp[1];\n  ((float*)pool_max_1)[23] = ((v__140) > (v__141) ? (v__140) : (v__141));\n  float v__142 = ((float*)pool_max_1)[23];\n  float v__143 = pad_temp[2];\n  ((float*)pool_max_1)[23] = ((v__142) > (v__143) ? (v__142) : (v__143));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[48];\n  pad_temp[2] = ((float*)data_1)[49];\n  ((float*)pool_max_1)[24] = -3.402823e+38f;\n  float v__144 = ((float*)pool_max_1)[24];\n  float v__145 = pad_temp[0];\n  ((float*)pool_max_1)[24] = ((v__144) > (v__145) ? (v__144) : (v__145));\n  float v__146 = ((float*)pool_max_1)[24];\n  float v__147 = pad_temp[1];\n  ((float*)pool_max_1)[24] = ((v__146) > (v__147) ? (v__146) : (v__147));\n  float v__148 = ((float*)pool_max_1)[24];\n  float v__149 = pad_temp[2];\n  ((float*)pool_max_1)[24] = ((v__148) > (v__149) ? (v__148) : (v__149));\n  pad_temp[0] = ((float*)data_1)[49];\n  pad_temp[1] = ((float*)data_1)[50];\n  pad_temp[2] = ((float*)data_1)[51];\n  ((float*)pool_max_1)[25] = -3.402823e+38f;\n  float v__150 = ((float*)pool_max_1)[25];\n  float v__151 = pad_temp[0];\n  ((float*)pool_max_1)[25] = ((v__150) > (v__151) ? (v__150) : (v__151));\n  float v__152 = ((float*)pool_max_1)[25];\n  float v__153 = pad_temp[1];\n  ((float*)pool_max_1)[25] = ((v__152) > (v__153) ? (v__152) : (v__153));\n  float v__154 = ((float*)pool_max_1)[25];\n  float v__155 = pad_temp[2];\n  ((float*)pool_max_1)[25] = ((v__154) > (v__155) ? (v__154) : (v__155));\n  pad_temp[0] = ((float*)data_1)[51];\n  pad_temp[1] = ((float*)data_1)[52];\n  pad_temp[2] = ((float*)data_1)[53];\n  ((float*)pool_max_1)[26] = -3.402823e+38f;\n  float v__156 = ((float*)pool_max_1)[26];\n  float v__157 = pad_temp[0];\n  ((float*)pool_max_1)[26] = ((v__156) > (v__157) ? (v__156) : (v__157));\n  float v__158 = ((float*)pool_max_1)[26];\n  float v__159 = pad_temp[1];\n  ((float*)pool_max_1)[26] = ((v__158) > (v__159) ? (v__158) : (v__159));\n  float v__160 = ((float*)pool_max_1)[26];\n  float v__161 = pad_temp[2];\n  ((float*)pool_max_1)[26] = ((v__160) > (v__161) ? (v__160) : (v__161));\n  pad_temp[0] = ((float*)data_1)[53];\n  pad_temp[1] = ((float*)data_1)[54];\n  pad_temp[2] = ((float*)data_1)[55];\n  ((float*)pool_max_1)[27] = -3.402823e+38f;\n  float v__162 = ((float*)pool_max_1)[27];\n  float v__163 = pad_temp[0];\n  ((float*)pool_max_1)[27] = ((v__162) > (v__163) ? (v__162) : (v__163));\n  float v__164 = ((float*)pool_max_1)[27];\n  float v__165 = pad_temp[1];\n  ((float*)pool_max_1)[27] = ((v__164) > (v__165) ? (v__164) : (v__165));\n  float v__166 = ((float*)pool_max_1)[27];\n  float v__167 = pad_temp[2];\n  ((float*)pool_max_1)[27] = ((v__166) > (v__167) ? (v__166) : (v__167));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[56];\n  pad_temp[2] = ((float*)data_1)[57];\n  ((float*)pool_max_1)[28] = -3.402823e+38f;\n  float v__168 = ((float*)pool_max_1)[28];\n  float v__169 = pad_temp[0];\n  ((float*)pool_max_1)[28] = ((v__168) > (v__169) ? (v__168) : (v__169));\n  float v__170 = ((float*)pool_max_1)[28];\n  float v__171 = pad_temp[1];\n  ((float*)pool_max_1)[28] = ((v__170) > (v__171) ? (v__170) : (v__171));\n  float v__172 = ((float*)pool_max_1)[28];\n  float v__173 = pad_temp[2];\n  ((float*)pool_max_1)[28] = ((v__172) > (v__173) ? (v__172) : (v__173));\n  pad_temp[0] = ((float*)data_1)[57];\n  pad_temp[1] = ((float*)data_1)[58];\n  pad_temp[2] = ((float*)data_1)[59];\n  ((float*)pool_max_1)[29] = -3.402823e+38f;\n  float v__174 = ((float*)pool_max_1)[29];\n  float v__175 = pad_temp[0];\n  ((float*)pool_max_1)[29] = ((v__174) > (v__175) ? (v__174) : (v__175));\n  float v__176 = ((float*)pool_max_1)[29];\n  float v__177 = pad_temp[1];\n  ((float*)pool_max_1)[29] = ((v__176) > (v__177) ? (v__176) : (v__177));\n  float v__178 = ((float*)pool_max_1)[29];\n  float v__179 = pad_temp[2];\n  ((float*)pool_max_1)[29] = ((v__178) > (v__179) ? (v__178) : (v__179));\n  pad_temp[0] = ((float*)data_1)[59];\n  pad_temp[1] = ((float*)data_1)[60];\n  pad_temp[2] = ((float*)data_1)[61];\n  ((float*)pool_max_1)[30] = -3.402823e+38f;\n  float v__180 = ((float*)pool_max_1)[30];\n  float v__181 = pad_temp[0];\n  ((float*)pool_max_1)[30] = ((v__180) > (v__181) ? (v__180) : (v__181));\n  float v__182 = ((float*)pool_max_1)[30];\n  float v__183 = pad_temp[1];\n  ((float*)pool_max_1)[30] = ((v__182) > (v__183) ? (v__182) : (v__183));\n  float v__184 = ((float*)pool_max_1)[30];\n  float v__185 = pad_temp[2];\n  ((float*)pool_max_1)[30] = ((v__184) > (v__185) ? (v__184) : (v__185));\n  pad_temp[0] = ((float*)data_1)[61];\n  pad_temp[1] = ((float*)data_1)[62];\n  pad_temp[2] = ((float*)data_1)[63];\n  ((float*)pool_max_1)[31] = -3.402823e+38f;\n  float v__186 = ((float*)pool_max_1)[31];\n  float v__187 = pad_temp[0];\n  ((float*)pool_max_1)[31] = ((v__186) > (v__187) ? (v__186) : (v__187));\n  float v__188 = ((float*)pool_max_1)[31];\n  float v__189 = pad_temp[1];\n  ((float*)pool_max_1)[31] = ((v__188) > (v__189) ? (v__188) : (v__189));\n  float v__190 = ((float*)pool_max_1)[31];\n  float v__191 = pad_temp[2];\n  ((float*)pool_max_1)[31] = ((v__190) > (v__191) ? (v__190) : (v__191));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[64];\n  pad_temp[2] = ((float*)data_1)[65];\n  ((float*)pool_max_1)[32] = -3.402823e+38f;\n  float v__192 = ((float*)pool_max_1)[32];\n  float v__193 = pad_temp[0];\n  ((float*)pool_max_1)[32] = ((v__192) > (v__193) ? (v__192) : (v__193));\n  float v__194 = ((float*)pool_max_1)[32];\n  float v__195 = pad_temp[1];\n  ((float*)pool_max_1)[32] = ((v__194) > (v__195) ? (v__194) : (v__195));\n  float v__196 = ((float*)pool_max_1)[32];\n  float v__197 = pad_temp[2];\n  ((float*)pool_max_1)[32] = ((v__196) > (v__197) ? (v__196) : (v__197));\n  pad_temp[0] = ((float*)data_1)[65];\n  pad_temp[1] = ((float*)data_1)[66];\n  pad_temp[2] = ((float*)data_1)[67];\n  ((float*)pool_max_1)[33] = -3.402823e+38f;\n  float v__198 = ((float*)pool_max_1)[33];\n  float v__199 = pad_temp[0];\n  ((float*)pool_max_1)[33] = ((v__198) > (v__199) ? (v__198) : (v__199));\n  float v__200 = ((float*)pool_max_1)[33];\n  float v__201 = pad_temp[1];\n  ((float*)pool_max_1)[33] = ((v__200) > (v__201) ? (v__200) : (v__201));\n  float v__202 = ((float*)pool_max_1)[33];\n  float v__203 = pad_temp[2];\n  ((float*)pool_max_1)[33] = ((v__202) > (v__203) ? (v__202) : (v__203));\n  pad_temp[0] = ((float*)data_1)[67];\n  pad_temp[1] = ((float*)data_1)[68];\n  pad_temp[2] = ((float*)data_1)[69];\n  ((float*)pool_max_1)[34] = -3.402823e+38f;\n  float v__204 = ((float*)pool_max_1)[34];\n  float v__205 = pad_temp[0];\n  ((float*)pool_max_1)[34] = ((v__204) > (v__205) ? (v__204) : (v__205));\n  float v__206 = ((float*)pool_max_1)[34];\n  float v__207 = pad_temp[1];\n  ((float*)pool_max_1)[34] = ((v__206) > (v__207) ? (v__206) : (v__207));\n  float v__208 = ((float*)pool_max_1)[34];\n  float v__209 = pad_temp[2];\n  ((float*)pool_max_1)[34] = ((v__208) > (v__209) ? (v__208) : (v__209));\n  pad_temp[0] = ((float*)data_1)[69];\n  pad_temp[1] = ((float*)data_1)[70];\n  pad_temp[2] = ((float*)data_1)[71];\n  ((float*)pool_max_1)[35] = -3.402823e+38f;\n  float v__210 = ((float*)pool_max_1)[35];\n  float v__211 = pad_temp[0];\n  ((float*)pool_max_1)[35] = ((v__210) > (v__211) ? (v__210) : (v__211));\n  float v__212 = ((float*)pool_max_1)[35];\n  float v__213 = pad_temp[1];\n  ((float*)pool_max_1)[35] = ((v__212) > (v__213) ? (v__212) : (v__213));\n  float v__214 = ((float*)pool_max_1)[35];\n  float v__215 = pad_temp[2];\n  ((float*)pool_max_1)[35] = ((v__214) > (v__215) ? (v__214) : (v__215));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[72];\n  pad_temp[2] = ((float*)data_1)[73];\n  ((float*)pool_max_1)[36] = -3.402823e+38f;\n  float v__216 = ((float*)pool_max_1)[36];\n  float v__217 = pad_temp[0];\n  ((float*)pool_max_1)[36] = ((v__216) > (v__217) ? (v__216) : (v__217));\n  float v__218 = ((float*)pool_max_1)[36];\n  float v__219 = pad_temp[1];\n  ((float*)pool_max_1)[36] = ((v__218) > (v__219) ? (v__218) : (v__219));\n  float v__220 = ((float*)pool_max_1)[36];\n  float v__221 = pad_temp[2];\n  ((float*)pool_max_1)[36] = ((v__220) > (v__221) ? (v__220) : (v__221));\n  pad_temp[0] = ((float*)data_1)[73];\n  pad_temp[1] = ((float*)data_1)[74];\n  pad_temp[2] = ((float*)data_1)[75];\n  ((float*)pool_max_1)[37] = -3.402823e+38f;\n  float v__222 = ((float*)pool_max_1)[37];\n  float v__223 = pad_temp[0];\n  ((float*)pool_max_1)[37] = ((v__222) > (v__223) ? (v__222) : (v__223));\n  float v__224 = ((float*)pool_max_1)[37];\n  float v__225 = pad_temp[1];\n  ((float*)pool_max_1)[37] = ((v__224) > (v__225) ? (v__224) : (v__225));\n  float v__226 = ((float*)pool_max_1)[37];\n  float v__227 = pad_temp[2];\n  ((float*)pool_max_1)[37] = ((v__226) > (v__227) ? (v__226) : (v__227));\n  pad_temp[0] = ((float*)data_1)[75];\n  pad_temp[1] = ((float*)data_1)[76];\n  pad_temp[2] = ((float*)data_1)[77];\n  ((float*)pool_max_1)[38] = -3.402823e+38f;\n  float v__228 = ((float*)pool_max_1)[38];\n  float v__229 = pad_temp[0];\n  ((float*)pool_max_1)[38] = ((v__228) > (v__229) ? (v__228) : (v__229));\n  float v__230 = ((float*)pool_max_1)[38];\n  float v__231 = pad_temp[1];\n  ((float*)pool_max_1)[38] = ((v__230) > (v__231) ? (v__230) : (v__231));\n  float v__232 = ((float*)pool_max_1)[38];\n  float v__233 = pad_temp[2];\n  ((float*)pool_max_1)[38] = ((v__232) > (v__233) ? (v__232) : (v__233));\n  pad_temp[0] = ((float*)data_1)[77];\n  pad_temp[1] = ((float*)data_1)[78];\n  pad_temp[2] = ((float*)data_1)[79];\n  ((float*)pool_max_1)[39] = -3.402823e+38f;\n  float v__234 = ((float*)pool_max_1)[39];\n  float v__235 = pad_temp[0];\n  ((float*)pool_max_1)[39] = ((v__234) > (v__235) ? (v__234) : (v__235));\n  float v__236 = ((float*)pool_max_1)[39];\n  float v__237 = pad_temp[1];\n  ((float*)pool_max_1)[39] = ((v__236) > (v__237) ? (v__236) : (v__237));\n  float v__238 = ((float*)pool_max_1)[39];\n  float v__239 = pad_temp[2];\n  ((float*)pool_max_1)[39] = ((v__238) > (v__239) ? (v__238) : (v__239));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[80];\n  pad_temp[2] = ((float*)data_1)[81];\n  ((float*)pool_max_1)[40] = -3.402823e+38f;\n  float v__240 = ((float*)pool_max_1)[40];\n  float v__241 = pad_temp[0];\n  ((float*)pool_max_1)[40] = ((v__240) > (v__241) ? (v__240) : (v__241));\n  float v__242 = ((float*)pool_max_1)[40];\n  float v__243 = pad_temp[1];\n  ((float*)pool_max_1)[40] = ((v__242) > (v__243) ? (v__242) : (v__243));\n  float v__244 = ((float*)pool_max_1)[40];\n  float v__245 = pad_temp[2];\n  ((float*)pool_max_1)[40] = ((v__244) > (v__245) ? (v__244) : (v__245));\n  pad_temp[0] = ((float*)data_1)[81];\n  pad_temp[1] = ((float*)data_1)[82];\n  pad_temp[2] = ((float*)data_1)[83];\n  ((float*)pool_max_1)[41] = -3.402823e+38f;\n  float v__246 = ((float*)pool_max_1)[41];\n  float v__247 = pad_temp[0];\n  ((float*)pool_max_1)[41] = ((v__246) > (v__247) ? (v__246) : (v__247));\n  float v__248 = ((float*)pool_max_1)[41];\n  float v__249 = pad_temp[1];\n  ((float*)pool_max_1)[41] = ((v__248) > (v__249) ? (v__248) : (v__249));\n  float v__250 = ((float*)pool_max_1)[41];\n  float v__251 = pad_temp[2];\n  ((float*)pool_max_1)[41] = ((v__250) > (v__251) ? (v__250) : (v__251));\n  pad_temp[0] = ((float*)data_1)[83];\n  pad_temp[1] = ((float*)data_1)[84];\n  pad_temp[2] = ((float*)data_1)[85];\n  ((float*)pool_max_1)[42] = -3.402823e+38f;\n  float v__252 = ((float*)pool_max_1)[42];\n  float v__253 = pad_temp[0];\n  ((float*)pool_max_1)[42] = ((v__252) > (v__253) ? (v__252) : (v__253));\n  float v__254 = ((float*)pool_max_1)[42];\n  float v__255 = pad_temp[1];\n  ((float*)pool_max_1)[42] = ((v__254) > (v__255) ? (v__254) : (v__255));\n  float v__256 = ((float*)pool_max_1)[42];\n  float v__257 = pad_temp[2];\n  ((float*)pool_max_1)[42] = ((v__256) > (v__257) ? (v__256) : (v__257));\n  pad_temp[0] = ((float*)data_1)[85];\n  pad_temp[1] = ((float*)data_1)[86];\n  pad_temp[2] = ((float*)data_1)[87];\n  ((float*)pool_max_1)[43] = -3.402823e+38f;\n  float v__258 = ((float*)pool_max_1)[43];\n  float v__259 = pad_temp[0];\n  ((float*)pool_max_1)[43] = ((v__258) > (v__259) ? (v__258) : (v__259));\n  float v__260 = ((float*)pool_max_1)[43];\n  float v__261 = pad_temp[1];\n  ((float*)pool_max_1)[43] = ((v__260) > (v__261) ? (v__260) : (v__261));\n  float v__262 = ((float*)pool_max_1)[43];\n  float v__263 = pad_temp[2];\n  ((float*)pool_max_1)[43] = ((v__262) > (v__263) ? (v__262) : (v__263));\n  pad_temp[0] = -3.402823e+38f;\n  pad_temp[1] = ((float*)data_1)[88];\n  pad_temp[2] = ((float*)data_1)[89];\n  ((float*)pool_max_1)[44] = -3.402823e+38f;\n  float v__264 = ((float*)pool_max_1)[44];\n  float v__265 = pad_temp[0];\n  ((float*)pool_max_1)[44] = ((v__264) > (v__265) ? (v__264) : (v__265));\n  float v__266 = ((float*)pool_max_1)[44];\n  float v__267 = pad_temp[1];\n  ((float*)pool_max_1)[44] = ((v__266) > (v__267) ? (v__266) : (v__267));\n  float v__268 = ((float*)pool_max_1)[44];\n  float v__269 = pad_temp[2];\n  ((float*)pool_max_1)[44] = ((v__268) > (v__269) ? (v__268) : (v__269));\n  pad_temp[0] = ((float*)data_1)[89];\n  pad_temp[1] = ((float*)data_1)[90];\n  pad_temp[2] = ((float*)data_1)[91];\n  ((float*)pool_max_1)[45] = -3.402823e+38f;\n  float v__270 = ((float*)pool_max_1)[45];\n  float v__271 = pad_temp[0];\n  ((float*)pool_max_1)[45] = ((v__270) > (v__271) ? (v__270) : (v__271));\n  float v__272 = ((float*)pool_max_1)[45];\n  float v__273 = pad_temp[1];\n  ((float*)pool_max_1)[45] = ((v__272) > (v__273) ? (v__272) : (v__273));\n  float v__274 = ((float*)pool_max_1)[45];\n  float v__275 = pad_temp[2];\n  ((float*)pool_max_1)[45] = ((v__274) > (v__275) ? (v__274) : (v__275));\n  pad_temp[0] = ((float*)data_1)[91];\n  pad_temp[1] = ((float*)data_1)[92];\n  pad_temp[2] = ((float*)data_1)[93];\n  ((float*)pool_max_1)[46] = -3.402823e+38f;\n  float v__276 = ((float*)pool_max_1)[46];\n  float v__277 = pad_temp[0];\n  ((float*)pool_max_1)[46] = ((v__276) > (v__277) ? (v__276) : (v__277));\n  float v__278 = ((float*)pool_max_1)[46];\n  float v__279 = pad_temp[1];\n  ((float*)pool_max_1)[46] = ((v__278) > (v__279) ? (v__278) : (v__279));\n  float v__280 = ((float*)pool_max_1)[46];\n  float v__281 = pad_temp[2];\n  ((float*)pool_max_1)[46] = ((v__280) > (v__281) ? (v__280) : (v__281));\n  pad_temp[0] = ((float*)data_1)[93];\n  pad_temp[1] = ((float*)data_1)[94];\n  pad_temp[2] = ((float*)data_1)[95];\n  ((float*)pool_max_1)[47] = -3.402823e+38f;\n  float v__282 = ((float*)pool_max_1)[47];\n  float v__283 = pad_temp[0];\n  ((float*)pool_max_1)[47] = ((v__282) > (v__283) ? (v__282) : (v__283));\n  float v__284 = ((float*)pool_max_1)[47];\n  float v__285 = pad_temp[1];\n  ((float*)pool_max_1)[47] = ((v__284) > (v__285) ? (v__284) : (v__285));\n  float v__286 = ((float*)pool_max_1)[47];\n  float v__287 = pad_temp[2];\n  ((float*)pool_max_1)[47] = ((v__286) > (v__287) ? (v__286) : (v__287));\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "pool1d[1__12__16__8]"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((5, 40, 16, 20), \"float32\"), compute: T.Buffer((5, 40, 16, 20), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused_i2_fused in T.parallel(3200):\n            for i3 in range(20):\n                cse_var_1: T.int32 = i0_i1_fused_i2_fused * 20 + i3\n                compute_1 = T.Buffer((64000,), data=compute.data)\n                data_1 = T.Buffer((64000,), data=data.data)\n                compute_1[cse_var_1] = T.if_then_else(T.float32(0) < data_1[cse_var_1], data_1[cse_var_1], data_1[cse_var_1] * T.float32(0.5))\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ data) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = ((0.000000e+00f < data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]) ? data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] : (data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] * 5.000000e-01f));\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t compute_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* compute = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* compute_1 = (((DLTensor*)compute)[0].data);\n  void* default_function_compute_shape = (((DLTensor*)compute)[0].shape);\n  void* default_function_compute_strides = (((DLTensor*)compute)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_compute_strides == NULL)) {\n  }\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 3200; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3 = 0; i3 < 20; ++i3) {\n      int32_t cse_var_1 = ((i0_i1_fused_i2_fused * 20) + i3);\n      ((float*)compute_1)[cse_var_1] = ((0.000000e+00f < ((float*)data_1)[cse_var_1]) ? ((float*)data_1)[cse_var_1] : (((float*)data_1)[cse_var_1] * 5.000000e-01f));\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "leaky_relu[5__40__16__20]"
  },
  {
    "instruction": "Consider a deep learning model using any deep learning framework (e.g. TensorFlow, PyTorch, etc.) that includes CUDA operators. Replace the CUDA operator in the model with the corresponding CPU operator to run in an environment without a GPU.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data_a: T.Buffer((4, 24, 40), \"float32\"), data_b: T.Buffer((4, 24, 40), \"float32\"), T_concat: T.Buffer((8, 24, 40), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0 in T.parallel(8):\n            for ax1, ax2 in T.grid(24, 40):\n                cse_var_1: T.int32 = ax0 * 960 + ax1 * 40 + ax2\n                T_concat_1 = T.Buffer((7680,), data=T_concat.data)\n                data_b_1 = T.Buffer((3840,), data=data_b.data)\n                data_a_1 = T.Buffer((3840,), data=data_a.data)\n                T_concat_1[cse_var_1] = T.if_then_else(4 <= ax0, data_b_1[cse_var_1 - 3840], data_a_1[cse_var_1])\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(60) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ data_a, float* __restrict__ data_b);\nextern \"C\" __global__ void __launch_bounds__(60) default_function_kernel(float* __restrict__ T_concat, float* __restrict__ data_a, float* __restrict__ data_b) {\n  T_concat[((((int)blockIdx.x) * 60) + ((int)threadIdx.x))] = ((64 <= ((int)blockIdx.x)) ? data_b[(((((int)blockIdx.x) * 60) + ((int)threadIdx.x)) - 3840)] : data_a[((((int)blockIdx.x) * 60) + ((int)threadIdx.x))]);\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_a_code = arg_type_ids[0];\n  int32_t data_b_code = arg_type_ids[1];\n  int32_t T_concat_code = arg_type_ids[2];\n  void* data_a = (((TVMValue*)args)[0].v_handle);\n  void* data_b = (((TVMValue*)args)[1].v_handle);\n  void* T_concat = (((TVMValue*)args)[2].v_handle);\n  void* data_a_1 = (((DLTensor*)data_a)[0].data);\n  void* default_function_data_a_shape = (((DLTensor*)data_a)[0].shape);\n  void* default_function_data_a_strides = (((DLTensor*)data_a)[0].strides);\n  int32_t dev_id = (((DLTensor*)data_a)[0].device.device_id);\n  void* data_b_1 = (((DLTensor*)data_b)[0].data);\n  void* default_function_data_b_shape = (((DLTensor*)data_b)[0].shape);\n  void* default_function_data_b_strides = (((DLTensor*)data_b)[0].strides);\n  void* T_concat_1 = (((DLTensor*)T_concat)[0].data);\n  void* default_function_T_concat_shape = (((DLTensor*)T_concat)[0].shape);\n  void* default_function_T_concat_strides = (((DLTensor*)T_concat)[0].strides);\n  if (!(default_function_data_a_strides == NULL)) {\n  }\n  if (!(default_function_data_b_strides == NULL)) {\n  }\n  if (!(default_function_T_concat_strides == NULL)) {\n  }\n  for (int32_t ax0 = 0; ax0 < 8; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 24; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 40; ++ax2) {\n        int32_t cse_var_1 = (((ax0 * 960) + (ax1 * 40)) + ax2);\n        ((float*)T_concat_1)[cse_var_1] = ((4 <= ax0) ? ((float*)data_b_1)[(cse_var_1 - 3840)] : ((float*)data_a_1)[cse_var_1]);\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "concatenate[4__24__40__12]"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((2, 16, 12, 40), \"float32\"), buffer: T.Buffer((2, 16, 12, 40), \"float32\"), new_buffer: T.Buffer((2, 16, 12, 40), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i in T.parallel(2):\n            for j, k, l in T.grid(16, 12, 40):\n                cse_var_1: T.int32 = i * 7680 + j * 480 + k * 40 + l\n                new_buffer_1 = T.Buffer((15360,), data=new_buffer.data)\n                data_1 = T.Buffer((15360,), data=data.data)\n                new_buffer_1[cse_var_1] = data_1[cse_var_1]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ data, float* __restrict__ new_buffer);\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ data, float* __restrict__ new_buffer) {\n  new_buffer[((((int)blockIdx.x) * 48) + ((int)threadIdx.x))] = data[((((int)blockIdx.x) * 48) + ((int)threadIdx.x))];\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t buffer_code = arg_type_ids[1];\n  int32_t new_buffer_code = arg_type_ids[2];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* buffer = (((TVMValue*)args)[1].v_handle);\n  void* new_buffer = (((TVMValue*)args)[2].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* buffer_1 = (((DLTensor*)buffer)[0].data);\n  void* default_function_buffer_shape = (((DLTensor*)buffer)[0].shape);\n  void* default_function_buffer_strides = (((DLTensor*)buffer)[0].strides);\n  void* new_buffer_1 = (((DLTensor*)new_buffer)[0].data);\n  void* default_function_new_buffer_shape = (((DLTensor*)new_buffer)[0].shape);\n  void* default_function_new_buffer_strides = (((DLTensor*)new_buffer)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_buffer_strides == NULL)) {\n  }\n  if (!(default_function_new_buffer_strides == NULL)) {\n  }\n  for (int32_t i = 0; i < 2; ++i) {\n    for (int32_t j = 0; j < 16; ++j) {\n      for (int32_t k = 0; k < 12; ++k) {\n        for (int32_t l = 0; l < 40; ++l) {\n          int32_t cse_var_1 = ((((i * 7680) + (j * 480)) + (k * 40)) + l);\n          ((float*)new_buffer_1)[cse_var_1] = ((float*)data_1)[cse_var_1];\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "fifo_buffer[2__16__12__40]"
  },
  {
    "instruction": "Your deep learning application performs well on a small GPU cluster, but now you need to deploy it to a large CPU cluster. Convert existing CUDA operators to functionally identical CPU operators and ensure the scalability of your application in large-scale environments.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((1, 32, 12, 36), \"float32\"), data_1: T.Buffer((1, 32, 12, 36), \"float32\"), T_add: T.Buffer((1, 32, 12, 36), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax1, ax2, ax3 in T.grid(32, 12, 36):\n            cse_var_1: T.int32 = ax1 * 432 + ax2 * 36 + ax3\n            T_add_1 = T.Buffer((13824,), data=T_add.data)\n            data_2 = T.Buffer((13824,), data=data.data)\n            data_3 = T.Buffer((13824,), data=data_1.data)\n            T_add_1[cse_var_1] = data_2[cse_var_1] + data_3[cse_var_1]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(54) default_function_kernel(float* __restrict__ T_add, float* __restrict__ data, float* __restrict__ data_1);\nextern \"C\" __global__ void __launch_bounds__(54) default_function_kernel(float* __restrict__ T_add, float* __restrict__ data, float* __restrict__ data_1) {\n  T_add[((((int)blockIdx.x) * 54) + ((int)threadIdx.x))] = (data[((((int)blockIdx.x) * 54) + ((int)threadIdx.x))] + data_1[((((int)blockIdx.x) * 54) + ((int)threadIdx.x))]);\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t data_code_1 = arg_type_ids[1];\n  int32_t T_add_code = arg_type_ids[2];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* data_1 = (((TVMValue*)args)[1].v_handle);\n  void* T_add = (((TVMValue*)args)[2].v_handle);\n  void* data_2 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* data_3 = (((DLTensor*)data_1)[0].data);\n  void* default_function_data_shape_1 = (((DLTensor*)data_1)[0].shape);\n  void* default_function_data_strides_1 = (((DLTensor*)data_1)[0].strides);\n  void* T_add_1 = (((DLTensor*)T_add)[0].data);\n  void* default_function_T_add_shape = (((DLTensor*)T_add)[0].shape);\n  void* default_function_T_add_strides = (((DLTensor*)T_add)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_data_strides_1 == NULL)) {\n  }\n  if (!(default_function_T_add_strides == NULL)) {\n  }\n  for (int32_t ax1 = 0; ax1 < 32; ++ax1) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 36; ++ax3) {\n        int32_t cse_var_1 = (((ax1 * 432) + (ax2 * 36)) + ax3);\n        ((float*)T_add_1)[cse_var_1] = (((float*)data_2)[cse_var_1] + ((float*)data_3)[cse_var_1]);\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "add[1__32__12__36]"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((10, 36, 7, 3), \"float32\"), kernel: T.Buffer((82, 36, 4, 3), \"float32\"), conv2d_nchw: T.Buffer((10, 82, 6, 1), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused in T.parallel(41):\n            pad_temp = T.allocate([9720], \"float32\", \"global\")\n            conv2d_nchw_local = T.allocate([120], \"float32\", \"local\")\n            pad_temp_1 = T.Buffer((9720,), data=pad_temp)\n            for i0, i1, i2 in T.grid(10, 36, 9):\n                cse_var_4: T.int32 = i2 * 3\n                cse_var_3: T.bool = 1 <= i2 and i2 < 8\n                cse_var_2: T.int32 = i0 * 756 + i1 * 21 + cse_var_4\n                cse_var_1: T.int32 = i0 * 972 + i1 * 27 + cse_var_4\n                pad_temp_1[cse_var_1] = T.float32(0)\n                data_1 = T.Buffer((7560,), data=data.data)\n                pad_temp_1[cse_var_1 + 1] = T.if_then_else(cse_var_3, data_1[cse_var_2 - 3], T.float32(0))\n                pad_temp_1[cse_var_1 + 2] = T.if_then_else(cse_var_3, data_1[cse_var_2 - 2], T.float32(0))\n            conv2d_nchw_local_1 = T.Buffer((120,), data=conv2d_nchw_local, scope=\"local\")\n            for nn_c_outer_inner_init, yy_c_outer_inner_init in T.grid(2, 6):\n                cse_var_5: T.int32 = nn_c_outer_inner_init * 60 + yy_c_outer_inner_init\n                conv2d_nchw_local_1[cse_var_5] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 6] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 12] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 18] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 24] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 30] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 36] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 42] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 48] = T.float32(0)\n                conv2d_nchw_local_1[cse_var_5 + 54] = T.float32(0)\n            for rc_outer, ry_outer, nn_c_outer_inner, yy_c_outer_inner, rc_inner, ry_inner, rx_inner in T.grid(12, 2, 2, 6, 3, 2, 3):\n                cse_var_24: T.int32 = ry_outer * 6\n                cse_var_23: T.int32 = ry_inner * 3\n                cse_var_22: T.int32 = nn_c_outer_inner * 60 + yy_c_outer_inner\n                cse_var_21: T.int32 = cse_var_22 + 6\n                cse_var_20: T.int32 = cse_var_22 + 54\n                cse_var_19: T.int32 = cse_var_22 + 48\n                cse_var_18: T.int32 = cse_var_22 + 42\n                cse_var_17: T.int32 = cse_var_22 + 36\n                cse_var_16: T.int32 = cse_var_22 + 30\n                cse_var_15: T.int32 = cse_var_22 + 24\n                cse_var_14: T.int32 = cse_var_22 + 18\n                cse_var_13: T.int32 = cse_var_22 + 12\n                cse_var_12: T.int32 = nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused * 864 + rc_outer * 36 + rc_inner * 12 + cse_var_24 + cse_var_23 + rx_inner\n                cse_var_11: T.int32 = cse_var_12 + 432\n                cse_var_10: T.int32 = nn_c_outer_inner * 4860 + rc_outer * 81 + rc_inner * 27 + cse_var_24 + yy_c_outer_inner * 3 + cse_var_23 + rx_inner\n                cse_var_9: T.int32 = cse_var_10 + 972\n                cse_var_8: T.int32 = cse_var_10 + 3888\n                cse_var_7: T.int32 = cse_var_10 + 2916\n                cse_var_6: T.int32 = cse_var_10 + 1944\n                kernel_1 = T.Buffer((35424,), data=kernel.data)\n                conv2d_nchw_local_1[cse_var_22] = conv2d_nchw_local_1[cse_var_22] + pad_temp_1[cse_var_10] * kernel_1[cse_var_12]\n                conv2d_nchw_local_1[cse_var_21] = conv2d_nchw_local_1[cse_var_21] + pad_temp_1[cse_var_10] * kernel_1[cse_var_11]\n                conv2d_nchw_local_1[cse_var_13] = conv2d_nchw_local_1[cse_var_13] + pad_temp_1[cse_var_9] * kernel_1[cse_var_12]\n                conv2d_nchw_local_1[cse_var_14] = conv2d_nchw_local_1[cse_var_14] + pad_temp_1[cse_var_9] * kernel_1[cse_var_11]\n                conv2d_nchw_local_1[cse_var_15] = conv2d_nchw_local_1[cse_var_15] + pad_temp_1[cse_var_6] * kernel_1[cse_var_12]\n                conv2d_nchw_local_1[cse_var_16] = conv2d_nchw_local_1[cse_var_16] + pad_temp_1[cse_var_6] * kernel_1[cse_var_11]\n                conv2d_nchw_local_1[cse_var_17] = conv2d_nchw_local_1[cse_var_17] + pad_temp_1[cse_var_7] * kernel_1[cse_var_12]\n                conv2d_nchw_local_1[cse_var_18] = conv2d_nchw_local_1[cse_var_18] + pad_temp_1[cse_var_7] * kernel_1[cse_var_11]\n                conv2d_nchw_local_1[cse_var_19] = conv2d_nchw_local_1[cse_var_19] + pad_temp_1[cse_var_8] * kernel_1[cse_var_12]\n                conv2d_nchw_local_1[cse_var_20] = conv2d_nchw_local_1[cse_var_20] + pad_temp_1[cse_var_8] * kernel_1[cse_var_11]\n            for nn_inner, ff_inner, yy_inner in T.grid(10, 2, 6):\n                cse_var_25: T.int32 = ff_inner * 6\n                conv2d_nchw_1 = T.Buffer((4920,), data=conv2d_nchw.data)\n                conv2d_nchw_1[nn_inner * 492 + nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused * 12 + cse_var_25 + yy_inner] = conv2d_nchw_local_1[nn_inner * 12 + cse_var_25 + yy_inner]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(205) default_function_kernel(float* __restrict__ conv2d_nchw, float* __restrict__ data, float* __restrict__ kernel);\nextern \"C\" __global__ void __launch_bounds__(205) default_function_kernel(float* __restrict__ conv2d_nchw, float* __restrict__ data, float* __restrict__ kernel) {\n  float conv2d_nchw_local[6];\n  __shared__ float pad_temp_shared[810];\n  __shared__ float kernel_shared[2952];\n  conv2d_nchw_local[0] = 0.000000e+00f;\n  conv2d_nchw_local[1] = 0.000000e+00f;\n  conv2d_nchw_local[2] = 0.000000e+00f;\n  conv2d_nchw_local[3] = 0.000000e+00f;\n  conv2d_nchw_local[4] = 0.000000e+00f;\n  conv2d_nchw_local[5] = 0.000000e+00f;\n  for (int rc_outer_outer = 0; rc_outer_outer < 2; ++rc_outer_outer) {\n    for (int rx_outer_outer = 0; rx_outer_outer < 3; ++rx_outer_outer) {\n      bool cse_var_1 = (1 <= rx_outer_outer);\n      __syncthreads();\n      pad_temp_shared[((int)threadIdx.x)] = ((((1 <= (((int)threadIdx.x) % 9)) && ((((int)threadIdx.x) % 9) < 8)) && cse_var_1) ? data[((((((((((int)blockIdx.x) >> 1) * 3780) + ((((int)threadIdx.x) / 162) * 756)) + (rc_outer_outer * 378)) + (((((int)threadIdx.x) % 162) / 9) * 21)) + ((((int)threadIdx.x) % 9) * 3)) + rx_outer_outer) - 4)] : 0.000000e+00f);\n      pad_temp_shared[(((((((int)threadIdx.x) + 205) / 162) * 162) + ((((((int)threadIdx.x) + 43) % 162) / 9) * 9)) + ((((int)threadIdx.x) + 7) % 9))] = ((((1 <= ((((int)threadIdx.x) + 7) % 9)) && (((((int)threadIdx.x) + 7) % 9) < 8)) && cse_var_1) ? data[((((((((((int)blockIdx.x) >> 1) * 3780) + (((((int)threadIdx.x) + 205) / 162) * 756)) + (rc_outer_outer * 378)) + ((((((int)threadIdx.x) + 43) % 162) / 9) * 21)) + (((((int)threadIdx.x) + 7) % 9) * 3)) + rx_outer_outer) - 4)] : 0.000000e+00f);\n      pad_temp_shared[(((((((int)threadIdx.x) + 410) / 162) * 162) + ((((((int)threadIdx.x) + 86) % 162) / 9) * 9)) + ((((int)threadIdx.x) + 5) % 9))] = ((((1 <= ((((int)threadIdx.x) + 5) % 9)) && (((((int)threadIdx.x) + 5) % 9) < 8)) && cse_var_1) ? data[((((((((((int)blockIdx.x) >> 1) * 3780) + (((((int)threadIdx.x) + 410) / 162) * 756)) + (rc_outer_outer * 378)) + ((((((int)threadIdx.x) + 86) % 162) / 9) * 21)) + (((((int)threadIdx.x) + 5) % 9) * 3)) + rx_outer_outer) - 4)] : 0.000000e+00f);\n      if (((int)threadIdx.x) < 195) {\n        pad_temp_shared[(((((((int)threadIdx.x) + 615) / 162) * 162) + ((((((int)threadIdx.x) + 129) % 162) / 9) * 9)) + ((((int)threadIdx.x) + 3) % 9))] = ((((1 <= ((((int)threadIdx.x) + 3) % 9)) && (((((int)threadIdx.x) + 3) % 9) < 8)) && cse_var_1) ? data[((((((((((int)blockIdx.x) >> 1) * 3780) + (((((int)threadIdx.x) + 615) / 162) * 756)) + (rc_outer_outer * 378)) + ((((((int)threadIdx.x) + 129) % 162) / 9) * 21)) + (((((int)threadIdx.x) + 3) % 9) * 3)) + rx_outer_outer) - 4)] : 0.000000e+00f);\n      }\n      kernel_shared[((int)threadIdx.x)] = kernel[((((((((int)blockIdx.x) & 1) * 17712) + ((((int)threadIdx.x) / 72) * 432)) + (rc_outer_outer * 216)) + ((((int)threadIdx.x) % 72) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 205) / 72) * 72) + ((((((int)threadIdx.x) + 61) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 1) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 205) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 61) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 1) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 410) / 72) * 72) + ((((((int)threadIdx.x) + 50) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 2) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 410) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 50) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 2) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 615) / 72) * 72) + ((((((int)threadIdx.x) + 39) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 3) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 615) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 39) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 3) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 820) / 72) * 72) + ((((((int)threadIdx.x) >> 2) + 7) % 18) * 4)) + (((int)threadIdx.x) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 820) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) >> 2) + 7) % 18) * 12)) + ((((int)threadIdx.x) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 1025) / 72) * 72) + ((((((int)threadIdx.x) + 17) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 1) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 1025) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 17) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 1) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 1230) / 72) * 72) + ((((((int)threadIdx.x) + 6) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 2) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 1230) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 6) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 2) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 1435) / 72) * 72) + ((((((int)threadIdx.x) + 67) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 3) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 1435) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 67) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 3) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 1640) / 72) * 72) + ((((((int)threadIdx.x) >> 2) + 14) % 18) * 4)) + (((int)threadIdx.x) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 1640) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) >> 2) + 14) % 18) * 12)) + ((((int)threadIdx.x) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 1845) / 72) * 72) + ((((((int)threadIdx.x) + 45) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 1) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 1845) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 45) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 1) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 2050) / 72) * 72) + ((((((int)threadIdx.x) + 34) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 2) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 2050) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 34) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 2) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 2255) / 72) * 72) + ((((((int)threadIdx.x) + 23) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 3) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 2255) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 23) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 3) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[(((((((int)threadIdx.x) + 2460) / 72) * 72) + ((((((int)threadIdx.x) >> 2) + 3) % 18) * 4)) + (((int)threadIdx.x) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 2460) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) >> 2) + 3) % 18) * 12)) + ((((int)threadIdx.x) & 3) * 3)) + rx_outer_outer)];\n      kernel_shared[((((((int)threadIdx.x) + 2665) / 72) * 72) + ((((int)threadIdx.x) + 1) % 72))] = kernel[((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 2665) / 72) * 432)) + (rc_outer_outer * 216)) + (((((int)threadIdx.x) + 1) % 72) * 3)) + rx_outer_outer)];\n      if (((int)threadIdx.x) < 82) {\n        kernel_shared[(((((((int)threadIdx.x) + 2870) / 72) * 72) + ((((((int)threadIdx.x) + 62) % 72) >> 2) * 4)) + ((((int)threadIdx.x) + 2) & 3))] = kernel[(((((((((int)blockIdx.x) & 1) * 17712) + (((((int)threadIdx.x) + 2870) / 72) * 432)) + (rc_outer_outer * 216)) + ((((((int)threadIdx.x) + 62) % 72) >> 2) * 12)) + (((((int)threadIdx.x) + 2) & 3) * 3)) + rx_outer_outer)];\n      }\n      __syncthreads();\n      for (int rc_outer_inner = 0; rc_outer_inner < 18; ++rc_outer_inner) {\n        for (int ry_outer_inner = 0; ry_outer_inner < 2; ++ry_outer_inner) {\n          conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2))] * kernel_shared[((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2))]));\n          conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 1)] * kernel_shared[((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2))]));\n          conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 2)] * kernel_shared[((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2))]));\n          conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 3)] * kernel_shared[((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2))]));\n          conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 4)] * kernel_shared[((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2))]));\n          conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 5)] * kernel_shared[((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2))]));\n          conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 1)] * kernel_shared[(((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2)) + 1)]));\n          conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 2)] * kernel_shared[(((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2)) + 1)]));\n          conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 3)] * kernel_shared[(((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2)) + 1)]));\n          conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 4)] * kernel_shared[(((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2)) + 1)]));\n          conv2d_nchw_local[4] = (conv2d_nchw_local[4] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 5)] * kernel_shared[(((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2)) + 1)]));\n          conv2d_nchw_local[5] = (conv2d_nchw_local[5] + (pad_temp_shared[(((((((int)threadIdx.x) / 41) * 162) + (rc_outer_inner * 9)) + (ry_outer_inner * 2)) + 6)] * kernel_shared[(((((((int)threadIdx.x) % 41) * 72) + (rc_outer_inner * 4)) + (ry_outer_inner * 2)) + 1)]));\n        }\n      }\n    }\n  }\n  for (int yy_inner = 0; yy_inner < 6; ++yy_inner) {\n    conv2d_nchw[((((((((int)blockIdx.x) >> 1) * 2460) + ((((int)threadIdx.x) / 41) * 492)) + ((((int)blockIdx.x) & 1) * 246)) + ((((int)threadIdx.x) % 41) * 6)) + yy_inner)] = conv2d_nchw_local[yy_inner];\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t kernel_code = arg_type_ids[1];\n  int32_t conv2d_nchw_code = arg_type_ids[2];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* kernel = (((TVMValue*)args)[1].v_handle);\n  void* conv2d_nchw = (((TVMValue*)args)[2].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* kernel_1 = (((DLTensor*)kernel)[0].data);\n  void* default_function_kernel_shape = (((DLTensor*)kernel)[0].shape);\n  void* default_function_kernel_strides = (((DLTensor*)kernel)[0].strides);\n  void* conv2d_nchw_1 = (((DLTensor*)conv2d_nchw)[0].data);\n  void* default_function_conv2d_nchw_shape = (((DLTensor*)conv2d_nchw)[0].shape);\n  void* default_function_conv2d_nchw_strides = (((DLTensor*)conv2d_nchw)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_kernel_strides == NULL)) {\n  }\n  if (!(default_function_conv2d_nchw_strides == NULL)) {\n  }\n  for (int32_t nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused = 0; nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused < 41; ++nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused) {\n    void* pad_temp = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)38880, 2, 32);\n    if (pad_temp == NULL) {\n      return -1;\n    }\n    void* conv2d_nchw_local = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)480, 2, 32);\n    if (conv2d_nchw_local == NULL) {\n      return -1;\n    }\n    for (int32_t i0 = 0; i0 < 10; ++i0) {\n      for (int32_t i1 = 0; i1 < 36; ++i1) {\n        for (int32_t i2 = 0; i2 < 9; ++i2) {\n          int32_t cse_var_4 = (i2 * 3);\n          bool cse_var_3 = ((1 <= i2) && (i2 < 8));\n          int32_t cse_var_2 = (((i0 * 756) + (i1 * 21)) + cse_var_4);\n          int32_t cse_var_1 = (((i0 * 972) + (i1 * 27)) + cse_var_4);\n          ((float*)pad_temp)[cse_var_1] = 0.000000e+00f;\n          ((float*)pad_temp)[(cse_var_1 + 1)] = (cse_var_3 ? ((float*)data_1)[(cse_var_2 - 3)] : 0.000000e+00f);\n          ((float*)pad_temp)[(cse_var_1 + 2)] = (cse_var_3 ? ((float*)data_1)[(cse_var_2 - 2)] : 0.000000e+00f);\n        }\n      }\n    }\n    for (int32_t nn_c_outer_inner_init = 0; nn_c_outer_inner_init < 2; ++nn_c_outer_inner_init) {\n      for (int32_t yy_c_outer_inner_init = 0; yy_c_outer_inner_init < 6; ++yy_c_outer_inner_init) {\n        int32_t cse_var_5 = ((nn_c_outer_inner_init * 60) + yy_c_outer_inner_init);\n        ((float*)conv2d_nchw_local)[cse_var_5] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 6)] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 12)] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 18)] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 24)] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 30)] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 36)] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 42)] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 48)] = 0.000000e+00f;\n        ((float*)conv2d_nchw_local)[(cse_var_5 + 54)] = 0.000000e+00f;\n      }\n    }\n    for (int32_t rc_outer = 0; rc_outer < 12; ++rc_outer) {\n      for (int32_t ry_outer = 0; ry_outer < 2; ++ry_outer) {\n        for (int32_t nn_c_outer_inner = 0; nn_c_outer_inner < 2; ++nn_c_outer_inner) {\n          for (int32_t yy_c_outer_inner = 0; yy_c_outer_inner < 6; ++yy_c_outer_inner) {\n            for (int32_t rc_inner = 0; rc_inner < 3; ++rc_inner) {\n              for (int32_t ry_inner = 0; ry_inner < 2; ++ry_inner) {\n                for (int32_t rx_inner = 0; rx_inner < 3; ++rx_inner) {\n                  int32_t cse_var_24 = (ry_outer * 6);\n                  int32_t cse_var_23 = (ry_inner * 3);\n                  int32_t cse_var_22 = ((nn_c_outer_inner * 60) + yy_c_outer_inner);\n                  int32_t cse_var_21 = (cse_var_22 + 6);\n                  int32_t cse_var_20 = (cse_var_22 + 54);\n                  int32_t cse_var_19 = (cse_var_22 + 48);\n                  int32_t cse_var_18 = (cse_var_22 + 42);\n                  int32_t cse_var_17 = (cse_var_22 + 36);\n                  int32_t cse_var_16 = (cse_var_22 + 30);\n                  int32_t cse_var_15 = (cse_var_22 + 24);\n                  int32_t cse_var_14 = (cse_var_22 + 18);\n                  int32_t cse_var_13 = (cse_var_22 + 12);\n                  int32_t cse_var_12 = ((((((nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused * 864) + (rc_outer * 36)) + (rc_inner * 12)) + cse_var_24) + cse_var_23) + rx_inner);\n                  int32_t cse_var_11 = (cse_var_12 + 432);\n                  int32_t cse_var_10 = (((((((nn_c_outer_inner * 4860) + (rc_outer * 81)) + (rc_inner * 27)) + cse_var_24) + (yy_c_outer_inner * 3)) + cse_var_23) + rx_inner);\n                  int32_t cse_var_9 = (cse_var_10 + 972);\n                  int32_t cse_var_8 = (cse_var_10 + 3888);\n                  int32_t cse_var_7 = (cse_var_10 + 2916);\n                  int32_t cse_var_6 = (cse_var_10 + 1944);\n                  ((float*)conv2d_nchw_local)[cse_var_22] = (((float*)conv2d_nchw_local)[cse_var_22] + (((float*)pad_temp)[cse_var_10] * ((float*)kernel_1)[cse_var_12]));\n                  ((float*)conv2d_nchw_local)[cse_var_21] = (((float*)conv2d_nchw_local)[cse_var_21] + (((float*)pad_temp)[cse_var_10] * ((float*)kernel_1)[cse_var_11]));\n                  ((float*)conv2d_nchw_local)[cse_var_13] = (((float*)conv2d_nchw_local)[cse_var_13] + (((float*)pad_temp)[cse_var_9] * ((float*)kernel_1)[cse_var_12]));\n                  ((float*)conv2d_nchw_local)[cse_var_14] = (((float*)conv2d_nchw_local)[cse_var_14] + (((float*)pad_temp)[cse_var_9] * ((float*)kernel_1)[cse_var_11]));\n                  ((float*)conv2d_nchw_local)[cse_var_15] = (((float*)conv2d_nchw_local)[cse_var_15] + (((float*)pad_temp)[cse_var_6] * ((float*)kernel_1)[cse_var_12]));\n                  ((float*)conv2d_nchw_local)[cse_var_16] = (((float*)conv2d_nchw_local)[cse_var_16] + (((float*)pad_temp)[cse_var_6] * ((float*)kernel_1)[cse_var_11]));\n                  ((float*)conv2d_nchw_local)[cse_var_17] = (((float*)conv2d_nchw_local)[cse_var_17] + (((float*)pad_temp)[cse_var_7] * ((float*)kernel_1)[cse_var_12]));\n                  ((float*)conv2d_nchw_local)[cse_var_18] = (((float*)conv2d_nchw_local)[cse_var_18] + (((float*)pad_temp)[cse_var_7] * ((float*)kernel_1)[cse_var_11]));\n                  ((float*)conv2d_nchw_local)[cse_var_19] = (((float*)conv2d_nchw_local)[cse_var_19] + (((float*)pad_temp)[cse_var_8] * ((float*)kernel_1)[cse_var_12]));\n                  ((float*)conv2d_nchw_local)[cse_var_20] = (((float*)conv2d_nchw_local)[cse_var_20] + (((float*)pad_temp)[cse_var_8] * ((float*)kernel_1)[cse_var_11]));\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (int32_t nn_inner = 0; nn_inner < 10; ++nn_inner) {\n      for (int32_t ff_inner = 0; ff_inner < 2; ++ff_inner) {\n        for (int32_t yy_inner = 0; yy_inner < 6; ++yy_inner) {\n          int32_t cse_var_25 = (ff_inner * 6);\n          ((float*)conv2d_nchw_1)[((((nn_inner * 492) + (nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused * 12)) + cse_var_25) + yy_inner)] = ((float*)conv2d_nchw_local)[(((nn_inner * 12) + cse_var_25) + yy_inner)];\n        }\n      }\n    }\n    if (TVMBackendFreeWorkspace(1, dev_id, conv2d_nchw_local) != 0) {\n      return -1;\n    }\n    if (TVMBackendFreeWorkspace(1, dev_id, pad_temp) != 0) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "conv2d[10__7__3__82__36__4__3__(1__3)__(1__1)]"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((7, 91, 9, 4), \"float32\"), kernel: T.Buffer((71, 91, 4, 3), \"float32\"), conv2d_nchw: T.Buffer((7, 71, 3, 4), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused in T.parallel(1491):\n            pad_temp = T.allocate([2184], \"float32\", \"global\")\n            conv2d_nchw_local = T.allocate([4], \"float32\", \"local\")\n            pad_temp_1 = T.Buffer((2184,), data=pad_temp)\n            for i1, i2, i3_s in T.grid(91, 4, 6):\n                cse_var_1: T.int32 = nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused // 497\n                data_1 = T.Buffer((22932,), data=data.data)\n                pad_temp_1[i1 * 24 + i2 * 6 + i3_s] = T.if_then_else(1 <= cse_var_1 * 3 + i2 and 1 <= i3_s and i3_s < 5, data_1[nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused % 497 // 71 * 3276 + i1 * 36 + cse_var_1 * 12 + i2 * 4 + i3_s - 5], T.float32(0))\n            conv2d_nchw_local_1 = T.Buffer((4,), data=conv2d_nchw_local, scope=\"local\", align=16)\n            for xx_c_outer_inner_init in range(4):\n                conv2d_nchw_local_1[xx_c_outer_inner_init] = T.float32(0)\n            for rc_outer, ry_outer, xx_c_outer_inner, ry_inner, rx_inner in T.grid(91, 2, 4, 2, 3):\n                kernel_1 = T.Buffer((77532,), data=kernel.data)\n                conv2d_nchw_local_1[xx_c_outer_inner] = conv2d_nchw_local_1[xx_c_outer_inner] + pad_temp_1[rc_outer * 24 + ry_outer * 12 + ry_inner * 6 + xx_c_outer_inner + rx_inner] * kernel_1[nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused % 71 * 1092 + rc_outer * 12 + ry_outer * 6 + ry_inner * 3 + rx_inner]\n            conv2d_nchw_1 = T.Buffer((5964,), data=conv2d_nchw.data)\n            conv2d_nchw_1[nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused % 497 * 12 + nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused // 497 * 4:nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused % 497 * 12 + nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused // 497 * 4 + 4] = conv2d_nchw_local_1[0:4]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(71) default_function_kernel(float* __restrict__ conv2d_nchw, float* __restrict__ data, float* __restrict__ kernel);\nextern \"C\" __global__ void __launch_bounds__(71) default_function_kernel(float* __restrict__ conv2d_nchw, float* __restrict__ data, float* __restrict__ kernel) {\n  float conv2d_nchw_local[4];\n  __shared__ float pad_temp_shared[104];\n  __shared__ float kernel_shared[1846];\n  conv2d_nchw_local[0] = 0.000000e+00f;\n  conv2d_nchw_local[1] = 0.000000e+00f;\n  conv2d_nchw_local[2] = 0.000000e+00f;\n  conv2d_nchw_local[3] = 0.000000e+00f;\n  for (int rc_outer_outer = 0; rc_outer_outer < 7; ++rc_outer_outer) {\n    for (int ry_outer_outer = 0; ry_outer_outer < 2; ++ry_outer_outer) {\n      __syncthreads();\n      pad_temp_shared[((int)threadIdx.x)] = (((1 <= ((((((int)blockIdx.x) % 3) * 3) + (ry_outer_outer * 2)) + ((((int)threadIdx.x) & 7) >> 2))) && (1 <= (((int)threadIdx.x) & 3))) ? data[((((((((((int)blockIdx.x) / 3) * 3276) + (rc_outer_outer * 468)) + ((((int)threadIdx.x) >> 3) * 36)) + ((((int)blockIdx.x) % 3) * 12)) + (ry_outer_outer * 8)) + (((int)threadIdx.x) & 7)) - 5)] : 0.000000e+00f);\n      if (((int)threadIdx.x) < 33) {\n        pad_temp_shared[(((int)threadIdx.x) + 71)] = (((1 <= ((((((int)blockIdx.x) % 3) * 3) + (ry_outer_outer * 2)) + (((((int)threadIdx.x) + 7) & 7) >> 2))) && (1 <= ((((int)threadIdx.x) + 3) & 3))) ? data[(((((((((((int)blockIdx.x) / 3) * 3276) + (rc_outer_outer * 468)) + (((((int)threadIdx.x) + 71) >> 3) * 36)) + ((((int)blockIdx.x) % 3) * 12)) + (ry_outer_outer * 8)) + ((((((int)threadIdx.x) + 7) & 7) >> 2) * 4)) + ((((int)threadIdx.x) + 3) & 3)) - 5)] : 0.000000e+00f);\n      }\n      kernel_shared[((int)threadIdx.x)] = kernel[((((((((int)threadIdx.x) / 26) * 1092) + (rc_outer_outer * 156)) + (((((int)threadIdx.x) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 71) / 26) * 26) + ((((((int)threadIdx.x) + 19) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 71) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 19) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 142) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 6) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 142) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 6) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 213) / 26) * 26) + ((((((int)threadIdx.x) + 5) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 213) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 5) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 284) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 12) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 284) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 12) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 355) / 26) * 26) + ((((((int)threadIdx.x) + 17) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 355) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 17) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 426) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 5) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 426) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 5) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 497) / 26) * 26) + ((((((int)threadIdx.x) + 3) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 497) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 3) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 568) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 11) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 568) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 11) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 639) / 26) * 26) + ((((((int)threadIdx.x) + 15) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 639) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 15) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 710) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 4) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 710) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 4) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[((((((int)threadIdx.x) + 781) / 26) * 26) + ((((int)threadIdx.x) + 1) % 26))] = kernel[(((((((((int)threadIdx.x) + 781) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 1) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 852) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 10) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 852) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 10) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 923) / 26) * 26) + ((((((int)threadIdx.x) + 13) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 923) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 13) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 994) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 3) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 994) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 3) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1065) / 26) * 26) + ((((((int)threadIdx.x) + 25) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 1065) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 25) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1136) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 9) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 1136) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 9) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1207) / 26) * 26) + ((((((int)threadIdx.x) + 11) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 1207) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 11) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1278) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 2) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 1278) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 2) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1349) / 26) * 26) + ((((((int)threadIdx.x) + 23) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 1349) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 23) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1420) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 8) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 1420) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 8) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1491) / 26) * 26) + ((((((int)threadIdx.x) + 9) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 1491) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 9) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1562) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 1) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 1562) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 1) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1633) / 26) * 26) + ((((((int)threadIdx.x) + 21) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 1633) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 21) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1704) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 7) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[(((((((((int)threadIdx.x) + 1704) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 7) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3))];\n      kernel_shared[(((((((int)threadIdx.x) + 1775) / 26) * 26) + ((((((int)threadIdx.x) + 7) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[(((((((((int)threadIdx.x) + 1775) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 7) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3))];\n      __syncthreads();\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[0] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[1] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[2] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[3] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[25] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[26] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[27] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[28] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[52] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[53] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[54] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[55] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[79] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[80] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[81] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[82] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      __syncthreads();\n      pad_temp_shared[((int)threadIdx.x)] = ((1 <= ((((((int)blockIdx.x) % 3) * 3) + (ry_outer_outer * 2)) + ((((int)threadIdx.x) & 7) >> 2))) ? data[((((((((((int)blockIdx.x) / 3) * 3276) + (rc_outer_outer * 468)) + ((((int)threadIdx.x) >> 3) * 36)) + ((((int)blockIdx.x) % 3) * 12)) + (ry_outer_outer * 8)) + (((int)threadIdx.x) & 7)) - 4)] : 0.000000e+00f);\n      if (((int)threadIdx.x) < 33) {\n        pad_temp_shared[(((int)threadIdx.x) + 71)] = ((1 <= ((((((int)blockIdx.x) % 3) * 3) + (ry_outer_outer * 2)) + (((((int)threadIdx.x) + 7) & 7) >> 2))) ? data[(((((((((((int)blockIdx.x) / 3) * 3276) + (rc_outer_outer * 468)) + (((((int)threadIdx.x) + 71) >> 3) * 36)) + ((((int)blockIdx.x) % 3) * 12)) + (ry_outer_outer * 8)) + ((((((int)threadIdx.x) + 7) & 7) >> 2) * 4)) + ((((int)threadIdx.x) + 3) & 3)) - 4)] : 0.000000e+00f);\n      }\n      kernel_shared[((int)threadIdx.x)] = kernel[(((((((((int)threadIdx.x) / 26) * 1092) + (rc_outer_outer * 156)) + (((((int)threadIdx.x) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 71) / 26) * 26) + ((((((int)threadIdx.x) + 19) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 71) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 19) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 142) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 6) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 142) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 6) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 213) / 26) * 26) + ((((((int)threadIdx.x) + 5) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 213) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 5) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 284) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 12) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 284) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 12) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 355) / 26) * 26) + ((((((int)threadIdx.x) + 17) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 355) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 17) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 426) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 5) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 426) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 5) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 497) / 26) * 26) + ((((((int)threadIdx.x) + 3) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 497) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 3) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 568) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 11) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 568) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 11) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 639) / 26) * 26) + ((((((int)threadIdx.x) + 15) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 639) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 15) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 710) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 4) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 710) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 4) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[((((((int)threadIdx.x) + 781) / 26) * 26) + ((((int)threadIdx.x) + 1) % 26))] = kernel[((((((((((int)threadIdx.x) + 781) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 1) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 852) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 10) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 852) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 10) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 923) / 26) * 26) + ((((((int)threadIdx.x) + 13) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 923) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 13) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 994) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 3) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 994) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 3) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1065) / 26) * 26) + ((((((int)threadIdx.x) + 25) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1065) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 25) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1136) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 9) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1136) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 9) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1207) / 26) * 26) + ((((((int)threadIdx.x) + 11) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1207) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 11) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1278) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 2) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1278) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 2) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1349) / 26) * 26) + ((((((int)threadIdx.x) + 23) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1349) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 23) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1420) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 8) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1420) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 8) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1491) / 26) * 26) + ((((((int)threadIdx.x) + 9) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1491) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 9) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1562) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 1) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1562) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 1) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1633) / 26) * 26) + ((((((int)threadIdx.x) + 21) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1633) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 21) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1704) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 7) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1704) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 7) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 1)];\n      kernel_shared[(((((((int)threadIdx.x) + 1775) / 26) * 26) + ((((((int)threadIdx.x) + 7) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1775) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 7) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 1)];\n      __syncthreads();\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[0] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[1] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[2] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[3] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[25] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[26] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[27] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[28] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[52] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[53] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[54] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[55] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[79] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[80] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[81] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[82] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      __syncthreads();\n      pad_temp_shared[((int)threadIdx.x)] = (((1 <= ((((((int)blockIdx.x) % 3) * 3) + (ry_outer_outer * 2)) + ((((int)threadIdx.x) & 7) >> 2))) && ((((int)threadIdx.x) & 3) < 3)) ? data[((((((((((int)blockIdx.x) / 3) * 3276) + (rc_outer_outer * 468)) + ((((int)threadIdx.x) >> 3) * 36)) + ((((int)blockIdx.x) % 3) * 12)) + (ry_outer_outer * 8)) + (((int)threadIdx.x) & 7)) - 3)] : 0.000000e+00f);\n      if (((int)threadIdx.x) < 33) {\n        pad_temp_shared[(((int)threadIdx.x) + 71)] = (((1 <= ((((((int)blockIdx.x) % 3) * 3) + (ry_outer_outer * 2)) + (((((int)threadIdx.x) + 7) & 7) >> 2))) && (((((int)threadIdx.x) + 3) & 3) < 3)) ? data[(((((((((((int)blockIdx.x) / 3) * 3276) + (rc_outer_outer * 468)) + (((((int)threadIdx.x) + 71) >> 3) * 36)) + ((((int)blockIdx.x) % 3) * 12)) + (ry_outer_outer * 8)) + ((((((int)threadIdx.x) + 7) & 7) >> 2) * 4)) + ((((int)threadIdx.x) + 3) & 3)) - 3)] : 0.000000e+00f);\n      }\n      kernel_shared[((int)threadIdx.x)] = kernel[(((((((((int)threadIdx.x) / 26) * 1092) + (rc_outer_outer * 156)) + (((((int)threadIdx.x) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 71) / 26) * 26) + ((((((int)threadIdx.x) + 19) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 71) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 19) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 142) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 6) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 142) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 6) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 213) / 26) * 26) + ((((((int)threadIdx.x) + 5) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 213) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 5) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 284) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 12) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 284) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 12) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 355) / 26) * 26) + ((((((int)threadIdx.x) + 17) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 355) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 17) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 426) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 5) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 426) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 5) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 497) / 26) * 26) + ((((((int)threadIdx.x) + 3) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 497) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 3) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 568) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 11) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 568) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 11) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 639) / 26) * 26) + ((((((int)threadIdx.x) + 15) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 639) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 15) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 710) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 4) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 710) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 4) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[((((((int)threadIdx.x) + 781) / 26) * 26) + ((((int)threadIdx.x) + 1) % 26))] = kernel[((((((((((int)threadIdx.x) + 781) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 1) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 852) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 10) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 852) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 10) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 923) / 26) * 26) + ((((((int)threadIdx.x) + 13) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 923) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 13) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 994) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 3) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 994) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 3) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1065) / 26) * 26) + ((((((int)threadIdx.x) + 25) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1065) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 25) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1136) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 9) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1136) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 9) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1207) / 26) * 26) + ((((((int)threadIdx.x) + 11) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1207) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 11) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1278) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 2) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1278) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 2) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1349) / 26) * 26) + ((((((int)threadIdx.x) + 23) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1349) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 23) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1420) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 8) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1420) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 8) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1491) / 26) * 26) + ((((((int)threadIdx.x) + 9) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1491) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 9) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1562) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 1) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1562) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 1) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1633) / 26) * 26) + ((((((int)threadIdx.x) + 21) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1633) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 21) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1704) / 26) * 26) + ((((((int)threadIdx.x) >> 1) + 7) % 13) * 2)) + (((int)threadIdx.x) & 1))] = kernel[((((((((((int)threadIdx.x) + 1704) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) >> 1) + 7) % 13) * 12)) + (ry_outer_outer * 6)) + ((((int)threadIdx.x) & 1) * 3)) + 2)];\n      kernel_shared[(((((((int)threadIdx.x) + 1775) / 26) * 26) + ((((((int)threadIdx.x) + 7) % 26) >> 1) * 2)) + ((((int)threadIdx.x) + 1) & 1))] = kernel[((((((((((int)threadIdx.x) + 1775) / 26) * 1092) + (rc_outer_outer * 156)) + ((((((int)threadIdx.x) + 7) % 26) >> 1) * 12)) + (ry_outer_outer * 6)) + (((((int)threadIdx.x) + 1) & 1) * 3)) + 2)];\n      __syncthreads();\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[0] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[1] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[2] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[3] * kernel_shared[(((int)threadIdx.x) * 26)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[4] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[5] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[6] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[7] * kernel_shared[((((int)threadIdx.x) * 26) + 1)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[8] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[9] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[10] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[11] * kernel_shared[((((int)threadIdx.x) * 26) + 2)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[12] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[13] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[14] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[15] * kernel_shared[((((int)threadIdx.x) * 26) + 3)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[16] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[17] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[18] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[19] * kernel_shared[((((int)threadIdx.x) * 26) + 4)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[20] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[21] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[22] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[23] * kernel_shared[((((int)threadIdx.x) * 26) + 5)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[24] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[25] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[26] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[27] * kernel_shared[((((int)threadIdx.x) * 26) + 6)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[28] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[29] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[30] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[31] * kernel_shared[((((int)threadIdx.x) * 26) + 7)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[32] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[33] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[34] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[35] * kernel_shared[((((int)threadIdx.x) * 26) + 8)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[36] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[37] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[38] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[39] * kernel_shared[((((int)threadIdx.x) * 26) + 9)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[40] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[41] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[42] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[43] * kernel_shared[((((int)threadIdx.x) * 26) + 10)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[44] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[45] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[46] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[47] * kernel_shared[((((int)threadIdx.x) * 26) + 11)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[48] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[49] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[50] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[51] * kernel_shared[((((int)threadIdx.x) * 26) + 12)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[52] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[53] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[54] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[55] * kernel_shared[((((int)threadIdx.x) * 26) + 13)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[56] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[57] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[58] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[59] * kernel_shared[((((int)threadIdx.x) * 26) + 14)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[60] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[61] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[62] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[63] * kernel_shared[((((int)threadIdx.x) * 26) + 15)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[64] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[65] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[66] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[67] * kernel_shared[((((int)threadIdx.x) * 26) + 16)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[68] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[69] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[70] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[71] * kernel_shared[((((int)threadIdx.x) * 26) + 17)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[72] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[73] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[74] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[75] * kernel_shared[((((int)threadIdx.x) * 26) + 18)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[76] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[77] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[78] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[79] * kernel_shared[((((int)threadIdx.x) * 26) + 19)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[80] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[81] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[82] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[83] * kernel_shared[((((int)threadIdx.x) * 26) + 20)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[84] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[85] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[86] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[87] * kernel_shared[((((int)threadIdx.x) * 26) + 21)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[88] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[89] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[90] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[91] * kernel_shared[((((int)threadIdx.x) * 26) + 22)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[92] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[93] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[94] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[95] * kernel_shared[((((int)threadIdx.x) * 26) + 23)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[96] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[97] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[98] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[99] * kernel_shared[((((int)threadIdx.x) * 26) + 24)]));\n      conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[100] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[1] = (conv2d_nchw_local[1] + (pad_temp_shared[101] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[2] = (conv2d_nchw_local[2] + (pad_temp_shared[102] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n      conv2d_nchw_local[3] = (conv2d_nchw_local[3] + (pad_temp_shared[103] * kernel_shared[((((int)threadIdx.x) * 26) + 25)]));\n    }\n  }\n  for (int xx_inner = 0; xx_inner < 4; ++xx_inner) {\n    conv2d_nchw[(((((((int)blockIdx.x) / 3) * 852) + (((int)threadIdx.x) * 12)) + ((((int)blockIdx.x) % 3) * 4)) + xx_inner)] = conv2d_nchw_local[xx_inner];\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t kernel_code = arg_type_ids[1];\n  int32_t conv2d_nchw_code = arg_type_ids[2];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* kernel = (((TVMValue*)args)[1].v_handle);\n  void* conv2d_nchw = (((TVMValue*)args)[2].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* kernel_1 = (((DLTensor*)kernel)[0].data);\n  void* default_function_kernel_shape = (((DLTensor*)kernel)[0].shape);\n  void* default_function_kernel_strides = (((DLTensor*)kernel)[0].strides);\n  void* conv2d_nchw_1 = (((DLTensor*)conv2d_nchw)[0].data);\n  void* default_function_conv2d_nchw_shape = (((DLTensor*)conv2d_nchw)[0].shape);\n  void* default_function_conv2d_nchw_strides = (((DLTensor*)conv2d_nchw)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_kernel_strides == NULL)) {\n  }\n  if (!(default_function_conv2d_nchw_strides == NULL)) {\n  }\n  for (int32_t nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused = 0; nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused < 1491; ++nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused) {\n    void* pad_temp = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)8736, 2, 32);\n    if (pad_temp == NULL) {\n      return -1;\n    }\n    void* conv2d_nchw_local = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)16, 2, 32);\n    if (conv2d_nchw_local == NULL) {\n      return -1;\n    }\n    for (int32_t i1 = 0; i1 < 91; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        for (int32_t i3_s = 0; i3_s < 6; ++i3_s) {\n          int32_t cse_var_1 = (nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused / 497);\n          ((float*)pad_temp)[(((i1 * 24) + (i2 * 6)) + i3_s)] = ((((1 <= ((cse_var_1 * 3) + i2)) && (1 <= i3_s)) && (i3_s < 5)) ? ((float*)data_1)[((((((((nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused % 497) / 71) * 3276) + (i1 * 36)) + (cse_var_1 * 12)) + (i2 * 4)) + i3_s) - 5)] : 0.000000e+00f);\n        }\n      }\n    }\n    for (int32_t xx_c_outer_inner_init = 0; xx_c_outer_inner_init < 4; ++xx_c_outer_inner_init) {\n      ((float*)conv2d_nchw_local)[xx_c_outer_inner_init] = 0.000000e+00f;\n    }\n    for (int32_t rc_outer = 0; rc_outer < 91; ++rc_outer) {\n      for (int32_t ry_outer = 0; ry_outer < 2; ++ry_outer) {\n        for (int32_t xx_c_outer_inner = 0; xx_c_outer_inner < 4; ++xx_c_outer_inner) {\n          for (int32_t ry_inner = 0; ry_inner < 2; ++ry_inner) {\n            for (int32_t rx_inner = 0; rx_inner < 3; ++rx_inner) {\n              ((float*)conv2d_nchw_local)[xx_c_outer_inner] = (((float*)conv2d_nchw_local)[xx_c_outer_inner] + (((float*)pad_temp)[(((((rc_outer * 24) + (ry_outer * 12)) + (ry_inner * 6)) + xx_c_outer_inner) + rx_inner)] * ((float*)kernel_1)[((((((nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused % 71) * 1092) + (rc_outer * 12)) + (ry_outer * 6)) + (ry_inner * 3)) + rx_inner)]));\n            }\n          }\n        }\n      }\n    }\n    *(float4*)(((float*)conv2d_nchw_1) + (((nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused % 497) * 12) + ((nn_outer_outer_ff_outer_outer_fused_yy_outer_outer_fused_xx_outer_outer_fused_nn_outer_inner_fused_ff_outer_inner_fused / 497) * 4))) = *(float4*)(((float*)conv2d_nchw_local) + 0);\n    if (TVMBackendFreeWorkspace(1, dev_id, conv2d_nchw_local) != 0) {\n      return -1;\n    }\n    if (TVMBackendFreeWorkspace(1, dev_id, pad_temp) != 0) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "conv2d[7__9__4__71__91__4__3__(3__1)__(1__1)]"
  },
  {
    "instruction": "In an environment without GPU support, you want to reason about deep learning models with a large number of inputs. Please convert existing CUDA operators to corresponding CPU operators and take advantage of batch processing and parallelism to improve inference performance on the CPU.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((8, 36, 20, 32), \"float32\"), PackedInput: T.Buffer((8, 36, 20, 1), \"uint32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(288):\n            for i2 in range(20):\n                cse_var_1: T.int32 = i0_i1_fused * 640 + i2 * 32\n                PackedInput_1 = T.Buffer((5760,), \"uint32\", data=PackedInput.data)\n                data_1 = T.Buffer((184320,), data=data.data)\n                PackedInput_1[i0_i1_fused * 20 + i2] = T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.shift_left(T.bitwise_or(T.uint32(0), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 1])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 2])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 3])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 4])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 5])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 6])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 7])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 8])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 9])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 10])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 11])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 12])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 13])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 14])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 15])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 16])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 17])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 18])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 19])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 20])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 21])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 22])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 23])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 24])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 25])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 26])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 27])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 28])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 29])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 30])), T.uint32(1)), T.Cast(\"uint32\", T.float32(0) <= data_1[cse_var_1 + 31]))\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(uint* __restrict__ PackedInput, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(uint* __restrict__ PackedInput, float* __restrict__ data) {\n  PackedInput[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((uint)0 | ((uint)(0.000000e+00f <= data[((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32))]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 1)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 2)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 3)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 4)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 5)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 6)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 7)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 8)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 9)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 10)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 11)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 12)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 13)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 14)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 15)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 16)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 17)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 18)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 19)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 20)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 21)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 22)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 23)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 24)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 25)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 26)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 27)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 28)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 29)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 30)]))) << (uint)1) | ((uint)(0.000000e+00f <= data[(((((int)blockIdx.x) * 2048) + (((int)threadIdx.x) * 32)) + 31)])));\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t PackedInput_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* PackedInput = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* PackedInput_1 = (((DLTensor*)PackedInput)[0].data);\n  void* default_function_PackedInput_shape = (((DLTensor*)PackedInput)[0].shape);\n  void* default_function_PackedInput_strides = (((DLTensor*)PackedInput)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_PackedInput_strides == NULL)) {\n  }\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 288; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 20; ++i2) {\n      int32_t cse_var_1 = ((i0_i1_fused * 640) + (i2 * 32));\n      ((uint32_t*)PackedInput_1)[((i0_i1_fused * 20) + i2)] = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((uint32_t)0 | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[cse_var_1]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 1)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 2)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 3)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 4)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 5)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 6)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 7)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 8)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 9)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 10)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 11)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 12)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 13)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 14)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 15)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 16)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 17)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 18)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 19)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 20)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 21)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 22)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 23)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 24)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 25)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 26)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 27)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 28)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 29)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 30)]))) << (uint32_t)1) | ((uint32_t)(0.000000e+00f <= ((float*)data_1)[(cse_var_1 + 31)])));\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "binarize_pack[8__36__20__32]"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((8, 8), \"float32\"), PadInput: T.Buffer((11, 11), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0 in T.parallel(11):\n            for i1 in range(11):\n                PadInput_1 = T.Buffer((121,), data=PadInput.data)\n                data_1 = T.Buffer((64,), data=data.data)\n                PadInput_1[i0 * 11 + i1] = T.if_then_else(1 <= i0 and i0 < 9 and 2 <= i1 and i1 < 10, data_1[i0 * 8 + i1 - 10], T.float32(0))\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ PadInput, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel(float* __restrict__ PadInput, float* __restrict__ data) {\n  if (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) < 121) {\n    PadInput[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))] = (((((11 <= ((((int)blockIdx.x) * 2) + ((int)threadIdx.x))) && (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) < 99)) && (2 <= (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 11))) && ((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 11) < 10)) ? data[((((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) / 11) * 8) + (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 11)) - 10)] : 0.000000e+00f);\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t PadInput_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* PadInput = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* PadInput_1 = (((DLTensor*)PadInput)[0].data);\n  void* default_function_PadInput_shape = (((DLTensor*)PadInput)[0].shape);\n  void* default_function_PadInput_strides = (((DLTensor*)PadInput)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_PadInput_strides == NULL)) {\n  }\n  for (int32_t i0 = 0; i0 < 11; ++i0) {\n    for (int32_t i1 = 0; i1 < 11; ++i1) {\n      ((float*)PadInput_1)[((i0 * 11) + i1)] = (((((1 <= i0) && (i0 < 9)) && (2 <= i1)) && (i1 < 10)) ? ((float*)data_1)[(((i0 * 8) + i1) - 10)] : 0.000000e+00f);\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "pad[9__20__8__8]"
  },
  {
    "instruction": "Your deep learning model is trained in an environment that supports CUDA, and now you need to port it to an environment without GPUs. Please convert the CUDA operators to equivalent operators running on the CPU to ensure the portability of the model across different environments.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((5, 40, 20, 36), \"float32\"), T_softmax_norm: T.Buffer((5, 40, 20, 36), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(200):\n            T_softmax_maxelem = T.allocate([20], \"float32\", \"global\")\n            T_softmax_expsum = T.allocate([20], \"float32\", \"global\")\n            T_softmax_maxelem_1 = T.Buffer((20,), data=T_softmax_maxelem)\n            data_1 = T.Buffer((144000,), data=data.data)\n            for i2 in range(20):\n                T_softmax_maxelem_1[i2] = T.float32(-3.4028234663852886e+38)\n                for k in range(36):\n                    T_softmax_maxelem_1[i2] = T.max(T_softmax_maxelem_1[i2], data_1[i0_i1_fused * 720 + i2 * 36 + k])\n            T_softmax_expsum_1 = T.Buffer((20,), data=T_softmax_expsum)\n            for i2 in range(20):\n                cse_var_36: T.int32 = i0_i1_fused * 720 + i2 * 36\n                cse_var_35: T.int32 = cse_var_36 + 9\n                cse_var_34: T.int32 = cse_var_36 + 8\n                cse_var_33: T.int32 = cse_var_36 + 7\n                cse_var_32: T.int32 = cse_var_36 + 6\n                cse_var_31: T.int32 = cse_var_36 + 5\n                cse_var_30: T.int32 = cse_var_36 + 4\n                cse_var_29: T.int32 = cse_var_36 + 35\n                cse_var_28: T.int32 = cse_var_36 + 34\n                cse_var_27: T.int32 = cse_var_36 + 33\n                cse_var_26: T.int32 = cse_var_36 + 32\n                cse_var_25: T.int32 = cse_var_36 + 31\n                cse_var_24: T.int32 = cse_var_36 + 30\n                cse_var_23: T.int32 = cse_var_36 + 3\n                cse_var_22: T.int32 = cse_var_36 + 29\n                cse_var_21: T.int32 = cse_var_36 + 28\n                cse_var_20: T.int32 = cse_var_36 + 27\n                cse_var_19: T.int32 = cse_var_36 + 26\n                cse_var_18: T.int32 = cse_var_36 + 25\n                cse_var_17: T.int32 = cse_var_36 + 24\n                cse_var_16: T.int32 = cse_var_36 + 23\n                cse_var_15: T.int32 = cse_var_36 + 22\n                cse_var_14: T.int32 = cse_var_36 + 21\n                cse_var_13: T.int32 = cse_var_36 + 20\n                cse_var_12: T.int32 = cse_var_36 + 2\n                cse_var_11: T.int32 = cse_var_36 + 19\n                cse_var_10: T.int32 = cse_var_36 + 18\n                cse_var_9: T.int32 = cse_var_36 + 17\n                cse_var_8: T.int32 = cse_var_36 + 16\n                cse_var_7: T.int32 = cse_var_36 + 15\n                cse_var_6: T.int32 = cse_var_36 + 14\n                cse_var_5: T.int32 = cse_var_36 + 13\n                cse_var_4: T.int32 = cse_var_36 + 12\n                cse_var_3: T.int32 = cse_var_36 + 11\n                cse_var_2: T.int32 = cse_var_36 + 10\n                cse_var_1: T.int32 = cse_var_36 + 1\n                T_softmax_expsum_1[i2] = T.float32(0)\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_36] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_36] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_1] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_1] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_12] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_12] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_23] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_23] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_30] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_30] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_31] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_31] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_32] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_32] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_33] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_33] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_34] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_34] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_35] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_35] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_2] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_2] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_3] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_3] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_4] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_4] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_5] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_5] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_6] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_6] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_7] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_7] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_8] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_8] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_9] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_9] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_10] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_10] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_11] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_11] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_13] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_13] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_14] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_14] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_15] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_15] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_16] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_16] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_17] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_17] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_18] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_18] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_19] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_19] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_20] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_20] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_21] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_21] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_22] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_22] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_24] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_24] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_25] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_25] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_26] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_26] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_27] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_27] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_28] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_28] - T_softmax_maxelem_1[i2])\n                T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_29] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_29] - T_softmax_maxelem_1[i2])\n            for i2, i3 in T.grid(20, 36):\n                cse_var_37: T.int32 = i0_i1_fused * 720 + i2 * 36 + i3\n                T_softmax_norm_1 = T.Buffer((144000,), data=T_softmax_norm.data)\n                T_softmax_norm_1[cse_var_37] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(data_1[cse_var_37] - T_softmax_maxelem_1[i2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), data_1[cse_var_37] - T_softmax_maxelem_1[i2]) / T_softmax_expsum_1[i2]\n\n### CUDA Code:\n\n#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ < 700)\n#define __shfl_sync(mask, var, lane, width) \\\n        __shfl((var), (lane), (width))\n\n#define __shfl_down_sync(mask, var, offset, width) \\\n        __shfl_down((var), (offset), (width))\n\n#define __shfl_up_sync(mask, var, offset, width) \\\n        __shfl_up((var), (offset), (width))\n#endif\n\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_softmax_norm, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ T_softmax_norm, float* __restrict__ data) {\n  float normal_reduce_temp0[1];\n  float red_buf0[1];\n  __shared__ float T_softmax_maxelem[1];\n  float normal_reduce_temp0_1[1];\n  float red_buf0_1[1];\n  __shared__ float T_softmax_expsum[1];\n  normal_reduce_temp0[0] = -3.402823e+38f;\n  normal_reduce_temp0[0] = max(normal_reduce_temp0[0], data[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))]);\n  normal_reduce_temp0[0] = max(normal_reduce_temp0[0], data[(((((int)blockIdx.x) * 36) + ((int)threadIdx.x)) + 12)]);\n  normal_reduce_temp0[0] = max(normal_reduce_temp0[0], data[(((((int)blockIdx.x) * 36) + ((int)threadIdx.x)) + 24)]);\n  uint mask[1];\n  float t0[1];\n  red_buf0[0] = normal_reduce_temp0[0];\n  mask[0] = __activemask();\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 8, 32);\n  if (((int)threadIdx.x) < 4) {\n    red_buf0[0] = max(red_buf0[0], t0[0]);\n  }\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 4, 32);\n  red_buf0[0] = max(red_buf0[0], t0[0]);\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);\n  red_buf0[0] = max(red_buf0[0], t0[0]);\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);\n  red_buf0[0] = max(red_buf0[0], t0[0]);\n  red_buf0[0] = __shfl_sync(mask[0], red_buf0[0], 0, 32);\n  if (((int)threadIdx.x) == 0) {\n    T_softmax_maxelem[0] = red_buf0[0];\n  }\n  normal_reduce_temp0_1[0] = 0.000000e+00f;\n  __syncthreads();\n  for (int k_outer = 0; k_outer < 3; ++k_outer) {\n      int v_ = ((int)(floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    normal_reduce_temp0_1[0] = (normal_reduce_temp0_1[0] + max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (data[(((((int)blockIdx.x) * 36) + (k_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0])));\n  }\n  uint mask_1[1];\n  float t0_1[1];\n  red_buf0_1[0] = normal_reduce_temp0_1[0];\n  mask_1[0] = __activemask();\n  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 8, 32);\n  if (((int)threadIdx.x) < 4) {\n    red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);\n  }\n  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 4, 32);\n  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);\n  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 2, 32);\n  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);\n  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 1, 32);\n  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);\n  red_buf0_1[0] = __shfl_sync(mask_1[0], red_buf0_1[0], 0, 32);\n  if (((int)threadIdx.x) == 0) {\n    T_softmax_expsum[0] = red_buf0_1[0];\n  }\n  __syncthreads();\n  for (int i3_outer = 0; i3_outer < 3; ++i3_outer) {\n      int v__1 = ((int)(floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_softmax_norm[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] = (max(((*(float *)(&(v__1))) * ((((((((((((((1.987569e-04f * (max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (data[(((((int)blockIdx.x) * 36) + (i3_outer * 12)) + ((int)threadIdx.x))] - T_softmax_maxelem[0])) / T_softmax_expsum[0]);\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float floorf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t T_softmax_norm_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* T_softmax_norm = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* T_softmax_norm_1 = (((DLTensor*)T_softmax_norm)[0].data);\n  void* default_function_T_softmax_norm_shape = (((DLTensor*)T_softmax_norm)[0].shape);\n  void* default_function_T_softmax_norm_strides = (((DLTensor*)T_softmax_norm)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_T_softmax_norm_strides == NULL)) {\n  }\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 200; ++i0_i1_fused) {\n    float T_softmax_maxelem[20];\n    float T_softmax_expsum[20];\n    for (int32_t i2 = 0; i2 < 20; ++i2) {\n      T_softmax_maxelem[i2] = -3.402823e+38f;\n      for (int32_t k = 0; k < 36; ++k) {\n        float v_ = T_softmax_maxelem[i2];\n        float v__1 = ((float*)data_1)[(((i0_i1_fused * 720) + (i2 * 36)) + k)];\n        T_softmax_maxelem[i2] = ((v_) > (v__1) ? (v_) : (v__1));\n      }\n    }\n    for (int32_t i2_1 = 0; i2_1 < 20; ++i2_1) {\n      int32_t cse_var_36 = ((i0_i1_fused * 720) + (i2_1 * 36));\n      int32_t cse_var_35 = (cse_var_36 + 9);\n      int32_t cse_var_34 = (cse_var_36 + 8);\n      int32_t cse_var_33 = (cse_var_36 + 7);\n      int32_t cse_var_32 = (cse_var_36 + 6);\n      int32_t cse_var_31 = (cse_var_36 + 5);\n      int32_t cse_var_30 = (cse_var_36 + 4);\n      int32_t cse_var_29 = (cse_var_36 + 35);\n      int32_t cse_var_28 = (cse_var_36 + 34);\n      int32_t cse_var_27 = (cse_var_36 + 33);\n      int32_t cse_var_26 = (cse_var_36 + 32);\n      int32_t cse_var_25 = (cse_var_36 + 31);\n      int32_t cse_var_24 = (cse_var_36 + 30);\n      int32_t cse_var_23 = (cse_var_36 + 3);\n      int32_t cse_var_22 = (cse_var_36 + 29);\n      int32_t cse_var_21 = (cse_var_36 + 28);\n      int32_t cse_var_20 = (cse_var_36 + 27);\n      int32_t cse_var_19 = (cse_var_36 + 26);\n      int32_t cse_var_18 = (cse_var_36 + 25);\n      int32_t cse_var_17 = (cse_var_36 + 24);\n      int32_t cse_var_16 = (cse_var_36 + 23);\n      int32_t cse_var_15 = (cse_var_36 + 22);\n      int32_t cse_var_14 = (cse_var_36 + 21);\n      int32_t cse_var_13 = (cse_var_36 + 20);\n      int32_t cse_var_12 = (cse_var_36 + 2);\n      int32_t cse_var_11 = (cse_var_36 + 19);\n      int32_t cse_var_10 = (cse_var_36 + 18);\n      int32_t cse_var_9 = (cse_var_36 + 17);\n      int32_t cse_var_8 = (cse_var_36 + 16);\n      int32_t cse_var_7 = (cse_var_36 + 15);\n      int32_t cse_var_6 = (cse_var_36 + 14);\n      int32_t cse_var_5 = (cse_var_36 + 13);\n      int32_t cse_var_4 = (cse_var_36 + 12);\n      int32_t cse_var_3 = (cse_var_36 + 11);\n      int32_t cse_var_2 = (cse_var_36 + 10);\n      int32_t cse_var_1 = (cse_var_36 + 1);\n      T_softmax_expsum[i2_1] = 0.000000e+00f;\n        float v__2 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n        float v__3 = (v__2) < (8.837627e+01f) ? (v__2) : (8.837627e+01f);\n        int32_t v__4 = ((int32_t)(floorf(((((v__3) > (-8.837626e+01f) ? (v__3) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__5 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__6 = (v__5) < (8.837627e+01f) ? (v__5) : (8.837627e+01f);\n      float v__7 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__8 = (v__7) < (8.837627e+01f) ? (v__7) : (8.837627e+01f);\n      float v__9 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__10 = (v__9) < (8.837627e+01f) ? (v__9) : (8.837627e+01f);\n      float v__11 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__12 = (v__11) < (8.837627e+01f) ? (v__11) : (8.837627e+01f);\n      float v__13 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__14 = (v__13) < (8.837627e+01f) ? (v__13) : (8.837627e+01f);\n      float v__15 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__16 = (v__15) < (8.837627e+01f) ? (v__15) : (8.837627e+01f);\n      float v__17 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__18 = (v__17) < (8.837627e+01f) ? (v__17) : (8.837627e+01f);\n      float v__19 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__20 = (v__19) < (8.837627e+01f) ? (v__19) : (8.837627e+01f);\n      float v__21 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__22 = (v__21) < (8.837627e+01f) ? (v__21) : (8.837627e+01f);\n      float v__23 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__24 = (v__23) < (8.837627e+01f) ? (v__23) : (8.837627e+01f);\n      float v__25 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__26 = (v__25) < (8.837627e+01f) ? (v__25) : (8.837627e+01f);\n      float v__27 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__28 = (v__27) < (8.837627e+01f) ? (v__27) : (8.837627e+01f);\n      float v__29 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__30 = (v__29) < (8.837627e+01f) ? (v__29) : (8.837627e+01f);\n      float v__31 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__32 = (v__31) < (8.837627e+01f) ? (v__31) : (8.837627e+01f);\n      float v__33 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__34 = (v__33) < (8.837627e+01f) ? (v__33) : (8.837627e+01f);\n      float v__35 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      float v__36 = (v__35) < (8.837627e+01f) ? (v__35) : (8.837627e+01f);\n      float v__37 = (*(float *)(&(v__4))) * ((((((((((((((1.987569e-04f * (((v__6) > (-8.837626e+01f) ? (v__6) : (-8.837626e+01f)) - (floorf(((((v__8) > (-8.837626e+01f) ? (v__8) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__10) > (-8.837626e+01f) ? (v__10) : (-8.837626e+01f)) - (floorf(((((v__12) > (-8.837626e+01f) ? (v__12) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__14) > (-8.837626e+01f) ? (v__14) : (-8.837626e+01f)) - (floorf(((((v__16) > (-8.837626e+01f) ? (v__16) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__18) > (-8.837626e+01f) ? (v__18) : (-8.837626e+01f)) - (floorf(((((v__20) > (-8.837626e+01f) ? (v__20) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__22) > (-8.837626e+01f) ? (v__22) : (-8.837626e+01f)) - (floorf(((((v__24) > (-8.837626e+01f) ? (v__24) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__26) > (-8.837626e+01f) ? (v__26) : (-8.837626e+01f)) - (floorf(((((v__28) > (-8.837626e+01f) ? (v__28) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__30) > (-8.837626e+01f) ? (v__30) : (-8.837626e+01f)) - (floorf(((((v__32) > (-8.837626e+01f) ? (v__32) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__34) > (-8.837626e+01f) ? (v__34) : (-8.837626e+01f)) - (floorf(((((v__36) > (-8.837626e+01f) ? (v__36) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__38 = ((float*)data_1)[cse_var_36] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__37) > (v__38) ? (v__37) : (v__38)));\n        float v__39 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n        float v__40 = (v__39) < (8.837627e+01f) ? (v__39) : (8.837627e+01f);\n        int32_t v__41 = ((int32_t)(floorf(((((v__40) > (-8.837626e+01f) ? (v__40) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__42 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__43 = (v__42) < (8.837627e+01f) ? (v__42) : (8.837627e+01f);\n      float v__44 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__45 = (v__44) < (8.837627e+01f) ? (v__44) : (8.837627e+01f);\n      float v__46 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__47 = (v__46) < (8.837627e+01f) ? (v__46) : (8.837627e+01f);\n      float v__48 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__49 = (v__48) < (8.837627e+01f) ? (v__48) : (8.837627e+01f);\n      float v__50 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__51 = (v__50) < (8.837627e+01f) ? (v__50) : (8.837627e+01f);\n      float v__52 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__53 = (v__52) < (8.837627e+01f) ? (v__52) : (8.837627e+01f);\n      float v__54 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__55 = (v__54) < (8.837627e+01f) ? (v__54) : (8.837627e+01f);\n      float v__56 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__57 = (v__56) < (8.837627e+01f) ? (v__56) : (8.837627e+01f);\n      float v__58 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__59 = (v__58) < (8.837627e+01f) ? (v__58) : (8.837627e+01f);\n      float v__60 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__61 = (v__60) < (8.837627e+01f) ? (v__60) : (8.837627e+01f);\n      float v__62 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__63 = (v__62) < (8.837627e+01f) ? (v__62) : (8.837627e+01f);\n      float v__64 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__65 = (v__64) < (8.837627e+01f) ? (v__64) : (8.837627e+01f);\n      float v__66 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__67 = (v__66) < (8.837627e+01f) ? (v__66) : (8.837627e+01f);\n      float v__68 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__69 = (v__68) < (8.837627e+01f) ? (v__68) : (8.837627e+01f);\n      float v__70 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__71 = (v__70) < (8.837627e+01f) ? (v__70) : (8.837627e+01f);\n      float v__72 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      float v__73 = (v__72) < (8.837627e+01f) ? (v__72) : (8.837627e+01f);\n      float v__74 = (*(float *)(&(v__41))) * ((((((((((((((1.987569e-04f * (((v__43) > (-8.837626e+01f) ? (v__43) : (-8.837626e+01f)) - (floorf(((((v__45) > (-8.837626e+01f) ? (v__45) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__47) > (-8.837626e+01f) ? (v__47) : (-8.837626e+01f)) - (floorf(((((v__49) > (-8.837626e+01f) ? (v__49) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__51) > (-8.837626e+01f) ? (v__51) : (-8.837626e+01f)) - (floorf(((((v__53) > (-8.837626e+01f) ? (v__53) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__55) > (-8.837626e+01f) ? (v__55) : (-8.837626e+01f)) - (floorf(((((v__57) > (-8.837626e+01f) ? (v__57) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__59) > (-8.837626e+01f) ? (v__59) : (-8.837626e+01f)) - (floorf(((((v__61) > (-8.837626e+01f) ? (v__61) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__63) > (-8.837626e+01f) ? (v__63) : (-8.837626e+01f)) - (floorf(((((v__65) > (-8.837626e+01f) ? (v__65) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__67) > (-8.837626e+01f) ? (v__67) : (-8.837626e+01f)) - (floorf(((((v__69) > (-8.837626e+01f) ? (v__69) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__71) > (-8.837626e+01f) ? (v__71) : (-8.837626e+01f)) - (floorf(((((v__73) > (-8.837626e+01f) ? (v__73) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__75 = ((float*)data_1)[cse_var_1] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__74) > (v__75) ? (v__74) : (v__75)));\n        float v__76 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n        float v__77 = (v__76) < (8.837627e+01f) ? (v__76) : (8.837627e+01f);\n        int32_t v__78 = ((int32_t)(floorf(((((v__77) > (-8.837626e+01f) ? (v__77) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__79 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__80 = (v__79) < (8.837627e+01f) ? (v__79) : (8.837627e+01f);\n      float v__81 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__82 = (v__81) < (8.837627e+01f) ? (v__81) : (8.837627e+01f);\n      float v__83 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__84 = (v__83) < (8.837627e+01f) ? (v__83) : (8.837627e+01f);\n      float v__85 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__86 = (v__85) < (8.837627e+01f) ? (v__85) : (8.837627e+01f);\n      float v__87 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__88 = (v__87) < (8.837627e+01f) ? (v__87) : (8.837627e+01f);\n      float v__89 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__90 = (v__89) < (8.837627e+01f) ? (v__89) : (8.837627e+01f);\n      float v__91 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__92 = (v__91) < (8.837627e+01f) ? (v__91) : (8.837627e+01f);\n      float v__93 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__94 = (v__93) < (8.837627e+01f) ? (v__93) : (8.837627e+01f);\n      float v__95 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__96 = (v__95) < (8.837627e+01f) ? (v__95) : (8.837627e+01f);\n      float v__97 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__98 = (v__97) < (8.837627e+01f) ? (v__97) : (8.837627e+01f);\n      float v__99 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__100 = (v__99) < (8.837627e+01f) ? (v__99) : (8.837627e+01f);\n      float v__101 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__102 = (v__101) < (8.837627e+01f) ? (v__101) : (8.837627e+01f);\n      float v__103 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__104 = (v__103) < (8.837627e+01f) ? (v__103) : (8.837627e+01f);\n      float v__105 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__106 = (v__105) < (8.837627e+01f) ? (v__105) : (8.837627e+01f);\n      float v__107 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__108 = (v__107) < (8.837627e+01f) ? (v__107) : (8.837627e+01f);\n      float v__109 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      float v__110 = (v__109) < (8.837627e+01f) ? (v__109) : (8.837627e+01f);\n      float v__111 = (*(float *)(&(v__78))) * ((((((((((((((1.987569e-04f * (((v__80) > (-8.837626e+01f) ? (v__80) : (-8.837626e+01f)) - (floorf(((((v__82) > (-8.837626e+01f) ? (v__82) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__84) > (-8.837626e+01f) ? (v__84) : (-8.837626e+01f)) - (floorf(((((v__86) > (-8.837626e+01f) ? (v__86) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__88) > (-8.837626e+01f) ? (v__88) : (-8.837626e+01f)) - (floorf(((((v__90) > (-8.837626e+01f) ? (v__90) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__92) > (-8.837626e+01f) ? (v__92) : (-8.837626e+01f)) - (floorf(((((v__94) > (-8.837626e+01f) ? (v__94) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__96) > (-8.837626e+01f) ? (v__96) : (-8.837626e+01f)) - (floorf(((((v__98) > (-8.837626e+01f) ? (v__98) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__100) > (-8.837626e+01f) ? (v__100) : (-8.837626e+01f)) - (floorf(((((v__102) > (-8.837626e+01f) ? (v__102) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__104) > (-8.837626e+01f) ? (v__104) : (-8.837626e+01f)) - (floorf(((((v__106) > (-8.837626e+01f) ? (v__106) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__108) > (-8.837626e+01f) ? (v__108) : (-8.837626e+01f)) - (floorf(((((v__110) > (-8.837626e+01f) ? (v__110) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__112 = ((float*)data_1)[cse_var_12] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__111) > (v__112) ? (v__111) : (v__112)));\n        float v__113 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n        float v__114 = (v__113) < (8.837627e+01f) ? (v__113) : (8.837627e+01f);\n        int32_t v__115 = ((int32_t)(floorf(((((v__114) > (-8.837626e+01f) ? (v__114) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__116 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__117 = (v__116) < (8.837627e+01f) ? (v__116) : (8.837627e+01f);\n      float v__118 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__119 = (v__118) < (8.837627e+01f) ? (v__118) : (8.837627e+01f);\n      float v__120 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__121 = (v__120) < (8.837627e+01f) ? (v__120) : (8.837627e+01f);\n      float v__122 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__123 = (v__122) < (8.837627e+01f) ? (v__122) : (8.837627e+01f);\n      float v__124 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__125 = (v__124) < (8.837627e+01f) ? (v__124) : (8.837627e+01f);\n      float v__126 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__127 = (v__126) < (8.837627e+01f) ? (v__126) : (8.837627e+01f);\n      float v__128 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__129 = (v__128) < (8.837627e+01f) ? (v__128) : (8.837627e+01f);\n      float v__130 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__131 = (v__130) < (8.837627e+01f) ? (v__130) : (8.837627e+01f);\n      float v__132 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__133 = (v__132) < (8.837627e+01f) ? (v__132) : (8.837627e+01f);\n      float v__134 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__135 = (v__134) < (8.837627e+01f) ? (v__134) : (8.837627e+01f);\n      float v__136 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__137 = (v__136) < (8.837627e+01f) ? (v__136) : (8.837627e+01f);\n      float v__138 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__139 = (v__138) < (8.837627e+01f) ? (v__138) : (8.837627e+01f);\n      float v__140 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__141 = (v__140) < (8.837627e+01f) ? (v__140) : (8.837627e+01f);\n      float v__142 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__143 = (v__142) < (8.837627e+01f) ? (v__142) : (8.837627e+01f);\n      float v__144 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__145 = (v__144) < (8.837627e+01f) ? (v__144) : (8.837627e+01f);\n      float v__146 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      float v__147 = (v__146) < (8.837627e+01f) ? (v__146) : (8.837627e+01f);\n      float v__148 = (*(float *)(&(v__115))) * ((((((((((((((1.987569e-04f * (((v__117) > (-8.837626e+01f) ? (v__117) : (-8.837626e+01f)) - (floorf(((((v__119) > (-8.837626e+01f) ? (v__119) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__121) > (-8.837626e+01f) ? (v__121) : (-8.837626e+01f)) - (floorf(((((v__123) > (-8.837626e+01f) ? (v__123) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__125) > (-8.837626e+01f) ? (v__125) : (-8.837626e+01f)) - (floorf(((((v__127) > (-8.837626e+01f) ? (v__127) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__129) > (-8.837626e+01f) ? (v__129) : (-8.837626e+01f)) - (floorf(((((v__131) > (-8.837626e+01f) ? (v__131) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__133) > (-8.837626e+01f) ? (v__133) : (-8.837626e+01f)) - (floorf(((((v__135) > (-8.837626e+01f) ? (v__135) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__137) > (-8.837626e+01f) ? (v__137) : (-8.837626e+01f)) - (floorf(((((v__139) > (-8.837626e+01f) ? (v__139) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__141) > (-8.837626e+01f) ? (v__141) : (-8.837626e+01f)) - (floorf(((((v__143) > (-8.837626e+01f) ? (v__143) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__145) > (-8.837626e+01f) ? (v__145) : (-8.837626e+01f)) - (floorf(((((v__147) > (-8.837626e+01f) ? (v__147) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__149 = ((float*)data_1)[cse_var_23] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__148) > (v__149) ? (v__148) : (v__149)));\n        float v__150 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n        float v__151 = (v__150) < (8.837627e+01f) ? (v__150) : (8.837627e+01f);\n        int32_t v__152 = ((int32_t)(floorf(((((v__151) > (-8.837626e+01f) ? (v__151) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__153 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__154 = (v__153) < (8.837627e+01f) ? (v__153) : (8.837627e+01f);\n      float v__155 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__156 = (v__155) < (8.837627e+01f) ? (v__155) : (8.837627e+01f);\n      float v__157 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__158 = (v__157) < (8.837627e+01f) ? (v__157) : (8.837627e+01f);\n      float v__159 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__160 = (v__159) < (8.837627e+01f) ? (v__159) : (8.837627e+01f);\n      float v__161 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__162 = (v__161) < (8.837627e+01f) ? (v__161) : (8.837627e+01f);\n      float v__163 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__164 = (v__163) < (8.837627e+01f) ? (v__163) : (8.837627e+01f);\n      float v__165 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__166 = (v__165) < (8.837627e+01f) ? (v__165) : (8.837627e+01f);\n      float v__167 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__168 = (v__167) < (8.837627e+01f) ? (v__167) : (8.837627e+01f);\n      float v__169 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__170 = (v__169) < (8.837627e+01f) ? (v__169) : (8.837627e+01f);\n      float v__171 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__172 = (v__171) < (8.837627e+01f) ? (v__171) : (8.837627e+01f);\n      float v__173 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__174 = (v__173) < (8.837627e+01f) ? (v__173) : (8.837627e+01f);\n      float v__175 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__176 = (v__175) < (8.837627e+01f) ? (v__175) : (8.837627e+01f);\n      float v__177 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__178 = (v__177) < (8.837627e+01f) ? (v__177) : (8.837627e+01f);\n      float v__179 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__180 = (v__179) < (8.837627e+01f) ? (v__179) : (8.837627e+01f);\n      float v__181 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__182 = (v__181) < (8.837627e+01f) ? (v__181) : (8.837627e+01f);\n      float v__183 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      float v__184 = (v__183) < (8.837627e+01f) ? (v__183) : (8.837627e+01f);\n      float v__185 = (*(float *)(&(v__152))) * ((((((((((((((1.987569e-04f * (((v__154) > (-8.837626e+01f) ? (v__154) : (-8.837626e+01f)) - (floorf(((((v__156) > (-8.837626e+01f) ? (v__156) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__158) > (-8.837626e+01f) ? (v__158) : (-8.837626e+01f)) - (floorf(((((v__160) > (-8.837626e+01f) ? (v__160) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__162) > (-8.837626e+01f) ? (v__162) : (-8.837626e+01f)) - (floorf(((((v__164) > (-8.837626e+01f) ? (v__164) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__166) > (-8.837626e+01f) ? (v__166) : (-8.837626e+01f)) - (floorf(((((v__168) > (-8.837626e+01f) ? (v__168) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__170) > (-8.837626e+01f) ? (v__170) : (-8.837626e+01f)) - (floorf(((((v__172) > (-8.837626e+01f) ? (v__172) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__174) > (-8.837626e+01f) ? (v__174) : (-8.837626e+01f)) - (floorf(((((v__176) > (-8.837626e+01f) ? (v__176) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__178) > (-8.837626e+01f) ? (v__178) : (-8.837626e+01f)) - (floorf(((((v__180) > (-8.837626e+01f) ? (v__180) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__182) > (-8.837626e+01f) ? (v__182) : (-8.837626e+01f)) - (floorf(((((v__184) > (-8.837626e+01f) ? (v__184) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__186 = ((float*)data_1)[cse_var_30] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__185) > (v__186) ? (v__185) : (v__186)));\n        float v__187 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n        float v__188 = (v__187) < (8.837627e+01f) ? (v__187) : (8.837627e+01f);\n        int32_t v__189 = ((int32_t)(floorf(((((v__188) > (-8.837626e+01f) ? (v__188) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__190 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__191 = (v__190) < (8.837627e+01f) ? (v__190) : (8.837627e+01f);\n      float v__192 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__193 = (v__192) < (8.837627e+01f) ? (v__192) : (8.837627e+01f);\n      float v__194 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__195 = (v__194) < (8.837627e+01f) ? (v__194) : (8.837627e+01f);\n      float v__196 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__197 = (v__196) < (8.837627e+01f) ? (v__196) : (8.837627e+01f);\n      float v__198 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__199 = (v__198) < (8.837627e+01f) ? (v__198) : (8.837627e+01f);\n      float v__200 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__201 = (v__200) < (8.837627e+01f) ? (v__200) : (8.837627e+01f);\n      float v__202 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__203 = (v__202) < (8.837627e+01f) ? (v__202) : (8.837627e+01f);\n      float v__204 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__205 = (v__204) < (8.837627e+01f) ? (v__204) : (8.837627e+01f);\n      float v__206 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__207 = (v__206) < (8.837627e+01f) ? (v__206) : (8.837627e+01f);\n      float v__208 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__209 = (v__208) < (8.837627e+01f) ? (v__208) : (8.837627e+01f);\n      float v__210 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__211 = (v__210) < (8.837627e+01f) ? (v__210) : (8.837627e+01f);\n      float v__212 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__213 = (v__212) < (8.837627e+01f) ? (v__212) : (8.837627e+01f);\n      float v__214 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__215 = (v__214) < (8.837627e+01f) ? (v__214) : (8.837627e+01f);\n      float v__216 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__217 = (v__216) < (8.837627e+01f) ? (v__216) : (8.837627e+01f);\n      float v__218 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__219 = (v__218) < (8.837627e+01f) ? (v__218) : (8.837627e+01f);\n      float v__220 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      float v__221 = (v__220) < (8.837627e+01f) ? (v__220) : (8.837627e+01f);\n      float v__222 = (*(float *)(&(v__189))) * ((((((((((((((1.987569e-04f * (((v__191) > (-8.837626e+01f) ? (v__191) : (-8.837626e+01f)) - (floorf(((((v__193) > (-8.837626e+01f) ? (v__193) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__195) > (-8.837626e+01f) ? (v__195) : (-8.837626e+01f)) - (floorf(((((v__197) > (-8.837626e+01f) ? (v__197) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__199) > (-8.837626e+01f) ? (v__199) : (-8.837626e+01f)) - (floorf(((((v__201) > (-8.837626e+01f) ? (v__201) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__203) > (-8.837626e+01f) ? (v__203) : (-8.837626e+01f)) - (floorf(((((v__205) > (-8.837626e+01f) ? (v__205) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__207) > (-8.837626e+01f) ? (v__207) : (-8.837626e+01f)) - (floorf(((((v__209) > (-8.837626e+01f) ? (v__209) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__211) > (-8.837626e+01f) ? (v__211) : (-8.837626e+01f)) - (floorf(((((v__213) > (-8.837626e+01f) ? (v__213) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__215) > (-8.837626e+01f) ? (v__215) : (-8.837626e+01f)) - (floorf(((((v__217) > (-8.837626e+01f) ? (v__217) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__219) > (-8.837626e+01f) ? (v__219) : (-8.837626e+01f)) - (floorf(((((v__221) > (-8.837626e+01f) ? (v__221) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__223 = ((float*)data_1)[cse_var_31] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__222) > (v__223) ? (v__222) : (v__223)));\n        float v__224 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n        float v__225 = (v__224) < (8.837627e+01f) ? (v__224) : (8.837627e+01f);\n        int32_t v__226 = ((int32_t)(floorf(((((v__225) > (-8.837626e+01f) ? (v__225) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__227 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__228 = (v__227) < (8.837627e+01f) ? (v__227) : (8.837627e+01f);\n      float v__229 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__230 = (v__229) < (8.837627e+01f) ? (v__229) : (8.837627e+01f);\n      float v__231 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__232 = (v__231) < (8.837627e+01f) ? (v__231) : (8.837627e+01f);\n      float v__233 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__234 = (v__233) < (8.837627e+01f) ? (v__233) : (8.837627e+01f);\n      float v__235 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__236 = (v__235) < (8.837627e+01f) ? (v__235) : (8.837627e+01f);\n      float v__237 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__238 = (v__237) < (8.837627e+01f) ? (v__237) : (8.837627e+01f);\n      float v__239 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__240 = (v__239) < (8.837627e+01f) ? (v__239) : (8.837627e+01f);\n      float v__241 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__242 = (v__241) < (8.837627e+01f) ? (v__241) : (8.837627e+01f);\n      float v__243 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__244 = (v__243) < (8.837627e+01f) ? (v__243) : (8.837627e+01f);\n      float v__245 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__246 = (v__245) < (8.837627e+01f) ? (v__245) : (8.837627e+01f);\n      float v__247 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__248 = (v__247) < (8.837627e+01f) ? (v__247) : (8.837627e+01f);\n      float v__249 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__250 = (v__249) < (8.837627e+01f) ? (v__249) : (8.837627e+01f);\n      float v__251 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__252 = (v__251) < (8.837627e+01f) ? (v__251) : (8.837627e+01f);\n      float v__253 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__254 = (v__253) < (8.837627e+01f) ? (v__253) : (8.837627e+01f);\n      float v__255 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__256 = (v__255) < (8.837627e+01f) ? (v__255) : (8.837627e+01f);\n      float v__257 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      float v__258 = (v__257) < (8.837627e+01f) ? (v__257) : (8.837627e+01f);\n      float v__259 = (*(float *)(&(v__226))) * ((((((((((((((1.987569e-04f * (((v__228) > (-8.837626e+01f) ? (v__228) : (-8.837626e+01f)) - (floorf(((((v__230) > (-8.837626e+01f) ? (v__230) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__232) > (-8.837626e+01f) ? (v__232) : (-8.837626e+01f)) - (floorf(((((v__234) > (-8.837626e+01f) ? (v__234) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__236) > (-8.837626e+01f) ? (v__236) : (-8.837626e+01f)) - (floorf(((((v__238) > (-8.837626e+01f) ? (v__238) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__240) > (-8.837626e+01f) ? (v__240) : (-8.837626e+01f)) - (floorf(((((v__242) > (-8.837626e+01f) ? (v__242) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__244) > (-8.837626e+01f) ? (v__244) : (-8.837626e+01f)) - (floorf(((((v__246) > (-8.837626e+01f) ? (v__246) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__248) > (-8.837626e+01f) ? (v__248) : (-8.837626e+01f)) - (floorf(((((v__250) > (-8.837626e+01f) ? (v__250) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__252) > (-8.837626e+01f) ? (v__252) : (-8.837626e+01f)) - (floorf(((((v__254) > (-8.837626e+01f) ? (v__254) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__256) > (-8.837626e+01f) ? (v__256) : (-8.837626e+01f)) - (floorf(((((v__258) > (-8.837626e+01f) ? (v__258) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__260 = ((float*)data_1)[cse_var_32] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__259) > (v__260) ? (v__259) : (v__260)));\n        float v__261 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n        float v__262 = (v__261) < (8.837627e+01f) ? (v__261) : (8.837627e+01f);\n        int32_t v__263 = ((int32_t)(floorf(((((v__262) > (-8.837626e+01f) ? (v__262) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__264 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__265 = (v__264) < (8.837627e+01f) ? (v__264) : (8.837627e+01f);\n      float v__266 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__267 = (v__266) < (8.837627e+01f) ? (v__266) : (8.837627e+01f);\n      float v__268 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__269 = (v__268) < (8.837627e+01f) ? (v__268) : (8.837627e+01f);\n      float v__270 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__271 = (v__270) < (8.837627e+01f) ? (v__270) : (8.837627e+01f);\n      float v__272 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__273 = (v__272) < (8.837627e+01f) ? (v__272) : (8.837627e+01f);\n      float v__274 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__275 = (v__274) < (8.837627e+01f) ? (v__274) : (8.837627e+01f);\n      float v__276 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__277 = (v__276) < (8.837627e+01f) ? (v__276) : (8.837627e+01f);\n      float v__278 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__279 = (v__278) < (8.837627e+01f) ? (v__278) : (8.837627e+01f);\n      float v__280 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__281 = (v__280) < (8.837627e+01f) ? (v__280) : (8.837627e+01f);\n      float v__282 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__283 = (v__282) < (8.837627e+01f) ? (v__282) : (8.837627e+01f);\n      float v__284 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__285 = (v__284) < (8.837627e+01f) ? (v__284) : (8.837627e+01f);\n      float v__286 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__287 = (v__286) < (8.837627e+01f) ? (v__286) : (8.837627e+01f);\n      float v__288 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__289 = (v__288) < (8.837627e+01f) ? (v__288) : (8.837627e+01f);\n      float v__290 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__291 = (v__290) < (8.837627e+01f) ? (v__290) : (8.837627e+01f);\n      float v__292 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__293 = (v__292) < (8.837627e+01f) ? (v__292) : (8.837627e+01f);\n      float v__294 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      float v__295 = (v__294) < (8.837627e+01f) ? (v__294) : (8.837627e+01f);\n      float v__296 = (*(float *)(&(v__263))) * ((((((((((((((1.987569e-04f * (((v__265) > (-8.837626e+01f) ? (v__265) : (-8.837626e+01f)) - (floorf(((((v__267) > (-8.837626e+01f) ? (v__267) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__269) > (-8.837626e+01f) ? (v__269) : (-8.837626e+01f)) - (floorf(((((v__271) > (-8.837626e+01f) ? (v__271) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__273) > (-8.837626e+01f) ? (v__273) : (-8.837626e+01f)) - (floorf(((((v__275) > (-8.837626e+01f) ? (v__275) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__277) > (-8.837626e+01f) ? (v__277) : (-8.837626e+01f)) - (floorf(((((v__279) > (-8.837626e+01f) ? (v__279) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__281) > (-8.837626e+01f) ? (v__281) : (-8.837626e+01f)) - (floorf(((((v__283) > (-8.837626e+01f) ? (v__283) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__285) > (-8.837626e+01f) ? (v__285) : (-8.837626e+01f)) - (floorf(((((v__287) > (-8.837626e+01f) ? (v__287) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__289) > (-8.837626e+01f) ? (v__289) : (-8.837626e+01f)) - (floorf(((((v__291) > (-8.837626e+01f) ? (v__291) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__293) > (-8.837626e+01f) ? (v__293) : (-8.837626e+01f)) - (floorf(((((v__295) > (-8.837626e+01f) ? (v__295) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__297 = ((float*)data_1)[cse_var_33] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__296) > (v__297) ? (v__296) : (v__297)));\n        float v__298 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n        float v__299 = (v__298) < (8.837627e+01f) ? (v__298) : (8.837627e+01f);\n        int32_t v__300 = ((int32_t)(floorf(((((v__299) > (-8.837626e+01f) ? (v__299) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__301 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__302 = (v__301) < (8.837627e+01f) ? (v__301) : (8.837627e+01f);\n      float v__303 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__304 = (v__303) < (8.837627e+01f) ? (v__303) : (8.837627e+01f);\n      float v__305 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__306 = (v__305) < (8.837627e+01f) ? (v__305) : (8.837627e+01f);\n      float v__307 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__308 = (v__307) < (8.837627e+01f) ? (v__307) : (8.837627e+01f);\n      float v__309 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__310 = (v__309) < (8.837627e+01f) ? (v__309) : (8.837627e+01f);\n      float v__311 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__312 = (v__311) < (8.837627e+01f) ? (v__311) : (8.837627e+01f);\n      float v__313 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__314 = (v__313) < (8.837627e+01f) ? (v__313) : (8.837627e+01f);\n      float v__315 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__316 = (v__315) < (8.837627e+01f) ? (v__315) : (8.837627e+01f);\n      float v__317 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__318 = (v__317) < (8.837627e+01f) ? (v__317) : (8.837627e+01f);\n      float v__319 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__320 = (v__319) < (8.837627e+01f) ? (v__319) : (8.837627e+01f);\n      float v__321 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__322 = (v__321) < (8.837627e+01f) ? (v__321) : (8.837627e+01f);\n      float v__323 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__324 = (v__323) < (8.837627e+01f) ? (v__323) : (8.837627e+01f);\n      float v__325 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__326 = (v__325) < (8.837627e+01f) ? (v__325) : (8.837627e+01f);\n      float v__327 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__328 = (v__327) < (8.837627e+01f) ? (v__327) : (8.837627e+01f);\n      float v__329 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__330 = (v__329) < (8.837627e+01f) ? (v__329) : (8.837627e+01f);\n      float v__331 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      float v__332 = (v__331) < (8.837627e+01f) ? (v__331) : (8.837627e+01f);\n      float v__333 = (*(float *)(&(v__300))) * ((((((((((((((1.987569e-04f * (((v__302) > (-8.837626e+01f) ? (v__302) : (-8.837626e+01f)) - (floorf(((((v__304) > (-8.837626e+01f) ? (v__304) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__306) > (-8.837626e+01f) ? (v__306) : (-8.837626e+01f)) - (floorf(((((v__308) > (-8.837626e+01f) ? (v__308) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__310) > (-8.837626e+01f) ? (v__310) : (-8.837626e+01f)) - (floorf(((((v__312) > (-8.837626e+01f) ? (v__312) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__314) > (-8.837626e+01f) ? (v__314) : (-8.837626e+01f)) - (floorf(((((v__316) > (-8.837626e+01f) ? (v__316) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__318) > (-8.837626e+01f) ? (v__318) : (-8.837626e+01f)) - (floorf(((((v__320) > (-8.837626e+01f) ? (v__320) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__322) > (-8.837626e+01f) ? (v__322) : (-8.837626e+01f)) - (floorf(((((v__324) > (-8.837626e+01f) ? (v__324) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__326) > (-8.837626e+01f) ? (v__326) : (-8.837626e+01f)) - (floorf(((((v__328) > (-8.837626e+01f) ? (v__328) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__330) > (-8.837626e+01f) ? (v__330) : (-8.837626e+01f)) - (floorf(((((v__332) > (-8.837626e+01f) ? (v__332) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__334 = ((float*)data_1)[cse_var_34] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__333) > (v__334) ? (v__333) : (v__334)));\n        float v__335 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n        float v__336 = (v__335) < (8.837627e+01f) ? (v__335) : (8.837627e+01f);\n        int32_t v__337 = ((int32_t)(floorf(((((v__336) > (-8.837626e+01f) ? (v__336) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__338 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__339 = (v__338) < (8.837627e+01f) ? (v__338) : (8.837627e+01f);\n      float v__340 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__341 = (v__340) < (8.837627e+01f) ? (v__340) : (8.837627e+01f);\n      float v__342 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__343 = (v__342) < (8.837627e+01f) ? (v__342) : (8.837627e+01f);\n      float v__344 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__345 = (v__344) < (8.837627e+01f) ? (v__344) : (8.837627e+01f);\n      float v__346 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__347 = (v__346) < (8.837627e+01f) ? (v__346) : (8.837627e+01f);\n      float v__348 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__349 = (v__348) < (8.837627e+01f) ? (v__348) : (8.837627e+01f);\n      float v__350 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__351 = (v__350) < (8.837627e+01f) ? (v__350) : (8.837627e+01f);\n      float v__352 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__353 = (v__352) < (8.837627e+01f) ? (v__352) : (8.837627e+01f);\n      float v__354 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__355 = (v__354) < (8.837627e+01f) ? (v__354) : (8.837627e+01f);\n      float v__356 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__357 = (v__356) < (8.837627e+01f) ? (v__356) : (8.837627e+01f);\n      float v__358 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__359 = (v__358) < (8.837627e+01f) ? (v__358) : (8.837627e+01f);\n      float v__360 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__361 = (v__360) < (8.837627e+01f) ? (v__360) : (8.837627e+01f);\n      float v__362 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__363 = (v__362) < (8.837627e+01f) ? (v__362) : (8.837627e+01f);\n      float v__364 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__365 = (v__364) < (8.837627e+01f) ? (v__364) : (8.837627e+01f);\n      float v__366 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__367 = (v__366) < (8.837627e+01f) ? (v__366) : (8.837627e+01f);\n      float v__368 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      float v__369 = (v__368) < (8.837627e+01f) ? (v__368) : (8.837627e+01f);\n      float v__370 = (*(float *)(&(v__337))) * ((((((((((((((1.987569e-04f * (((v__339) > (-8.837626e+01f) ? (v__339) : (-8.837626e+01f)) - (floorf(((((v__341) > (-8.837626e+01f) ? (v__341) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__343) > (-8.837626e+01f) ? (v__343) : (-8.837626e+01f)) - (floorf(((((v__345) > (-8.837626e+01f) ? (v__345) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__347) > (-8.837626e+01f) ? (v__347) : (-8.837626e+01f)) - (floorf(((((v__349) > (-8.837626e+01f) ? (v__349) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__351) > (-8.837626e+01f) ? (v__351) : (-8.837626e+01f)) - (floorf(((((v__353) > (-8.837626e+01f) ? (v__353) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__355) > (-8.837626e+01f) ? (v__355) : (-8.837626e+01f)) - (floorf(((((v__357) > (-8.837626e+01f) ? (v__357) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__359) > (-8.837626e+01f) ? (v__359) : (-8.837626e+01f)) - (floorf(((((v__361) > (-8.837626e+01f) ? (v__361) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__363) > (-8.837626e+01f) ? (v__363) : (-8.837626e+01f)) - (floorf(((((v__365) > (-8.837626e+01f) ? (v__365) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__367) > (-8.837626e+01f) ? (v__367) : (-8.837626e+01f)) - (floorf(((((v__369) > (-8.837626e+01f) ? (v__369) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__371 = ((float*)data_1)[cse_var_35] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__370) > (v__371) ? (v__370) : (v__371)));\n        float v__372 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n        float v__373 = (v__372) < (8.837627e+01f) ? (v__372) : (8.837627e+01f);\n        int32_t v__374 = ((int32_t)(floorf(((((v__373) > (-8.837626e+01f) ? (v__373) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__375 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__376 = (v__375) < (8.837627e+01f) ? (v__375) : (8.837627e+01f);\n      float v__377 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__378 = (v__377) < (8.837627e+01f) ? (v__377) : (8.837627e+01f);\n      float v__379 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__380 = (v__379) < (8.837627e+01f) ? (v__379) : (8.837627e+01f);\n      float v__381 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__382 = (v__381) < (8.837627e+01f) ? (v__381) : (8.837627e+01f);\n      float v__383 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__384 = (v__383) < (8.837627e+01f) ? (v__383) : (8.837627e+01f);\n      float v__385 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__386 = (v__385) < (8.837627e+01f) ? (v__385) : (8.837627e+01f);\n      float v__387 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__388 = (v__387) < (8.837627e+01f) ? (v__387) : (8.837627e+01f);\n      float v__389 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__390 = (v__389) < (8.837627e+01f) ? (v__389) : (8.837627e+01f);\n      float v__391 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__392 = (v__391) < (8.837627e+01f) ? (v__391) : (8.837627e+01f);\n      float v__393 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__394 = (v__393) < (8.837627e+01f) ? (v__393) : (8.837627e+01f);\n      float v__395 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__396 = (v__395) < (8.837627e+01f) ? (v__395) : (8.837627e+01f);\n      float v__397 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__398 = (v__397) < (8.837627e+01f) ? (v__397) : (8.837627e+01f);\n      float v__399 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__400 = (v__399) < (8.837627e+01f) ? (v__399) : (8.837627e+01f);\n      float v__401 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__402 = (v__401) < (8.837627e+01f) ? (v__401) : (8.837627e+01f);\n      float v__403 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__404 = (v__403) < (8.837627e+01f) ? (v__403) : (8.837627e+01f);\n      float v__405 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      float v__406 = (v__405) < (8.837627e+01f) ? (v__405) : (8.837627e+01f);\n      float v__407 = (*(float *)(&(v__374))) * ((((((((((((((1.987569e-04f * (((v__376) > (-8.837626e+01f) ? (v__376) : (-8.837626e+01f)) - (floorf(((((v__378) > (-8.837626e+01f) ? (v__378) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__380) > (-8.837626e+01f) ? (v__380) : (-8.837626e+01f)) - (floorf(((((v__382) > (-8.837626e+01f) ? (v__382) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__384) > (-8.837626e+01f) ? (v__384) : (-8.837626e+01f)) - (floorf(((((v__386) > (-8.837626e+01f) ? (v__386) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__388) > (-8.837626e+01f) ? (v__388) : (-8.837626e+01f)) - (floorf(((((v__390) > (-8.837626e+01f) ? (v__390) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__392) > (-8.837626e+01f) ? (v__392) : (-8.837626e+01f)) - (floorf(((((v__394) > (-8.837626e+01f) ? (v__394) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__396) > (-8.837626e+01f) ? (v__396) : (-8.837626e+01f)) - (floorf(((((v__398) > (-8.837626e+01f) ? (v__398) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__400) > (-8.837626e+01f) ? (v__400) : (-8.837626e+01f)) - (floorf(((((v__402) > (-8.837626e+01f) ? (v__402) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__404) > (-8.837626e+01f) ? (v__404) : (-8.837626e+01f)) - (floorf(((((v__406) > (-8.837626e+01f) ? (v__406) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__408 = ((float*)data_1)[cse_var_2] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__407) > (v__408) ? (v__407) : (v__408)));\n        float v__409 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n        float v__410 = (v__409) < (8.837627e+01f) ? (v__409) : (8.837627e+01f);\n        int32_t v__411 = ((int32_t)(floorf(((((v__410) > (-8.837626e+01f) ? (v__410) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__412 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__413 = (v__412) < (8.837627e+01f) ? (v__412) : (8.837627e+01f);\n      float v__414 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__415 = (v__414) < (8.837627e+01f) ? (v__414) : (8.837627e+01f);\n      float v__416 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__417 = (v__416) < (8.837627e+01f) ? (v__416) : (8.837627e+01f);\n      float v__418 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__419 = (v__418) < (8.837627e+01f) ? (v__418) : (8.837627e+01f);\n      float v__420 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__421 = (v__420) < (8.837627e+01f) ? (v__420) : (8.837627e+01f);\n      float v__422 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__423 = (v__422) < (8.837627e+01f) ? (v__422) : (8.837627e+01f);\n      float v__424 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__425 = (v__424) < (8.837627e+01f) ? (v__424) : (8.837627e+01f);\n      float v__426 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__427 = (v__426) < (8.837627e+01f) ? (v__426) : (8.837627e+01f);\n      float v__428 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__429 = (v__428) < (8.837627e+01f) ? (v__428) : (8.837627e+01f);\n      float v__430 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__431 = (v__430) < (8.837627e+01f) ? (v__430) : (8.837627e+01f);\n      float v__432 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__433 = (v__432) < (8.837627e+01f) ? (v__432) : (8.837627e+01f);\n      float v__434 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__435 = (v__434) < (8.837627e+01f) ? (v__434) : (8.837627e+01f);\n      float v__436 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__437 = (v__436) < (8.837627e+01f) ? (v__436) : (8.837627e+01f);\n      float v__438 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__439 = (v__438) < (8.837627e+01f) ? (v__438) : (8.837627e+01f);\n      float v__440 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__441 = (v__440) < (8.837627e+01f) ? (v__440) : (8.837627e+01f);\n      float v__442 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      float v__443 = (v__442) < (8.837627e+01f) ? (v__442) : (8.837627e+01f);\n      float v__444 = (*(float *)(&(v__411))) * ((((((((((((((1.987569e-04f * (((v__413) > (-8.837626e+01f) ? (v__413) : (-8.837626e+01f)) - (floorf(((((v__415) > (-8.837626e+01f) ? (v__415) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__417) > (-8.837626e+01f) ? (v__417) : (-8.837626e+01f)) - (floorf(((((v__419) > (-8.837626e+01f) ? (v__419) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__421) > (-8.837626e+01f) ? (v__421) : (-8.837626e+01f)) - (floorf(((((v__423) > (-8.837626e+01f) ? (v__423) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__425) > (-8.837626e+01f) ? (v__425) : (-8.837626e+01f)) - (floorf(((((v__427) > (-8.837626e+01f) ? (v__427) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__429) > (-8.837626e+01f) ? (v__429) : (-8.837626e+01f)) - (floorf(((((v__431) > (-8.837626e+01f) ? (v__431) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__433) > (-8.837626e+01f) ? (v__433) : (-8.837626e+01f)) - (floorf(((((v__435) > (-8.837626e+01f) ? (v__435) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__437) > (-8.837626e+01f) ? (v__437) : (-8.837626e+01f)) - (floorf(((((v__439) > (-8.837626e+01f) ? (v__439) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__441) > (-8.837626e+01f) ? (v__441) : (-8.837626e+01f)) - (floorf(((((v__443) > (-8.837626e+01f) ? (v__443) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__445 = ((float*)data_1)[cse_var_3] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__444) > (v__445) ? (v__444) : (v__445)));\n        float v__446 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n        float v__447 = (v__446) < (8.837627e+01f) ? (v__446) : (8.837627e+01f);\n        int32_t v__448 = ((int32_t)(floorf(((((v__447) > (-8.837626e+01f) ? (v__447) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__449 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__450 = (v__449) < (8.837627e+01f) ? (v__449) : (8.837627e+01f);\n      float v__451 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__452 = (v__451) < (8.837627e+01f) ? (v__451) : (8.837627e+01f);\n      float v__453 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__454 = (v__453) < (8.837627e+01f) ? (v__453) : (8.837627e+01f);\n      float v__455 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__456 = (v__455) < (8.837627e+01f) ? (v__455) : (8.837627e+01f);\n      float v__457 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__458 = (v__457) < (8.837627e+01f) ? (v__457) : (8.837627e+01f);\n      float v__459 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__460 = (v__459) < (8.837627e+01f) ? (v__459) : (8.837627e+01f);\n      float v__461 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__462 = (v__461) < (8.837627e+01f) ? (v__461) : (8.837627e+01f);\n      float v__463 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__464 = (v__463) < (8.837627e+01f) ? (v__463) : (8.837627e+01f);\n      float v__465 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__466 = (v__465) < (8.837627e+01f) ? (v__465) : (8.837627e+01f);\n      float v__467 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__468 = (v__467) < (8.837627e+01f) ? (v__467) : (8.837627e+01f);\n      float v__469 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__470 = (v__469) < (8.837627e+01f) ? (v__469) : (8.837627e+01f);\n      float v__471 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__472 = (v__471) < (8.837627e+01f) ? (v__471) : (8.837627e+01f);\n      float v__473 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__474 = (v__473) < (8.837627e+01f) ? (v__473) : (8.837627e+01f);\n      float v__475 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__476 = (v__475) < (8.837627e+01f) ? (v__475) : (8.837627e+01f);\n      float v__477 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__478 = (v__477) < (8.837627e+01f) ? (v__477) : (8.837627e+01f);\n      float v__479 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      float v__480 = (v__479) < (8.837627e+01f) ? (v__479) : (8.837627e+01f);\n      float v__481 = (*(float *)(&(v__448))) * ((((((((((((((1.987569e-04f * (((v__450) > (-8.837626e+01f) ? (v__450) : (-8.837626e+01f)) - (floorf(((((v__452) > (-8.837626e+01f) ? (v__452) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__454) > (-8.837626e+01f) ? (v__454) : (-8.837626e+01f)) - (floorf(((((v__456) > (-8.837626e+01f) ? (v__456) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__458) > (-8.837626e+01f) ? (v__458) : (-8.837626e+01f)) - (floorf(((((v__460) > (-8.837626e+01f) ? (v__460) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__462) > (-8.837626e+01f) ? (v__462) : (-8.837626e+01f)) - (floorf(((((v__464) > (-8.837626e+01f) ? (v__464) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__466) > (-8.837626e+01f) ? (v__466) : (-8.837626e+01f)) - (floorf(((((v__468) > (-8.837626e+01f) ? (v__468) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__470) > (-8.837626e+01f) ? (v__470) : (-8.837626e+01f)) - (floorf(((((v__472) > (-8.837626e+01f) ? (v__472) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__474) > (-8.837626e+01f) ? (v__474) : (-8.837626e+01f)) - (floorf(((((v__476) > (-8.837626e+01f) ? (v__476) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__478) > (-8.837626e+01f) ? (v__478) : (-8.837626e+01f)) - (floorf(((((v__480) > (-8.837626e+01f) ? (v__480) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__482 = ((float*)data_1)[cse_var_4] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__481) > (v__482) ? (v__481) : (v__482)));\n        float v__483 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n        float v__484 = (v__483) < (8.837627e+01f) ? (v__483) : (8.837627e+01f);\n        int32_t v__485 = ((int32_t)(floorf(((((v__484) > (-8.837626e+01f) ? (v__484) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__486 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__487 = (v__486) < (8.837627e+01f) ? (v__486) : (8.837627e+01f);\n      float v__488 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__489 = (v__488) < (8.837627e+01f) ? (v__488) : (8.837627e+01f);\n      float v__490 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__491 = (v__490) < (8.837627e+01f) ? (v__490) : (8.837627e+01f);\n      float v__492 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__493 = (v__492) < (8.837627e+01f) ? (v__492) : (8.837627e+01f);\n      float v__494 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__495 = (v__494) < (8.837627e+01f) ? (v__494) : (8.837627e+01f);\n      float v__496 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__497 = (v__496) < (8.837627e+01f) ? (v__496) : (8.837627e+01f);\n      float v__498 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__499 = (v__498) < (8.837627e+01f) ? (v__498) : (8.837627e+01f);\n      float v__500 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__501 = (v__500) < (8.837627e+01f) ? (v__500) : (8.837627e+01f);\n      float v__502 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__503 = (v__502) < (8.837627e+01f) ? (v__502) : (8.837627e+01f);\n      float v__504 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__505 = (v__504) < (8.837627e+01f) ? (v__504) : (8.837627e+01f);\n      float v__506 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__507 = (v__506) < (8.837627e+01f) ? (v__506) : (8.837627e+01f);\n      float v__508 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__509 = (v__508) < (8.837627e+01f) ? (v__508) : (8.837627e+01f);\n      float v__510 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__511 = (v__510) < (8.837627e+01f) ? (v__510) : (8.837627e+01f);\n      float v__512 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__513 = (v__512) < (8.837627e+01f) ? (v__512) : (8.837627e+01f);\n      float v__514 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__515 = (v__514) < (8.837627e+01f) ? (v__514) : (8.837627e+01f);\n      float v__516 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      float v__517 = (v__516) < (8.837627e+01f) ? (v__516) : (8.837627e+01f);\n      float v__518 = (*(float *)(&(v__485))) * ((((((((((((((1.987569e-04f * (((v__487) > (-8.837626e+01f) ? (v__487) : (-8.837626e+01f)) - (floorf(((((v__489) > (-8.837626e+01f) ? (v__489) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__491) > (-8.837626e+01f) ? (v__491) : (-8.837626e+01f)) - (floorf(((((v__493) > (-8.837626e+01f) ? (v__493) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__495) > (-8.837626e+01f) ? (v__495) : (-8.837626e+01f)) - (floorf(((((v__497) > (-8.837626e+01f) ? (v__497) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__499) > (-8.837626e+01f) ? (v__499) : (-8.837626e+01f)) - (floorf(((((v__501) > (-8.837626e+01f) ? (v__501) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__503) > (-8.837626e+01f) ? (v__503) : (-8.837626e+01f)) - (floorf(((((v__505) > (-8.837626e+01f) ? (v__505) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__507) > (-8.837626e+01f) ? (v__507) : (-8.837626e+01f)) - (floorf(((((v__509) > (-8.837626e+01f) ? (v__509) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__511) > (-8.837626e+01f) ? (v__511) : (-8.837626e+01f)) - (floorf(((((v__513) > (-8.837626e+01f) ? (v__513) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__515) > (-8.837626e+01f) ? (v__515) : (-8.837626e+01f)) - (floorf(((((v__517) > (-8.837626e+01f) ? (v__517) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__519 = ((float*)data_1)[cse_var_5] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__518) > (v__519) ? (v__518) : (v__519)));\n        float v__520 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n        float v__521 = (v__520) < (8.837627e+01f) ? (v__520) : (8.837627e+01f);\n        int32_t v__522 = ((int32_t)(floorf(((((v__521) > (-8.837626e+01f) ? (v__521) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__523 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__524 = (v__523) < (8.837627e+01f) ? (v__523) : (8.837627e+01f);\n      float v__525 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__526 = (v__525) < (8.837627e+01f) ? (v__525) : (8.837627e+01f);\n      float v__527 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__528 = (v__527) < (8.837627e+01f) ? (v__527) : (8.837627e+01f);\n      float v__529 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__530 = (v__529) < (8.837627e+01f) ? (v__529) : (8.837627e+01f);\n      float v__531 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__532 = (v__531) < (8.837627e+01f) ? (v__531) : (8.837627e+01f);\n      float v__533 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__534 = (v__533) < (8.837627e+01f) ? (v__533) : (8.837627e+01f);\n      float v__535 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__536 = (v__535) < (8.837627e+01f) ? (v__535) : (8.837627e+01f);\n      float v__537 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__538 = (v__537) < (8.837627e+01f) ? (v__537) : (8.837627e+01f);\n      float v__539 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__540 = (v__539) < (8.837627e+01f) ? (v__539) : (8.837627e+01f);\n      float v__541 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__542 = (v__541) < (8.837627e+01f) ? (v__541) : (8.837627e+01f);\n      float v__543 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__544 = (v__543) < (8.837627e+01f) ? (v__543) : (8.837627e+01f);\n      float v__545 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__546 = (v__545) < (8.837627e+01f) ? (v__545) : (8.837627e+01f);\n      float v__547 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__548 = (v__547) < (8.837627e+01f) ? (v__547) : (8.837627e+01f);\n      float v__549 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__550 = (v__549) < (8.837627e+01f) ? (v__549) : (8.837627e+01f);\n      float v__551 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__552 = (v__551) < (8.837627e+01f) ? (v__551) : (8.837627e+01f);\n      float v__553 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      float v__554 = (v__553) < (8.837627e+01f) ? (v__553) : (8.837627e+01f);\n      float v__555 = (*(float *)(&(v__522))) * ((((((((((((((1.987569e-04f * (((v__524) > (-8.837626e+01f) ? (v__524) : (-8.837626e+01f)) - (floorf(((((v__526) > (-8.837626e+01f) ? (v__526) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__528) > (-8.837626e+01f) ? (v__528) : (-8.837626e+01f)) - (floorf(((((v__530) > (-8.837626e+01f) ? (v__530) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__532) > (-8.837626e+01f) ? (v__532) : (-8.837626e+01f)) - (floorf(((((v__534) > (-8.837626e+01f) ? (v__534) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__536) > (-8.837626e+01f) ? (v__536) : (-8.837626e+01f)) - (floorf(((((v__538) > (-8.837626e+01f) ? (v__538) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__540) > (-8.837626e+01f) ? (v__540) : (-8.837626e+01f)) - (floorf(((((v__542) > (-8.837626e+01f) ? (v__542) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__544) > (-8.837626e+01f) ? (v__544) : (-8.837626e+01f)) - (floorf(((((v__546) > (-8.837626e+01f) ? (v__546) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__548) > (-8.837626e+01f) ? (v__548) : (-8.837626e+01f)) - (floorf(((((v__550) > (-8.837626e+01f) ? (v__550) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__552) > (-8.837626e+01f) ? (v__552) : (-8.837626e+01f)) - (floorf(((((v__554) > (-8.837626e+01f) ? (v__554) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__556 = ((float*)data_1)[cse_var_6] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__555) > (v__556) ? (v__555) : (v__556)));\n        float v__557 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n        float v__558 = (v__557) < (8.837627e+01f) ? (v__557) : (8.837627e+01f);\n        int32_t v__559 = ((int32_t)(floorf(((((v__558) > (-8.837626e+01f) ? (v__558) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__560 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__561 = (v__560) < (8.837627e+01f) ? (v__560) : (8.837627e+01f);\n      float v__562 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__563 = (v__562) < (8.837627e+01f) ? (v__562) : (8.837627e+01f);\n      float v__564 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__565 = (v__564) < (8.837627e+01f) ? (v__564) : (8.837627e+01f);\n      float v__566 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__567 = (v__566) < (8.837627e+01f) ? (v__566) : (8.837627e+01f);\n      float v__568 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__569 = (v__568) < (8.837627e+01f) ? (v__568) : (8.837627e+01f);\n      float v__570 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__571 = (v__570) < (8.837627e+01f) ? (v__570) : (8.837627e+01f);\n      float v__572 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__573 = (v__572) < (8.837627e+01f) ? (v__572) : (8.837627e+01f);\n      float v__574 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__575 = (v__574) < (8.837627e+01f) ? (v__574) : (8.837627e+01f);\n      float v__576 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__577 = (v__576) < (8.837627e+01f) ? (v__576) : (8.837627e+01f);\n      float v__578 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__579 = (v__578) < (8.837627e+01f) ? (v__578) : (8.837627e+01f);\n      float v__580 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__581 = (v__580) < (8.837627e+01f) ? (v__580) : (8.837627e+01f);\n      float v__582 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__583 = (v__582) < (8.837627e+01f) ? (v__582) : (8.837627e+01f);\n      float v__584 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__585 = (v__584) < (8.837627e+01f) ? (v__584) : (8.837627e+01f);\n      float v__586 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__587 = (v__586) < (8.837627e+01f) ? (v__586) : (8.837627e+01f);\n      float v__588 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__589 = (v__588) < (8.837627e+01f) ? (v__588) : (8.837627e+01f);\n      float v__590 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      float v__591 = (v__590) < (8.837627e+01f) ? (v__590) : (8.837627e+01f);\n      float v__592 = (*(float *)(&(v__559))) * ((((((((((((((1.987569e-04f * (((v__561) > (-8.837626e+01f) ? (v__561) : (-8.837626e+01f)) - (floorf(((((v__563) > (-8.837626e+01f) ? (v__563) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__565) > (-8.837626e+01f) ? (v__565) : (-8.837626e+01f)) - (floorf(((((v__567) > (-8.837626e+01f) ? (v__567) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__569) > (-8.837626e+01f) ? (v__569) : (-8.837626e+01f)) - (floorf(((((v__571) > (-8.837626e+01f) ? (v__571) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__573) > (-8.837626e+01f) ? (v__573) : (-8.837626e+01f)) - (floorf(((((v__575) > (-8.837626e+01f) ? (v__575) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__577) > (-8.837626e+01f) ? (v__577) : (-8.837626e+01f)) - (floorf(((((v__579) > (-8.837626e+01f) ? (v__579) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__581) > (-8.837626e+01f) ? (v__581) : (-8.837626e+01f)) - (floorf(((((v__583) > (-8.837626e+01f) ? (v__583) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__585) > (-8.837626e+01f) ? (v__585) : (-8.837626e+01f)) - (floorf(((((v__587) > (-8.837626e+01f) ? (v__587) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__589) > (-8.837626e+01f) ? (v__589) : (-8.837626e+01f)) - (floorf(((((v__591) > (-8.837626e+01f) ? (v__591) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__593 = ((float*)data_1)[cse_var_7] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__592) > (v__593) ? (v__592) : (v__593)));\n        float v__594 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n        float v__595 = (v__594) < (8.837627e+01f) ? (v__594) : (8.837627e+01f);\n        int32_t v__596 = ((int32_t)(floorf(((((v__595) > (-8.837626e+01f) ? (v__595) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__597 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__598 = (v__597) < (8.837627e+01f) ? (v__597) : (8.837627e+01f);\n      float v__599 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__600 = (v__599) < (8.837627e+01f) ? (v__599) : (8.837627e+01f);\n      float v__601 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__602 = (v__601) < (8.837627e+01f) ? (v__601) : (8.837627e+01f);\n      float v__603 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__604 = (v__603) < (8.837627e+01f) ? (v__603) : (8.837627e+01f);\n      float v__605 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__606 = (v__605) < (8.837627e+01f) ? (v__605) : (8.837627e+01f);\n      float v__607 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__608 = (v__607) < (8.837627e+01f) ? (v__607) : (8.837627e+01f);\n      float v__609 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__610 = (v__609) < (8.837627e+01f) ? (v__609) : (8.837627e+01f);\n      float v__611 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__612 = (v__611) < (8.837627e+01f) ? (v__611) : (8.837627e+01f);\n      float v__613 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__614 = (v__613) < (8.837627e+01f) ? (v__613) : (8.837627e+01f);\n      float v__615 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__616 = (v__615) < (8.837627e+01f) ? (v__615) : (8.837627e+01f);\n      float v__617 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__618 = (v__617) < (8.837627e+01f) ? (v__617) : (8.837627e+01f);\n      float v__619 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__620 = (v__619) < (8.837627e+01f) ? (v__619) : (8.837627e+01f);\n      float v__621 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__622 = (v__621) < (8.837627e+01f) ? (v__621) : (8.837627e+01f);\n      float v__623 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__624 = (v__623) < (8.837627e+01f) ? (v__623) : (8.837627e+01f);\n      float v__625 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__626 = (v__625) < (8.837627e+01f) ? (v__625) : (8.837627e+01f);\n      float v__627 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      float v__628 = (v__627) < (8.837627e+01f) ? (v__627) : (8.837627e+01f);\n      float v__629 = (*(float *)(&(v__596))) * ((((((((((((((1.987569e-04f * (((v__598) > (-8.837626e+01f) ? (v__598) : (-8.837626e+01f)) - (floorf(((((v__600) > (-8.837626e+01f) ? (v__600) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__602) > (-8.837626e+01f) ? (v__602) : (-8.837626e+01f)) - (floorf(((((v__604) > (-8.837626e+01f) ? (v__604) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__606) > (-8.837626e+01f) ? (v__606) : (-8.837626e+01f)) - (floorf(((((v__608) > (-8.837626e+01f) ? (v__608) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__610) > (-8.837626e+01f) ? (v__610) : (-8.837626e+01f)) - (floorf(((((v__612) > (-8.837626e+01f) ? (v__612) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__614) > (-8.837626e+01f) ? (v__614) : (-8.837626e+01f)) - (floorf(((((v__616) > (-8.837626e+01f) ? (v__616) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__618) > (-8.837626e+01f) ? (v__618) : (-8.837626e+01f)) - (floorf(((((v__620) > (-8.837626e+01f) ? (v__620) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__622) > (-8.837626e+01f) ? (v__622) : (-8.837626e+01f)) - (floorf(((((v__624) > (-8.837626e+01f) ? (v__624) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__626) > (-8.837626e+01f) ? (v__626) : (-8.837626e+01f)) - (floorf(((((v__628) > (-8.837626e+01f) ? (v__628) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__630 = ((float*)data_1)[cse_var_8] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__629) > (v__630) ? (v__629) : (v__630)));\n        float v__631 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n        float v__632 = (v__631) < (8.837627e+01f) ? (v__631) : (8.837627e+01f);\n        int32_t v__633 = ((int32_t)(floorf(((((v__632) > (-8.837626e+01f) ? (v__632) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__634 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__635 = (v__634) < (8.837627e+01f) ? (v__634) : (8.837627e+01f);\n      float v__636 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__637 = (v__636) < (8.837627e+01f) ? (v__636) : (8.837627e+01f);\n      float v__638 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__639 = (v__638) < (8.837627e+01f) ? (v__638) : (8.837627e+01f);\n      float v__640 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__641 = (v__640) < (8.837627e+01f) ? (v__640) : (8.837627e+01f);\n      float v__642 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__643 = (v__642) < (8.837627e+01f) ? (v__642) : (8.837627e+01f);\n      float v__644 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__645 = (v__644) < (8.837627e+01f) ? (v__644) : (8.837627e+01f);\n      float v__646 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__647 = (v__646) < (8.837627e+01f) ? (v__646) : (8.837627e+01f);\n      float v__648 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__649 = (v__648) < (8.837627e+01f) ? (v__648) : (8.837627e+01f);\n      float v__650 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__651 = (v__650) < (8.837627e+01f) ? (v__650) : (8.837627e+01f);\n      float v__652 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__653 = (v__652) < (8.837627e+01f) ? (v__652) : (8.837627e+01f);\n      float v__654 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__655 = (v__654) < (8.837627e+01f) ? (v__654) : (8.837627e+01f);\n      float v__656 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__657 = (v__656) < (8.837627e+01f) ? (v__656) : (8.837627e+01f);\n      float v__658 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__659 = (v__658) < (8.837627e+01f) ? (v__658) : (8.837627e+01f);\n      float v__660 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__661 = (v__660) < (8.837627e+01f) ? (v__660) : (8.837627e+01f);\n      float v__662 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__663 = (v__662) < (8.837627e+01f) ? (v__662) : (8.837627e+01f);\n      float v__664 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      float v__665 = (v__664) < (8.837627e+01f) ? (v__664) : (8.837627e+01f);\n      float v__666 = (*(float *)(&(v__633))) * ((((((((((((((1.987569e-04f * (((v__635) > (-8.837626e+01f) ? (v__635) : (-8.837626e+01f)) - (floorf(((((v__637) > (-8.837626e+01f) ? (v__637) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__639) > (-8.837626e+01f) ? (v__639) : (-8.837626e+01f)) - (floorf(((((v__641) > (-8.837626e+01f) ? (v__641) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__643) > (-8.837626e+01f) ? (v__643) : (-8.837626e+01f)) - (floorf(((((v__645) > (-8.837626e+01f) ? (v__645) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__647) > (-8.837626e+01f) ? (v__647) : (-8.837626e+01f)) - (floorf(((((v__649) > (-8.837626e+01f) ? (v__649) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__651) > (-8.837626e+01f) ? (v__651) : (-8.837626e+01f)) - (floorf(((((v__653) > (-8.837626e+01f) ? (v__653) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__655) > (-8.837626e+01f) ? (v__655) : (-8.837626e+01f)) - (floorf(((((v__657) > (-8.837626e+01f) ? (v__657) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__659) > (-8.837626e+01f) ? (v__659) : (-8.837626e+01f)) - (floorf(((((v__661) > (-8.837626e+01f) ? (v__661) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__663) > (-8.837626e+01f) ? (v__663) : (-8.837626e+01f)) - (floorf(((((v__665) > (-8.837626e+01f) ? (v__665) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__667 = ((float*)data_1)[cse_var_9] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__666) > (v__667) ? (v__666) : (v__667)));\n        float v__668 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n        float v__669 = (v__668) < (8.837627e+01f) ? (v__668) : (8.837627e+01f);\n        int32_t v__670 = ((int32_t)(floorf(((((v__669) > (-8.837626e+01f) ? (v__669) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__671 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__672 = (v__671) < (8.837627e+01f) ? (v__671) : (8.837627e+01f);\n      float v__673 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__674 = (v__673) < (8.837627e+01f) ? (v__673) : (8.837627e+01f);\n      float v__675 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__676 = (v__675) < (8.837627e+01f) ? (v__675) : (8.837627e+01f);\n      float v__677 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__678 = (v__677) < (8.837627e+01f) ? (v__677) : (8.837627e+01f);\n      float v__679 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__680 = (v__679) < (8.837627e+01f) ? (v__679) : (8.837627e+01f);\n      float v__681 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__682 = (v__681) < (8.837627e+01f) ? (v__681) : (8.837627e+01f);\n      float v__683 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__684 = (v__683) < (8.837627e+01f) ? (v__683) : (8.837627e+01f);\n      float v__685 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__686 = (v__685) < (8.837627e+01f) ? (v__685) : (8.837627e+01f);\n      float v__687 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__688 = (v__687) < (8.837627e+01f) ? (v__687) : (8.837627e+01f);\n      float v__689 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__690 = (v__689) < (8.837627e+01f) ? (v__689) : (8.837627e+01f);\n      float v__691 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__692 = (v__691) < (8.837627e+01f) ? (v__691) : (8.837627e+01f);\n      float v__693 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__694 = (v__693) < (8.837627e+01f) ? (v__693) : (8.837627e+01f);\n      float v__695 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__696 = (v__695) < (8.837627e+01f) ? (v__695) : (8.837627e+01f);\n      float v__697 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__698 = (v__697) < (8.837627e+01f) ? (v__697) : (8.837627e+01f);\n      float v__699 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__700 = (v__699) < (8.837627e+01f) ? (v__699) : (8.837627e+01f);\n      float v__701 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      float v__702 = (v__701) < (8.837627e+01f) ? (v__701) : (8.837627e+01f);\n      float v__703 = (*(float *)(&(v__670))) * ((((((((((((((1.987569e-04f * (((v__672) > (-8.837626e+01f) ? (v__672) : (-8.837626e+01f)) - (floorf(((((v__674) > (-8.837626e+01f) ? (v__674) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__676) > (-8.837626e+01f) ? (v__676) : (-8.837626e+01f)) - (floorf(((((v__678) > (-8.837626e+01f) ? (v__678) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__680) > (-8.837626e+01f) ? (v__680) : (-8.837626e+01f)) - (floorf(((((v__682) > (-8.837626e+01f) ? (v__682) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__684) > (-8.837626e+01f) ? (v__684) : (-8.837626e+01f)) - (floorf(((((v__686) > (-8.837626e+01f) ? (v__686) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__688) > (-8.837626e+01f) ? (v__688) : (-8.837626e+01f)) - (floorf(((((v__690) > (-8.837626e+01f) ? (v__690) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__692) > (-8.837626e+01f) ? (v__692) : (-8.837626e+01f)) - (floorf(((((v__694) > (-8.837626e+01f) ? (v__694) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__696) > (-8.837626e+01f) ? (v__696) : (-8.837626e+01f)) - (floorf(((((v__698) > (-8.837626e+01f) ? (v__698) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__700) > (-8.837626e+01f) ? (v__700) : (-8.837626e+01f)) - (floorf(((((v__702) > (-8.837626e+01f) ? (v__702) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__704 = ((float*)data_1)[cse_var_10] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__703) > (v__704) ? (v__703) : (v__704)));\n        float v__705 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n        float v__706 = (v__705) < (8.837627e+01f) ? (v__705) : (8.837627e+01f);\n        int32_t v__707 = ((int32_t)(floorf(((((v__706) > (-8.837626e+01f) ? (v__706) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__708 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__709 = (v__708) < (8.837627e+01f) ? (v__708) : (8.837627e+01f);\n      float v__710 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__711 = (v__710) < (8.837627e+01f) ? (v__710) : (8.837627e+01f);\n      float v__712 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__713 = (v__712) < (8.837627e+01f) ? (v__712) : (8.837627e+01f);\n      float v__714 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__715 = (v__714) < (8.837627e+01f) ? (v__714) : (8.837627e+01f);\n      float v__716 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__717 = (v__716) < (8.837627e+01f) ? (v__716) : (8.837627e+01f);\n      float v__718 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__719 = (v__718) < (8.837627e+01f) ? (v__718) : (8.837627e+01f);\n      float v__720 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__721 = (v__720) < (8.837627e+01f) ? (v__720) : (8.837627e+01f);\n      float v__722 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__723 = (v__722) < (8.837627e+01f) ? (v__722) : (8.837627e+01f);\n      float v__724 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__725 = (v__724) < (8.837627e+01f) ? (v__724) : (8.837627e+01f);\n      float v__726 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__727 = (v__726) < (8.837627e+01f) ? (v__726) : (8.837627e+01f);\n      float v__728 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__729 = (v__728) < (8.837627e+01f) ? (v__728) : (8.837627e+01f);\n      float v__730 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__731 = (v__730) < (8.837627e+01f) ? (v__730) : (8.837627e+01f);\n      float v__732 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__733 = (v__732) < (8.837627e+01f) ? (v__732) : (8.837627e+01f);\n      float v__734 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__735 = (v__734) < (8.837627e+01f) ? (v__734) : (8.837627e+01f);\n      float v__736 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__737 = (v__736) < (8.837627e+01f) ? (v__736) : (8.837627e+01f);\n      float v__738 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      float v__739 = (v__738) < (8.837627e+01f) ? (v__738) : (8.837627e+01f);\n      float v__740 = (*(float *)(&(v__707))) * ((((((((((((((1.987569e-04f * (((v__709) > (-8.837626e+01f) ? (v__709) : (-8.837626e+01f)) - (floorf(((((v__711) > (-8.837626e+01f) ? (v__711) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__713) > (-8.837626e+01f) ? (v__713) : (-8.837626e+01f)) - (floorf(((((v__715) > (-8.837626e+01f) ? (v__715) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__717) > (-8.837626e+01f) ? (v__717) : (-8.837626e+01f)) - (floorf(((((v__719) > (-8.837626e+01f) ? (v__719) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__721) > (-8.837626e+01f) ? (v__721) : (-8.837626e+01f)) - (floorf(((((v__723) > (-8.837626e+01f) ? (v__723) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__725) > (-8.837626e+01f) ? (v__725) : (-8.837626e+01f)) - (floorf(((((v__727) > (-8.837626e+01f) ? (v__727) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__729) > (-8.837626e+01f) ? (v__729) : (-8.837626e+01f)) - (floorf(((((v__731) > (-8.837626e+01f) ? (v__731) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__733) > (-8.837626e+01f) ? (v__733) : (-8.837626e+01f)) - (floorf(((((v__735) > (-8.837626e+01f) ? (v__735) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__737) > (-8.837626e+01f) ? (v__737) : (-8.837626e+01f)) - (floorf(((((v__739) > (-8.837626e+01f) ? (v__739) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__741 = ((float*)data_1)[cse_var_11] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__740) > (v__741) ? (v__740) : (v__741)));\n        float v__742 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n        float v__743 = (v__742) < (8.837627e+01f) ? (v__742) : (8.837627e+01f);\n        int32_t v__744 = ((int32_t)(floorf(((((v__743) > (-8.837626e+01f) ? (v__743) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__745 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__746 = (v__745) < (8.837627e+01f) ? (v__745) : (8.837627e+01f);\n      float v__747 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__748 = (v__747) < (8.837627e+01f) ? (v__747) : (8.837627e+01f);\n      float v__749 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__750 = (v__749) < (8.837627e+01f) ? (v__749) : (8.837627e+01f);\n      float v__751 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__752 = (v__751) < (8.837627e+01f) ? (v__751) : (8.837627e+01f);\n      float v__753 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__754 = (v__753) < (8.837627e+01f) ? (v__753) : (8.837627e+01f);\n      float v__755 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__756 = (v__755) < (8.837627e+01f) ? (v__755) : (8.837627e+01f);\n      float v__757 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__758 = (v__757) < (8.837627e+01f) ? (v__757) : (8.837627e+01f);\n      float v__759 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__760 = (v__759) < (8.837627e+01f) ? (v__759) : (8.837627e+01f);\n      float v__761 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__762 = (v__761) < (8.837627e+01f) ? (v__761) : (8.837627e+01f);\n      float v__763 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__764 = (v__763) < (8.837627e+01f) ? (v__763) : (8.837627e+01f);\n      float v__765 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__766 = (v__765) < (8.837627e+01f) ? (v__765) : (8.837627e+01f);\n      float v__767 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__768 = (v__767) < (8.837627e+01f) ? (v__767) : (8.837627e+01f);\n      float v__769 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__770 = (v__769) < (8.837627e+01f) ? (v__769) : (8.837627e+01f);\n      float v__771 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__772 = (v__771) < (8.837627e+01f) ? (v__771) : (8.837627e+01f);\n      float v__773 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__774 = (v__773) < (8.837627e+01f) ? (v__773) : (8.837627e+01f);\n      float v__775 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      float v__776 = (v__775) < (8.837627e+01f) ? (v__775) : (8.837627e+01f);\n      float v__777 = (*(float *)(&(v__744))) * ((((((((((((((1.987569e-04f * (((v__746) > (-8.837626e+01f) ? (v__746) : (-8.837626e+01f)) - (floorf(((((v__748) > (-8.837626e+01f) ? (v__748) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__750) > (-8.837626e+01f) ? (v__750) : (-8.837626e+01f)) - (floorf(((((v__752) > (-8.837626e+01f) ? (v__752) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__754) > (-8.837626e+01f) ? (v__754) : (-8.837626e+01f)) - (floorf(((((v__756) > (-8.837626e+01f) ? (v__756) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__758) > (-8.837626e+01f) ? (v__758) : (-8.837626e+01f)) - (floorf(((((v__760) > (-8.837626e+01f) ? (v__760) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__762) > (-8.837626e+01f) ? (v__762) : (-8.837626e+01f)) - (floorf(((((v__764) > (-8.837626e+01f) ? (v__764) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__766) > (-8.837626e+01f) ? (v__766) : (-8.837626e+01f)) - (floorf(((((v__768) > (-8.837626e+01f) ? (v__768) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__770) > (-8.837626e+01f) ? (v__770) : (-8.837626e+01f)) - (floorf(((((v__772) > (-8.837626e+01f) ? (v__772) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__774) > (-8.837626e+01f) ? (v__774) : (-8.837626e+01f)) - (floorf(((((v__776) > (-8.837626e+01f) ? (v__776) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__778 = ((float*)data_1)[cse_var_13] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__777) > (v__778) ? (v__777) : (v__778)));\n        float v__779 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n        float v__780 = (v__779) < (8.837627e+01f) ? (v__779) : (8.837627e+01f);\n        int32_t v__781 = ((int32_t)(floorf(((((v__780) > (-8.837626e+01f) ? (v__780) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__782 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__783 = (v__782) < (8.837627e+01f) ? (v__782) : (8.837627e+01f);\n      float v__784 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__785 = (v__784) < (8.837627e+01f) ? (v__784) : (8.837627e+01f);\n      float v__786 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__787 = (v__786) < (8.837627e+01f) ? (v__786) : (8.837627e+01f);\n      float v__788 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__789 = (v__788) < (8.837627e+01f) ? (v__788) : (8.837627e+01f);\n      float v__790 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__791 = (v__790) < (8.837627e+01f) ? (v__790) : (8.837627e+01f);\n      float v__792 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__793 = (v__792) < (8.837627e+01f) ? (v__792) : (8.837627e+01f);\n      float v__794 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__795 = (v__794) < (8.837627e+01f) ? (v__794) : (8.837627e+01f);\n      float v__796 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__797 = (v__796) < (8.837627e+01f) ? (v__796) : (8.837627e+01f);\n      float v__798 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__799 = (v__798) < (8.837627e+01f) ? (v__798) : (8.837627e+01f);\n      float v__800 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__801 = (v__800) < (8.837627e+01f) ? (v__800) : (8.837627e+01f);\n      float v__802 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__803 = (v__802) < (8.837627e+01f) ? (v__802) : (8.837627e+01f);\n      float v__804 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__805 = (v__804) < (8.837627e+01f) ? (v__804) : (8.837627e+01f);\n      float v__806 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__807 = (v__806) < (8.837627e+01f) ? (v__806) : (8.837627e+01f);\n      float v__808 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__809 = (v__808) < (8.837627e+01f) ? (v__808) : (8.837627e+01f);\n      float v__810 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__811 = (v__810) < (8.837627e+01f) ? (v__810) : (8.837627e+01f);\n      float v__812 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      float v__813 = (v__812) < (8.837627e+01f) ? (v__812) : (8.837627e+01f);\n      float v__814 = (*(float *)(&(v__781))) * ((((((((((((((1.987569e-04f * (((v__783) > (-8.837626e+01f) ? (v__783) : (-8.837626e+01f)) - (floorf(((((v__785) > (-8.837626e+01f) ? (v__785) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__787) > (-8.837626e+01f) ? (v__787) : (-8.837626e+01f)) - (floorf(((((v__789) > (-8.837626e+01f) ? (v__789) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__791) > (-8.837626e+01f) ? (v__791) : (-8.837626e+01f)) - (floorf(((((v__793) > (-8.837626e+01f) ? (v__793) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__795) > (-8.837626e+01f) ? (v__795) : (-8.837626e+01f)) - (floorf(((((v__797) > (-8.837626e+01f) ? (v__797) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__799) > (-8.837626e+01f) ? (v__799) : (-8.837626e+01f)) - (floorf(((((v__801) > (-8.837626e+01f) ? (v__801) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__803) > (-8.837626e+01f) ? (v__803) : (-8.837626e+01f)) - (floorf(((((v__805) > (-8.837626e+01f) ? (v__805) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__807) > (-8.837626e+01f) ? (v__807) : (-8.837626e+01f)) - (floorf(((((v__809) > (-8.837626e+01f) ? (v__809) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__811) > (-8.837626e+01f) ? (v__811) : (-8.837626e+01f)) - (floorf(((((v__813) > (-8.837626e+01f) ? (v__813) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__815 = ((float*)data_1)[cse_var_14] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__814) > (v__815) ? (v__814) : (v__815)));\n        float v__816 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n        float v__817 = (v__816) < (8.837627e+01f) ? (v__816) : (8.837627e+01f);\n        int32_t v__818 = ((int32_t)(floorf(((((v__817) > (-8.837626e+01f) ? (v__817) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__819 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__820 = (v__819) < (8.837627e+01f) ? (v__819) : (8.837627e+01f);\n      float v__821 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__822 = (v__821) < (8.837627e+01f) ? (v__821) : (8.837627e+01f);\n      float v__823 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__824 = (v__823) < (8.837627e+01f) ? (v__823) : (8.837627e+01f);\n      float v__825 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__826 = (v__825) < (8.837627e+01f) ? (v__825) : (8.837627e+01f);\n      float v__827 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__828 = (v__827) < (8.837627e+01f) ? (v__827) : (8.837627e+01f);\n      float v__829 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__830 = (v__829) < (8.837627e+01f) ? (v__829) : (8.837627e+01f);\n      float v__831 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__832 = (v__831) < (8.837627e+01f) ? (v__831) : (8.837627e+01f);\n      float v__833 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__834 = (v__833) < (8.837627e+01f) ? (v__833) : (8.837627e+01f);\n      float v__835 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__836 = (v__835) < (8.837627e+01f) ? (v__835) : (8.837627e+01f);\n      float v__837 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__838 = (v__837) < (8.837627e+01f) ? (v__837) : (8.837627e+01f);\n      float v__839 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__840 = (v__839) < (8.837627e+01f) ? (v__839) : (8.837627e+01f);\n      float v__841 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__842 = (v__841) < (8.837627e+01f) ? (v__841) : (8.837627e+01f);\n      float v__843 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__844 = (v__843) < (8.837627e+01f) ? (v__843) : (8.837627e+01f);\n      float v__845 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__846 = (v__845) < (8.837627e+01f) ? (v__845) : (8.837627e+01f);\n      float v__847 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__848 = (v__847) < (8.837627e+01f) ? (v__847) : (8.837627e+01f);\n      float v__849 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      float v__850 = (v__849) < (8.837627e+01f) ? (v__849) : (8.837627e+01f);\n      float v__851 = (*(float *)(&(v__818))) * ((((((((((((((1.987569e-04f * (((v__820) > (-8.837626e+01f) ? (v__820) : (-8.837626e+01f)) - (floorf(((((v__822) > (-8.837626e+01f) ? (v__822) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__824) > (-8.837626e+01f) ? (v__824) : (-8.837626e+01f)) - (floorf(((((v__826) > (-8.837626e+01f) ? (v__826) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__828) > (-8.837626e+01f) ? (v__828) : (-8.837626e+01f)) - (floorf(((((v__830) > (-8.837626e+01f) ? (v__830) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__832) > (-8.837626e+01f) ? (v__832) : (-8.837626e+01f)) - (floorf(((((v__834) > (-8.837626e+01f) ? (v__834) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__836) > (-8.837626e+01f) ? (v__836) : (-8.837626e+01f)) - (floorf(((((v__838) > (-8.837626e+01f) ? (v__838) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__840) > (-8.837626e+01f) ? (v__840) : (-8.837626e+01f)) - (floorf(((((v__842) > (-8.837626e+01f) ? (v__842) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__844) > (-8.837626e+01f) ? (v__844) : (-8.837626e+01f)) - (floorf(((((v__846) > (-8.837626e+01f) ? (v__846) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__848) > (-8.837626e+01f) ? (v__848) : (-8.837626e+01f)) - (floorf(((((v__850) > (-8.837626e+01f) ? (v__850) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__852 = ((float*)data_1)[cse_var_15] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__851) > (v__852) ? (v__851) : (v__852)));\n        float v__853 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n        float v__854 = (v__853) < (8.837627e+01f) ? (v__853) : (8.837627e+01f);\n        int32_t v__855 = ((int32_t)(floorf(((((v__854) > (-8.837626e+01f) ? (v__854) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__856 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__857 = (v__856) < (8.837627e+01f) ? (v__856) : (8.837627e+01f);\n      float v__858 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__859 = (v__858) < (8.837627e+01f) ? (v__858) : (8.837627e+01f);\n      float v__860 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__861 = (v__860) < (8.837627e+01f) ? (v__860) : (8.837627e+01f);\n      float v__862 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__863 = (v__862) < (8.837627e+01f) ? (v__862) : (8.837627e+01f);\n      float v__864 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__865 = (v__864) < (8.837627e+01f) ? (v__864) : (8.837627e+01f);\n      float v__866 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__867 = (v__866) < (8.837627e+01f) ? (v__866) : (8.837627e+01f);\n      float v__868 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__869 = (v__868) < (8.837627e+01f) ? (v__868) : (8.837627e+01f);\n      float v__870 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__871 = (v__870) < (8.837627e+01f) ? (v__870) : (8.837627e+01f);\n      float v__872 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__873 = (v__872) < (8.837627e+01f) ? (v__872) : (8.837627e+01f);\n      float v__874 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__875 = (v__874) < (8.837627e+01f) ? (v__874) : (8.837627e+01f);\n      float v__876 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__877 = (v__876) < (8.837627e+01f) ? (v__876) : (8.837627e+01f);\n      float v__878 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__879 = (v__878) < (8.837627e+01f) ? (v__878) : (8.837627e+01f);\n      float v__880 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__881 = (v__880) < (8.837627e+01f) ? (v__880) : (8.837627e+01f);\n      float v__882 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__883 = (v__882) < (8.837627e+01f) ? (v__882) : (8.837627e+01f);\n      float v__884 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__885 = (v__884) < (8.837627e+01f) ? (v__884) : (8.837627e+01f);\n      float v__886 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      float v__887 = (v__886) < (8.837627e+01f) ? (v__886) : (8.837627e+01f);\n      float v__888 = (*(float *)(&(v__855))) * ((((((((((((((1.987569e-04f * (((v__857) > (-8.837626e+01f) ? (v__857) : (-8.837626e+01f)) - (floorf(((((v__859) > (-8.837626e+01f) ? (v__859) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__861) > (-8.837626e+01f) ? (v__861) : (-8.837626e+01f)) - (floorf(((((v__863) > (-8.837626e+01f) ? (v__863) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__865) > (-8.837626e+01f) ? (v__865) : (-8.837626e+01f)) - (floorf(((((v__867) > (-8.837626e+01f) ? (v__867) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__869) > (-8.837626e+01f) ? (v__869) : (-8.837626e+01f)) - (floorf(((((v__871) > (-8.837626e+01f) ? (v__871) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__873) > (-8.837626e+01f) ? (v__873) : (-8.837626e+01f)) - (floorf(((((v__875) > (-8.837626e+01f) ? (v__875) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__877) > (-8.837626e+01f) ? (v__877) : (-8.837626e+01f)) - (floorf(((((v__879) > (-8.837626e+01f) ? (v__879) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__881) > (-8.837626e+01f) ? (v__881) : (-8.837626e+01f)) - (floorf(((((v__883) > (-8.837626e+01f) ? (v__883) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__885) > (-8.837626e+01f) ? (v__885) : (-8.837626e+01f)) - (floorf(((((v__887) > (-8.837626e+01f) ? (v__887) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__889 = ((float*)data_1)[cse_var_16] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__888) > (v__889) ? (v__888) : (v__889)));\n        float v__890 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n        float v__891 = (v__890) < (8.837627e+01f) ? (v__890) : (8.837627e+01f);\n        int32_t v__892 = ((int32_t)(floorf(((((v__891) > (-8.837626e+01f) ? (v__891) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__893 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__894 = (v__893) < (8.837627e+01f) ? (v__893) : (8.837627e+01f);\n      float v__895 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__896 = (v__895) < (8.837627e+01f) ? (v__895) : (8.837627e+01f);\n      float v__897 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__898 = (v__897) < (8.837627e+01f) ? (v__897) : (8.837627e+01f);\n      float v__899 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__900 = (v__899) < (8.837627e+01f) ? (v__899) : (8.837627e+01f);\n      float v__901 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__902 = (v__901) < (8.837627e+01f) ? (v__901) : (8.837627e+01f);\n      float v__903 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__904 = (v__903) < (8.837627e+01f) ? (v__903) : (8.837627e+01f);\n      float v__905 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__906 = (v__905) < (8.837627e+01f) ? (v__905) : (8.837627e+01f);\n      float v__907 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__908 = (v__907) < (8.837627e+01f) ? (v__907) : (8.837627e+01f);\n      float v__909 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__910 = (v__909) < (8.837627e+01f) ? (v__909) : (8.837627e+01f);\n      float v__911 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__912 = (v__911) < (8.837627e+01f) ? (v__911) : (8.837627e+01f);\n      float v__913 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__914 = (v__913) < (8.837627e+01f) ? (v__913) : (8.837627e+01f);\n      float v__915 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__916 = (v__915) < (8.837627e+01f) ? (v__915) : (8.837627e+01f);\n      float v__917 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__918 = (v__917) < (8.837627e+01f) ? (v__917) : (8.837627e+01f);\n      float v__919 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__920 = (v__919) < (8.837627e+01f) ? (v__919) : (8.837627e+01f);\n      float v__921 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__922 = (v__921) < (8.837627e+01f) ? (v__921) : (8.837627e+01f);\n      float v__923 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      float v__924 = (v__923) < (8.837627e+01f) ? (v__923) : (8.837627e+01f);\n      float v__925 = (*(float *)(&(v__892))) * ((((((((((((((1.987569e-04f * (((v__894) > (-8.837626e+01f) ? (v__894) : (-8.837626e+01f)) - (floorf(((((v__896) > (-8.837626e+01f) ? (v__896) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__898) > (-8.837626e+01f) ? (v__898) : (-8.837626e+01f)) - (floorf(((((v__900) > (-8.837626e+01f) ? (v__900) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__902) > (-8.837626e+01f) ? (v__902) : (-8.837626e+01f)) - (floorf(((((v__904) > (-8.837626e+01f) ? (v__904) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__906) > (-8.837626e+01f) ? (v__906) : (-8.837626e+01f)) - (floorf(((((v__908) > (-8.837626e+01f) ? (v__908) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__910) > (-8.837626e+01f) ? (v__910) : (-8.837626e+01f)) - (floorf(((((v__912) > (-8.837626e+01f) ? (v__912) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__914) > (-8.837626e+01f) ? (v__914) : (-8.837626e+01f)) - (floorf(((((v__916) > (-8.837626e+01f) ? (v__916) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__918) > (-8.837626e+01f) ? (v__918) : (-8.837626e+01f)) - (floorf(((((v__920) > (-8.837626e+01f) ? (v__920) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__922) > (-8.837626e+01f) ? (v__922) : (-8.837626e+01f)) - (floorf(((((v__924) > (-8.837626e+01f) ? (v__924) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__926 = ((float*)data_1)[cse_var_17] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__925) > (v__926) ? (v__925) : (v__926)));\n        float v__927 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n        float v__928 = (v__927) < (8.837627e+01f) ? (v__927) : (8.837627e+01f);\n        int32_t v__929 = ((int32_t)(floorf(((((v__928) > (-8.837626e+01f) ? (v__928) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__930 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__931 = (v__930) < (8.837627e+01f) ? (v__930) : (8.837627e+01f);\n      float v__932 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__933 = (v__932) < (8.837627e+01f) ? (v__932) : (8.837627e+01f);\n      float v__934 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__935 = (v__934) < (8.837627e+01f) ? (v__934) : (8.837627e+01f);\n      float v__936 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__937 = (v__936) < (8.837627e+01f) ? (v__936) : (8.837627e+01f);\n      float v__938 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__939 = (v__938) < (8.837627e+01f) ? (v__938) : (8.837627e+01f);\n      float v__940 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__941 = (v__940) < (8.837627e+01f) ? (v__940) : (8.837627e+01f);\n      float v__942 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__943 = (v__942) < (8.837627e+01f) ? (v__942) : (8.837627e+01f);\n      float v__944 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__945 = (v__944) < (8.837627e+01f) ? (v__944) : (8.837627e+01f);\n      float v__946 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__947 = (v__946) < (8.837627e+01f) ? (v__946) : (8.837627e+01f);\n      float v__948 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__949 = (v__948) < (8.837627e+01f) ? (v__948) : (8.837627e+01f);\n      float v__950 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__951 = (v__950) < (8.837627e+01f) ? (v__950) : (8.837627e+01f);\n      float v__952 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__953 = (v__952) < (8.837627e+01f) ? (v__952) : (8.837627e+01f);\n      float v__954 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__955 = (v__954) < (8.837627e+01f) ? (v__954) : (8.837627e+01f);\n      float v__956 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__957 = (v__956) < (8.837627e+01f) ? (v__956) : (8.837627e+01f);\n      float v__958 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__959 = (v__958) < (8.837627e+01f) ? (v__958) : (8.837627e+01f);\n      float v__960 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      float v__961 = (v__960) < (8.837627e+01f) ? (v__960) : (8.837627e+01f);\n      float v__962 = (*(float *)(&(v__929))) * ((((((((((((((1.987569e-04f * (((v__931) > (-8.837626e+01f) ? (v__931) : (-8.837626e+01f)) - (floorf(((((v__933) > (-8.837626e+01f) ? (v__933) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__935) > (-8.837626e+01f) ? (v__935) : (-8.837626e+01f)) - (floorf(((((v__937) > (-8.837626e+01f) ? (v__937) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__939) > (-8.837626e+01f) ? (v__939) : (-8.837626e+01f)) - (floorf(((((v__941) > (-8.837626e+01f) ? (v__941) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__943) > (-8.837626e+01f) ? (v__943) : (-8.837626e+01f)) - (floorf(((((v__945) > (-8.837626e+01f) ? (v__945) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__947) > (-8.837626e+01f) ? (v__947) : (-8.837626e+01f)) - (floorf(((((v__949) > (-8.837626e+01f) ? (v__949) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__951) > (-8.837626e+01f) ? (v__951) : (-8.837626e+01f)) - (floorf(((((v__953) > (-8.837626e+01f) ? (v__953) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__955) > (-8.837626e+01f) ? (v__955) : (-8.837626e+01f)) - (floorf(((((v__957) > (-8.837626e+01f) ? (v__957) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__959) > (-8.837626e+01f) ? (v__959) : (-8.837626e+01f)) - (floorf(((((v__961) > (-8.837626e+01f) ? (v__961) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__963 = ((float*)data_1)[cse_var_18] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__962) > (v__963) ? (v__962) : (v__963)));\n        float v__964 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n        float v__965 = (v__964) < (8.837627e+01f) ? (v__964) : (8.837627e+01f);\n        int32_t v__966 = ((int32_t)(floorf(((((v__965) > (-8.837626e+01f) ? (v__965) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__967 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__968 = (v__967) < (8.837627e+01f) ? (v__967) : (8.837627e+01f);\n      float v__969 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__970 = (v__969) < (8.837627e+01f) ? (v__969) : (8.837627e+01f);\n      float v__971 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__972 = (v__971) < (8.837627e+01f) ? (v__971) : (8.837627e+01f);\n      float v__973 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__974 = (v__973) < (8.837627e+01f) ? (v__973) : (8.837627e+01f);\n      float v__975 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__976 = (v__975) < (8.837627e+01f) ? (v__975) : (8.837627e+01f);\n      float v__977 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__978 = (v__977) < (8.837627e+01f) ? (v__977) : (8.837627e+01f);\n      float v__979 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__980 = (v__979) < (8.837627e+01f) ? (v__979) : (8.837627e+01f);\n      float v__981 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__982 = (v__981) < (8.837627e+01f) ? (v__981) : (8.837627e+01f);\n      float v__983 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__984 = (v__983) < (8.837627e+01f) ? (v__983) : (8.837627e+01f);\n      float v__985 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__986 = (v__985) < (8.837627e+01f) ? (v__985) : (8.837627e+01f);\n      float v__987 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__988 = (v__987) < (8.837627e+01f) ? (v__987) : (8.837627e+01f);\n      float v__989 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__990 = (v__989) < (8.837627e+01f) ? (v__989) : (8.837627e+01f);\n      float v__991 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__992 = (v__991) < (8.837627e+01f) ? (v__991) : (8.837627e+01f);\n      float v__993 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__994 = (v__993) < (8.837627e+01f) ? (v__993) : (8.837627e+01f);\n      float v__995 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__996 = (v__995) < (8.837627e+01f) ? (v__995) : (8.837627e+01f);\n      float v__997 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      float v__998 = (v__997) < (8.837627e+01f) ? (v__997) : (8.837627e+01f);\n      float v__999 = (*(float *)(&(v__966))) * ((((((((((((((1.987569e-04f * (((v__968) > (-8.837626e+01f) ? (v__968) : (-8.837626e+01f)) - (floorf(((((v__970) > (-8.837626e+01f) ? (v__970) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__972) > (-8.837626e+01f) ? (v__972) : (-8.837626e+01f)) - (floorf(((((v__974) > (-8.837626e+01f) ? (v__974) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__976) > (-8.837626e+01f) ? (v__976) : (-8.837626e+01f)) - (floorf(((((v__978) > (-8.837626e+01f) ? (v__978) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__980) > (-8.837626e+01f) ? (v__980) : (-8.837626e+01f)) - (floorf(((((v__982) > (-8.837626e+01f) ? (v__982) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__984) > (-8.837626e+01f) ? (v__984) : (-8.837626e+01f)) - (floorf(((((v__986) > (-8.837626e+01f) ? (v__986) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__988) > (-8.837626e+01f) ? (v__988) : (-8.837626e+01f)) - (floorf(((((v__990) > (-8.837626e+01f) ? (v__990) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__992) > (-8.837626e+01f) ? (v__992) : (-8.837626e+01f)) - (floorf(((((v__994) > (-8.837626e+01f) ? (v__994) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__996) > (-8.837626e+01f) ? (v__996) : (-8.837626e+01f)) - (floorf(((((v__998) > (-8.837626e+01f) ? (v__998) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1000 = ((float*)data_1)[cse_var_19] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__999) > (v__1000) ? (v__999) : (v__1000)));\n        float v__1001 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n        float v__1002 = (v__1001) < (8.837627e+01f) ? (v__1001) : (8.837627e+01f);\n        int32_t v__1003 = ((int32_t)(floorf(((((v__1002) > (-8.837626e+01f) ? (v__1002) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1004 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1005 = (v__1004) < (8.837627e+01f) ? (v__1004) : (8.837627e+01f);\n      float v__1006 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1007 = (v__1006) < (8.837627e+01f) ? (v__1006) : (8.837627e+01f);\n      float v__1008 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1009 = (v__1008) < (8.837627e+01f) ? (v__1008) : (8.837627e+01f);\n      float v__1010 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1011 = (v__1010) < (8.837627e+01f) ? (v__1010) : (8.837627e+01f);\n      float v__1012 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1013 = (v__1012) < (8.837627e+01f) ? (v__1012) : (8.837627e+01f);\n      float v__1014 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1015 = (v__1014) < (8.837627e+01f) ? (v__1014) : (8.837627e+01f);\n      float v__1016 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1017 = (v__1016) < (8.837627e+01f) ? (v__1016) : (8.837627e+01f);\n      float v__1018 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1019 = (v__1018) < (8.837627e+01f) ? (v__1018) : (8.837627e+01f);\n      float v__1020 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1021 = (v__1020) < (8.837627e+01f) ? (v__1020) : (8.837627e+01f);\n      float v__1022 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1023 = (v__1022) < (8.837627e+01f) ? (v__1022) : (8.837627e+01f);\n      float v__1024 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1025 = (v__1024) < (8.837627e+01f) ? (v__1024) : (8.837627e+01f);\n      float v__1026 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1027 = (v__1026) < (8.837627e+01f) ? (v__1026) : (8.837627e+01f);\n      float v__1028 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1029 = (v__1028) < (8.837627e+01f) ? (v__1028) : (8.837627e+01f);\n      float v__1030 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1031 = (v__1030) < (8.837627e+01f) ? (v__1030) : (8.837627e+01f);\n      float v__1032 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1033 = (v__1032) < (8.837627e+01f) ? (v__1032) : (8.837627e+01f);\n      float v__1034 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      float v__1035 = (v__1034) < (8.837627e+01f) ? (v__1034) : (8.837627e+01f);\n      float v__1036 = (*(float *)(&(v__1003))) * ((((((((((((((1.987569e-04f * (((v__1005) > (-8.837626e+01f) ? (v__1005) : (-8.837626e+01f)) - (floorf(((((v__1007) > (-8.837626e+01f) ? (v__1007) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1009) > (-8.837626e+01f) ? (v__1009) : (-8.837626e+01f)) - (floorf(((((v__1011) > (-8.837626e+01f) ? (v__1011) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1013) > (-8.837626e+01f) ? (v__1013) : (-8.837626e+01f)) - (floorf(((((v__1015) > (-8.837626e+01f) ? (v__1015) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1017) > (-8.837626e+01f) ? (v__1017) : (-8.837626e+01f)) - (floorf(((((v__1019) > (-8.837626e+01f) ? (v__1019) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1021) > (-8.837626e+01f) ? (v__1021) : (-8.837626e+01f)) - (floorf(((((v__1023) > (-8.837626e+01f) ? (v__1023) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1025) > (-8.837626e+01f) ? (v__1025) : (-8.837626e+01f)) - (floorf(((((v__1027) > (-8.837626e+01f) ? (v__1027) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1029) > (-8.837626e+01f) ? (v__1029) : (-8.837626e+01f)) - (floorf(((((v__1031) > (-8.837626e+01f) ? (v__1031) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1033) > (-8.837626e+01f) ? (v__1033) : (-8.837626e+01f)) - (floorf(((((v__1035) > (-8.837626e+01f) ? (v__1035) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1037 = ((float*)data_1)[cse_var_20] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1036) > (v__1037) ? (v__1036) : (v__1037)));\n        float v__1038 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n        float v__1039 = (v__1038) < (8.837627e+01f) ? (v__1038) : (8.837627e+01f);\n        int32_t v__1040 = ((int32_t)(floorf(((((v__1039) > (-8.837626e+01f) ? (v__1039) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1041 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1042 = (v__1041) < (8.837627e+01f) ? (v__1041) : (8.837627e+01f);\n      float v__1043 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1044 = (v__1043) < (8.837627e+01f) ? (v__1043) : (8.837627e+01f);\n      float v__1045 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1046 = (v__1045) < (8.837627e+01f) ? (v__1045) : (8.837627e+01f);\n      float v__1047 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1048 = (v__1047) < (8.837627e+01f) ? (v__1047) : (8.837627e+01f);\n      float v__1049 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1050 = (v__1049) < (8.837627e+01f) ? (v__1049) : (8.837627e+01f);\n      float v__1051 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1052 = (v__1051) < (8.837627e+01f) ? (v__1051) : (8.837627e+01f);\n      float v__1053 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1054 = (v__1053) < (8.837627e+01f) ? (v__1053) : (8.837627e+01f);\n      float v__1055 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1056 = (v__1055) < (8.837627e+01f) ? (v__1055) : (8.837627e+01f);\n      float v__1057 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1058 = (v__1057) < (8.837627e+01f) ? (v__1057) : (8.837627e+01f);\n      float v__1059 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1060 = (v__1059) < (8.837627e+01f) ? (v__1059) : (8.837627e+01f);\n      float v__1061 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1062 = (v__1061) < (8.837627e+01f) ? (v__1061) : (8.837627e+01f);\n      float v__1063 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1064 = (v__1063) < (8.837627e+01f) ? (v__1063) : (8.837627e+01f);\n      float v__1065 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1066 = (v__1065) < (8.837627e+01f) ? (v__1065) : (8.837627e+01f);\n      float v__1067 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1068 = (v__1067) < (8.837627e+01f) ? (v__1067) : (8.837627e+01f);\n      float v__1069 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1070 = (v__1069) < (8.837627e+01f) ? (v__1069) : (8.837627e+01f);\n      float v__1071 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      float v__1072 = (v__1071) < (8.837627e+01f) ? (v__1071) : (8.837627e+01f);\n      float v__1073 = (*(float *)(&(v__1040))) * ((((((((((((((1.987569e-04f * (((v__1042) > (-8.837626e+01f) ? (v__1042) : (-8.837626e+01f)) - (floorf(((((v__1044) > (-8.837626e+01f) ? (v__1044) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1046) > (-8.837626e+01f) ? (v__1046) : (-8.837626e+01f)) - (floorf(((((v__1048) > (-8.837626e+01f) ? (v__1048) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1050) > (-8.837626e+01f) ? (v__1050) : (-8.837626e+01f)) - (floorf(((((v__1052) > (-8.837626e+01f) ? (v__1052) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1054) > (-8.837626e+01f) ? (v__1054) : (-8.837626e+01f)) - (floorf(((((v__1056) > (-8.837626e+01f) ? (v__1056) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1058) > (-8.837626e+01f) ? (v__1058) : (-8.837626e+01f)) - (floorf(((((v__1060) > (-8.837626e+01f) ? (v__1060) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1062) > (-8.837626e+01f) ? (v__1062) : (-8.837626e+01f)) - (floorf(((((v__1064) > (-8.837626e+01f) ? (v__1064) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1066) > (-8.837626e+01f) ? (v__1066) : (-8.837626e+01f)) - (floorf(((((v__1068) > (-8.837626e+01f) ? (v__1068) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1070) > (-8.837626e+01f) ? (v__1070) : (-8.837626e+01f)) - (floorf(((((v__1072) > (-8.837626e+01f) ? (v__1072) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1074 = ((float*)data_1)[cse_var_21] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1073) > (v__1074) ? (v__1073) : (v__1074)));\n        float v__1075 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n        float v__1076 = (v__1075) < (8.837627e+01f) ? (v__1075) : (8.837627e+01f);\n        int32_t v__1077 = ((int32_t)(floorf(((((v__1076) > (-8.837626e+01f) ? (v__1076) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1078 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1079 = (v__1078) < (8.837627e+01f) ? (v__1078) : (8.837627e+01f);\n      float v__1080 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1081 = (v__1080) < (8.837627e+01f) ? (v__1080) : (8.837627e+01f);\n      float v__1082 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1083 = (v__1082) < (8.837627e+01f) ? (v__1082) : (8.837627e+01f);\n      float v__1084 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1085 = (v__1084) < (8.837627e+01f) ? (v__1084) : (8.837627e+01f);\n      float v__1086 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1087 = (v__1086) < (8.837627e+01f) ? (v__1086) : (8.837627e+01f);\n      float v__1088 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1089 = (v__1088) < (8.837627e+01f) ? (v__1088) : (8.837627e+01f);\n      float v__1090 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1091 = (v__1090) < (8.837627e+01f) ? (v__1090) : (8.837627e+01f);\n      float v__1092 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1093 = (v__1092) < (8.837627e+01f) ? (v__1092) : (8.837627e+01f);\n      float v__1094 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1095 = (v__1094) < (8.837627e+01f) ? (v__1094) : (8.837627e+01f);\n      float v__1096 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1097 = (v__1096) < (8.837627e+01f) ? (v__1096) : (8.837627e+01f);\n      float v__1098 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1099 = (v__1098) < (8.837627e+01f) ? (v__1098) : (8.837627e+01f);\n      float v__1100 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1101 = (v__1100) < (8.837627e+01f) ? (v__1100) : (8.837627e+01f);\n      float v__1102 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1103 = (v__1102) < (8.837627e+01f) ? (v__1102) : (8.837627e+01f);\n      float v__1104 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1105 = (v__1104) < (8.837627e+01f) ? (v__1104) : (8.837627e+01f);\n      float v__1106 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1107 = (v__1106) < (8.837627e+01f) ? (v__1106) : (8.837627e+01f);\n      float v__1108 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      float v__1109 = (v__1108) < (8.837627e+01f) ? (v__1108) : (8.837627e+01f);\n      float v__1110 = (*(float *)(&(v__1077))) * ((((((((((((((1.987569e-04f * (((v__1079) > (-8.837626e+01f) ? (v__1079) : (-8.837626e+01f)) - (floorf(((((v__1081) > (-8.837626e+01f) ? (v__1081) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1083) > (-8.837626e+01f) ? (v__1083) : (-8.837626e+01f)) - (floorf(((((v__1085) > (-8.837626e+01f) ? (v__1085) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1087) > (-8.837626e+01f) ? (v__1087) : (-8.837626e+01f)) - (floorf(((((v__1089) > (-8.837626e+01f) ? (v__1089) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1091) > (-8.837626e+01f) ? (v__1091) : (-8.837626e+01f)) - (floorf(((((v__1093) > (-8.837626e+01f) ? (v__1093) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1095) > (-8.837626e+01f) ? (v__1095) : (-8.837626e+01f)) - (floorf(((((v__1097) > (-8.837626e+01f) ? (v__1097) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1099) > (-8.837626e+01f) ? (v__1099) : (-8.837626e+01f)) - (floorf(((((v__1101) > (-8.837626e+01f) ? (v__1101) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1103) > (-8.837626e+01f) ? (v__1103) : (-8.837626e+01f)) - (floorf(((((v__1105) > (-8.837626e+01f) ? (v__1105) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1107) > (-8.837626e+01f) ? (v__1107) : (-8.837626e+01f)) - (floorf(((((v__1109) > (-8.837626e+01f) ? (v__1109) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1111 = ((float*)data_1)[cse_var_22] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1110) > (v__1111) ? (v__1110) : (v__1111)));\n        float v__1112 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n        float v__1113 = (v__1112) < (8.837627e+01f) ? (v__1112) : (8.837627e+01f);\n        int32_t v__1114 = ((int32_t)(floorf(((((v__1113) > (-8.837626e+01f) ? (v__1113) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1115 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1116 = (v__1115) < (8.837627e+01f) ? (v__1115) : (8.837627e+01f);\n      float v__1117 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1118 = (v__1117) < (8.837627e+01f) ? (v__1117) : (8.837627e+01f);\n      float v__1119 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1120 = (v__1119) < (8.837627e+01f) ? (v__1119) : (8.837627e+01f);\n      float v__1121 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1122 = (v__1121) < (8.837627e+01f) ? (v__1121) : (8.837627e+01f);\n      float v__1123 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1124 = (v__1123) < (8.837627e+01f) ? (v__1123) : (8.837627e+01f);\n      float v__1125 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1126 = (v__1125) < (8.837627e+01f) ? (v__1125) : (8.837627e+01f);\n      float v__1127 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1128 = (v__1127) < (8.837627e+01f) ? (v__1127) : (8.837627e+01f);\n      float v__1129 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1130 = (v__1129) < (8.837627e+01f) ? (v__1129) : (8.837627e+01f);\n      float v__1131 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1132 = (v__1131) < (8.837627e+01f) ? (v__1131) : (8.837627e+01f);\n      float v__1133 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1134 = (v__1133) < (8.837627e+01f) ? (v__1133) : (8.837627e+01f);\n      float v__1135 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1136 = (v__1135) < (8.837627e+01f) ? (v__1135) : (8.837627e+01f);\n      float v__1137 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1138 = (v__1137) < (8.837627e+01f) ? (v__1137) : (8.837627e+01f);\n      float v__1139 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1140 = (v__1139) < (8.837627e+01f) ? (v__1139) : (8.837627e+01f);\n      float v__1141 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1142 = (v__1141) < (8.837627e+01f) ? (v__1141) : (8.837627e+01f);\n      float v__1143 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1144 = (v__1143) < (8.837627e+01f) ? (v__1143) : (8.837627e+01f);\n      float v__1145 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      float v__1146 = (v__1145) < (8.837627e+01f) ? (v__1145) : (8.837627e+01f);\n      float v__1147 = (*(float *)(&(v__1114))) * ((((((((((((((1.987569e-04f * (((v__1116) > (-8.837626e+01f) ? (v__1116) : (-8.837626e+01f)) - (floorf(((((v__1118) > (-8.837626e+01f) ? (v__1118) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1120) > (-8.837626e+01f) ? (v__1120) : (-8.837626e+01f)) - (floorf(((((v__1122) > (-8.837626e+01f) ? (v__1122) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1124) > (-8.837626e+01f) ? (v__1124) : (-8.837626e+01f)) - (floorf(((((v__1126) > (-8.837626e+01f) ? (v__1126) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1128) > (-8.837626e+01f) ? (v__1128) : (-8.837626e+01f)) - (floorf(((((v__1130) > (-8.837626e+01f) ? (v__1130) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1132) > (-8.837626e+01f) ? (v__1132) : (-8.837626e+01f)) - (floorf(((((v__1134) > (-8.837626e+01f) ? (v__1134) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1136) > (-8.837626e+01f) ? (v__1136) : (-8.837626e+01f)) - (floorf(((((v__1138) > (-8.837626e+01f) ? (v__1138) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1140) > (-8.837626e+01f) ? (v__1140) : (-8.837626e+01f)) - (floorf(((((v__1142) > (-8.837626e+01f) ? (v__1142) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1144) > (-8.837626e+01f) ? (v__1144) : (-8.837626e+01f)) - (floorf(((((v__1146) > (-8.837626e+01f) ? (v__1146) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1148 = ((float*)data_1)[cse_var_24] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1147) > (v__1148) ? (v__1147) : (v__1148)));\n        float v__1149 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n        float v__1150 = (v__1149) < (8.837627e+01f) ? (v__1149) : (8.837627e+01f);\n        int32_t v__1151 = ((int32_t)(floorf(((((v__1150) > (-8.837626e+01f) ? (v__1150) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1152 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1153 = (v__1152) < (8.837627e+01f) ? (v__1152) : (8.837627e+01f);\n      float v__1154 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1155 = (v__1154) < (8.837627e+01f) ? (v__1154) : (8.837627e+01f);\n      float v__1156 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1157 = (v__1156) < (8.837627e+01f) ? (v__1156) : (8.837627e+01f);\n      float v__1158 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1159 = (v__1158) < (8.837627e+01f) ? (v__1158) : (8.837627e+01f);\n      float v__1160 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1161 = (v__1160) < (8.837627e+01f) ? (v__1160) : (8.837627e+01f);\n      float v__1162 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1163 = (v__1162) < (8.837627e+01f) ? (v__1162) : (8.837627e+01f);\n      float v__1164 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1165 = (v__1164) < (8.837627e+01f) ? (v__1164) : (8.837627e+01f);\n      float v__1166 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1167 = (v__1166) < (8.837627e+01f) ? (v__1166) : (8.837627e+01f);\n      float v__1168 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1169 = (v__1168) < (8.837627e+01f) ? (v__1168) : (8.837627e+01f);\n      float v__1170 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1171 = (v__1170) < (8.837627e+01f) ? (v__1170) : (8.837627e+01f);\n      float v__1172 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1173 = (v__1172) < (8.837627e+01f) ? (v__1172) : (8.837627e+01f);\n      float v__1174 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1175 = (v__1174) < (8.837627e+01f) ? (v__1174) : (8.837627e+01f);\n      float v__1176 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1177 = (v__1176) < (8.837627e+01f) ? (v__1176) : (8.837627e+01f);\n      float v__1178 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1179 = (v__1178) < (8.837627e+01f) ? (v__1178) : (8.837627e+01f);\n      float v__1180 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1181 = (v__1180) < (8.837627e+01f) ? (v__1180) : (8.837627e+01f);\n      float v__1182 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      float v__1183 = (v__1182) < (8.837627e+01f) ? (v__1182) : (8.837627e+01f);\n      float v__1184 = (*(float *)(&(v__1151))) * ((((((((((((((1.987569e-04f * (((v__1153) > (-8.837626e+01f) ? (v__1153) : (-8.837626e+01f)) - (floorf(((((v__1155) > (-8.837626e+01f) ? (v__1155) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1157) > (-8.837626e+01f) ? (v__1157) : (-8.837626e+01f)) - (floorf(((((v__1159) > (-8.837626e+01f) ? (v__1159) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1161) > (-8.837626e+01f) ? (v__1161) : (-8.837626e+01f)) - (floorf(((((v__1163) > (-8.837626e+01f) ? (v__1163) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1165) > (-8.837626e+01f) ? (v__1165) : (-8.837626e+01f)) - (floorf(((((v__1167) > (-8.837626e+01f) ? (v__1167) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1169) > (-8.837626e+01f) ? (v__1169) : (-8.837626e+01f)) - (floorf(((((v__1171) > (-8.837626e+01f) ? (v__1171) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1173) > (-8.837626e+01f) ? (v__1173) : (-8.837626e+01f)) - (floorf(((((v__1175) > (-8.837626e+01f) ? (v__1175) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1177) > (-8.837626e+01f) ? (v__1177) : (-8.837626e+01f)) - (floorf(((((v__1179) > (-8.837626e+01f) ? (v__1179) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1181) > (-8.837626e+01f) ? (v__1181) : (-8.837626e+01f)) - (floorf(((((v__1183) > (-8.837626e+01f) ? (v__1183) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1185 = ((float*)data_1)[cse_var_25] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1184) > (v__1185) ? (v__1184) : (v__1185)));\n        float v__1186 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n        float v__1187 = (v__1186) < (8.837627e+01f) ? (v__1186) : (8.837627e+01f);\n        int32_t v__1188 = ((int32_t)(floorf(((((v__1187) > (-8.837626e+01f) ? (v__1187) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1189 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1190 = (v__1189) < (8.837627e+01f) ? (v__1189) : (8.837627e+01f);\n      float v__1191 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1192 = (v__1191) < (8.837627e+01f) ? (v__1191) : (8.837627e+01f);\n      float v__1193 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1194 = (v__1193) < (8.837627e+01f) ? (v__1193) : (8.837627e+01f);\n      float v__1195 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1196 = (v__1195) < (8.837627e+01f) ? (v__1195) : (8.837627e+01f);\n      float v__1197 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1198 = (v__1197) < (8.837627e+01f) ? (v__1197) : (8.837627e+01f);\n      float v__1199 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1200 = (v__1199) < (8.837627e+01f) ? (v__1199) : (8.837627e+01f);\n      float v__1201 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1202 = (v__1201) < (8.837627e+01f) ? (v__1201) : (8.837627e+01f);\n      float v__1203 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1204 = (v__1203) < (8.837627e+01f) ? (v__1203) : (8.837627e+01f);\n      float v__1205 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1206 = (v__1205) < (8.837627e+01f) ? (v__1205) : (8.837627e+01f);\n      float v__1207 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1208 = (v__1207) < (8.837627e+01f) ? (v__1207) : (8.837627e+01f);\n      float v__1209 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1210 = (v__1209) < (8.837627e+01f) ? (v__1209) : (8.837627e+01f);\n      float v__1211 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1212 = (v__1211) < (8.837627e+01f) ? (v__1211) : (8.837627e+01f);\n      float v__1213 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1214 = (v__1213) < (8.837627e+01f) ? (v__1213) : (8.837627e+01f);\n      float v__1215 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1216 = (v__1215) < (8.837627e+01f) ? (v__1215) : (8.837627e+01f);\n      float v__1217 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1218 = (v__1217) < (8.837627e+01f) ? (v__1217) : (8.837627e+01f);\n      float v__1219 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      float v__1220 = (v__1219) < (8.837627e+01f) ? (v__1219) : (8.837627e+01f);\n      float v__1221 = (*(float *)(&(v__1188))) * ((((((((((((((1.987569e-04f * (((v__1190) > (-8.837626e+01f) ? (v__1190) : (-8.837626e+01f)) - (floorf(((((v__1192) > (-8.837626e+01f) ? (v__1192) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1194) > (-8.837626e+01f) ? (v__1194) : (-8.837626e+01f)) - (floorf(((((v__1196) > (-8.837626e+01f) ? (v__1196) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1198) > (-8.837626e+01f) ? (v__1198) : (-8.837626e+01f)) - (floorf(((((v__1200) > (-8.837626e+01f) ? (v__1200) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1202) > (-8.837626e+01f) ? (v__1202) : (-8.837626e+01f)) - (floorf(((((v__1204) > (-8.837626e+01f) ? (v__1204) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1206) > (-8.837626e+01f) ? (v__1206) : (-8.837626e+01f)) - (floorf(((((v__1208) > (-8.837626e+01f) ? (v__1208) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1210) > (-8.837626e+01f) ? (v__1210) : (-8.837626e+01f)) - (floorf(((((v__1212) > (-8.837626e+01f) ? (v__1212) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1214) > (-8.837626e+01f) ? (v__1214) : (-8.837626e+01f)) - (floorf(((((v__1216) > (-8.837626e+01f) ? (v__1216) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1218) > (-8.837626e+01f) ? (v__1218) : (-8.837626e+01f)) - (floorf(((((v__1220) > (-8.837626e+01f) ? (v__1220) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1222 = ((float*)data_1)[cse_var_26] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1221) > (v__1222) ? (v__1221) : (v__1222)));\n        float v__1223 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n        float v__1224 = (v__1223) < (8.837627e+01f) ? (v__1223) : (8.837627e+01f);\n        int32_t v__1225 = ((int32_t)(floorf(((((v__1224) > (-8.837626e+01f) ? (v__1224) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1226 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1227 = (v__1226) < (8.837627e+01f) ? (v__1226) : (8.837627e+01f);\n      float v__1228 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1229 = (v__1228) < (8.837627e+01f) ? (v__1228) : (8.837627e+01f);\n      float v__1230 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1231 = (v__1230) < (8.837627e+01f) ? (v__1230) : (8.837627e+01f);\n      float v__1232 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1233 = (v__1232) < (8.837627e+01f) ? (v__1232) : (8.837627e+01f);\n      float v__1234 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1235 = (v__1234) < (8.837627e+01f) ? (v__1234) : (8.837627e+01f);\n      float v__1236 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1237 = (v__1236) < (8.837627e+01f) ? (v__1236) : (8.837627e+01f);\n      float v__1238 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1239 = (v__1238) < (8.837627e+01f) ? (v__1238) : (8.837627e+01f);\n      float v__1240 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1241 = (v__1240) < (8.837627e+01f) ? (v__1240) : (8.837627e+01f);\n      float v__1242 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1243 = (v__1242) < (8.837627e+01f) ? (v__1242) : (8.837627e+01f);\n      float v__1244 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1245 = (v__1244) < (8.837627e+01f) ? (v__1244) : (8.837627e+01f);\n      float v__1246 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1247 = (v__1246) < (8.837627e+01f) ? (v__1246) : (8.837627e+01f);\n      float v__1248 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1249 = (v__1248) < (8.837627e+01f) ? (v__1248) : (8.837627e+01f);\n      float v__1250 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1251 = (v__1250) < (8.837627e+01f) ? (v__1250) : (8.837627e+01f);\n      float v__1252 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1253 = (v__1252) < (8.837627e+01f) ? (v__1252) : (8.837627e+01f);\n      float v__1254 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1255 = (v__1254) < (8.837627e+01f) ? (v__1254) : (8.837627e+01f);\n      float v__1256 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      float v__1257 = (v__1256) < (8.837627e+01f) ? (v__1256) : (8.837627e+01f);\n      float v__1258 = (*(float *)(&(v__1225))) * ((((((((((((((1.987569e-04f * (((v__1227) > (-8.837626e+01f) ? (v__1227) : (-8.837626e+01f)) - (floorf(((((v__1229) > (-8.837626e+01f) ? (v__1229) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1231) > (-8.837626e+01f) ? (v__1231) : (-8.837626e+01f)) - (floorf(((((v__1233) > (-8.837626e+01f) ? (v__1233) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1235) > (-8.837626e+01f) ? (v__1235) : (-8.837626e+01f)) - (floorf(((((v__1237) > (-8.837626e+01f) ? (v__1237) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1239) > (-8.837626e+01f) ? (v__1239) : (-8.837626e+01f)) - (floorf(((((v__1241) > (-8.837626e+01f) ? (v__1241) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1243) > (-8.837626e+01f) ? (v__1243) : (-8.837626e+01f)) - (floorf(((((v__1245) > (-8.837626e+01f) ? (v__1245) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1247) > (-8.837626e+01f) ? (v__1247) : (-8.837626e+01f)) - (floorf(((((v__1249) > (-8.837626e+01f) ? (v__1249) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1251) > (-8.837626e+01f) ? (v__1251) : (-8.837626e+01f)) - (floorf(((((v__1253) > (-8.837626e+01f) ? (v__1253) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1255) > (-8.837626e+01f) ? (v__1255) : (-8.837626e+01f)) - (floorf(((((v__1257) > (-8.837626e+01f) ? (v__1257) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1259 = ((float*)data_1)[cse_var_27] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1258) > (v__1259) ? (v__1258) : (v__1259)));\n        float v__1260 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n        float v__1261 = (v__1260) < (8.837627e+01f) ? (v__1260) : (8.837627e+01f);\n        int32_t v__1262 = ((int32_t)(floorf(((((v__1261) > (-8.837626e+01f) ? (v__1261) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1263 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1264 = (v__1263) < (8.837627e+01f) ? (v__1263) : (8.837627e+01f);\n      float v__1265 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1266 = (v__1265) < (8.837627e+01f) ? (v__1265) : (8.837627e+01f);\n      float v__1267 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1268 = (v__1267) < (8.837627e+01f) ? (v__1267) : (8.837627e+01f);\n      float v__1269 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1270 = (v__1269) < (8.837627e+01f) ? (v__1269) : (8.837627e+01f);\n      float v__1271 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1272 = (v__1271) < (8.837627e+01f) ? (v__1271) : (8.837627e+01f);\n      float v__1273 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1274 = (v__1273) < (8.837627e+01f) ? (v__1273) : (8.837627e+01f);\n      float v__1275 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1276 = (v__1275) < (8.837627e+01f) ? (v__1275) : (8.837627e+01f);\n      float v__1277 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1278 = (v__1277) < (8.837627e+01f) ? (v__1277) : (8.837627e+01f);\n      float v__1279 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1280 = (v__1279) < (8.837627e+01f) ? (v__1279) : (8.837627e+01f);\n      float v__1281 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1282 = (v__1281) < (8.837627e+01f) ? (v__1281) : (8.837627e+01f);\n      float v__1283 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1284 = (v__1283) < (8.837627e+01f) ? (v__1283) : (8.837627e+01f);\n      float v__1285 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1286 = (v__1285) < (8.837627e+01f) ? (v__1285) : (8.837627e+01f);\n      float v__1287 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1288 = (v__1287) < (8.837627e+01f) ? (v__1287) : (8.837627e+01f);\n      float v__1289 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1290 = (v__1289) < (8.837627e+01f) ? (v__1289) : (8.837627e+01f);\n      float v__1291 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1292 = (v__1291) < (8.837627e+01f) ? (v__1291) : (8.837627e+01f);\n      float v__1293 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      float v__1294 = (v__1293) < (8.837627e+01f) ? (v__1293) : (8.837627e+01f);\n      float v__1295 = (*(float *)(&(v__1262))) * ((((((((((((((1.987569e-04f * (((v__1264) > (-8.837626e+01f) ? (v__1264) : (-8.837626e+01f)) - (floorf(((((v__1266) > (-8.837626e+01f) ? (v__1266) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1268) > (-8.837626e+01f) ? (v__1268) : (-8.837626e+01f)) - (floorf(((((v__1270) > (-8.837626e+01f) ? (v__1270) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1272) > (-8.837626e+01f) ? (v__1272) : (-8.837626e+01f)) - (floorf(((((v__1274) > (-8.837626e+01f) ? (v__1274) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1276) > (-8.837626e+01f) ? (v__1276) : (-8.837626e+01f)) - (floorf(((((v__1278) > (-8.837626e+01f) ? (v__1278) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1280) > (-8.837626e+01f) ? (v__1280) : (-8.837626e+01f)) - (floorf(((((v__1282) > (-8.837626e+01f) ? (v__1282) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1284) > (-8.837626e+01f) ? (v__1284) : (-8.837626e+01f)) - (floorf(((((v__1286) > (-8.837626e+01f) ? (v__1286) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1288) > (-8.837626e+01f) ? (v__1288) : (-8.837626e+01f)) - (floorf(((((v__1290) > (-8.837626e+01f) ? (v__1290) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1292) > (-8.837626e+01f) ? (v__1292) : (-8.837626e+01f)) - (floorf(((((v__1294) > (-8.837626e+01f) ? (v__1294) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1296 = ((float*)data_1)[cse_var_28] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1295) > (v__1296) ? (v__1295) : (v__1296)));\n        float v__1297 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n        float v__1298 = (v__1297) < (8.837627e+01f) ? (v__1297) : (8.837627e+01f);\n        int32_t v__1299 = ((int32_t)(floorf(((((v__1298) > (-8.837626e+01f) ? (v__1298) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      float v__1300 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1301 = (v__1300) < (8.837627e+01f) ? (v__1300) : (8.837627e+01f);\n      float v__1302 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1303 = (v__1302) < (8.837627e+01f) ? (v__1302) : (8.837627e+01f);\n      float v__1304 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1305 = (v__1304) < (8.837627e+01f) ? (v__1304) : (8.837627e+01f);\n      float v__1306 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1307 = (v__1306) < (8.837627e+01f) ? (v__1306) : (8.837627e+01f);\n      float v__1308 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1309 = (v__1308) < (8.837627e+01f) ? (v__1308) : (8.837627e+01f);\n      float v__1310 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1311 = (v__1310) < (8.837627e+01f) ? (v__1310) : (8.837627e+01f);\n      float v__1312 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1313 = (v__1312) < (8.837627e+01f) ? (v__1312) : (8.837627e+01f);\n      float v__1314 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1315 = (v__1314) < (8.837627e+01f) ? (v__1314) : (8.837627e+01f);\n      float v__1316 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1317 = (v__1316) < (8.837627e+01f) ? (v__1316) : (8.837627e+01f);\n      float v__1318 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1319 = (v__1318) < (8.837627e+01f) ? (v__1318) : (8.837627e+01f);\n      float v__1320 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1321 = (v__1320) < (8.837627e+01f) ? (v__1320) : (8.837627e+01f);\n      float v__1322 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1323 = (v__1322) < (8.837627e+01f) ? (v__1322) : (8.837627e+01f);\n      float v__1324 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1325 = (v__1324) < (8.837627e+01f) ? (v__1324) : (8.837627e+01f);\n      float v__1326 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1327 = (v__1326) < (8.837627e+01f) ? (v__1326) : (8.837627e+01f);\n      float v__1328 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1329 = (v__1328) < (8.837627e+01f) ? (v__1328) : (8.837627e+01f);\n      float v__1330 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      float v__1331 = (v__1330) < (8.837627e+01f) ? (v__1330) : (8.837627e+01f);\n      float v__1332 = (*(float *)(&(v__1299))) * ((((((((((((((1.987569e-04f * (((v__1301) > (-8.837626e+01f) ? (v__1301) : (-8.837626e+01f)) - (floorf(((((v__1303) > (-8.837626e+01f) ? (v__1303) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1305) > (-8.837626e+01f) ? (v__1305) : (-8.837626e+01f)) - (floorf(((((v__1307) > (-8.837626e+01f) ? (v__1307) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1309) > (-8.837626e+01f) ? (v__1309) : (-8.837626e+01f)) - (floorf(((((v__1311) > (-8.837626e+01f) ? (v__1311) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1313) > (-8.837626e+01f) ? (v__1313) : (-8.837626e+01f)) - (floorf(((((v__1315) > (-8.837626e+01f) ? (v__1315) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1317) > (-8.837626e+01f) ? (v__1317) : (-8.837626e+01f)) - (floorf(((((v__1319) > (-8.837626e+01f) ? (v__1319) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1321) > (-8.837626e+01f) ? (v__1321) : (-8.837626e+01f)) - (floorf(((((v__1323) > (-8.837626e+01f) ? (v__1323) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1325) > (-8.837626e+01f) ? (v__1325) : (-8.837626e+01f)) - (floorf(((((v__1327) > (-8.837626e+01f) ? (v__1327) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1329) > (-8.837626e+01f) ? (v__1329) : (-8.837626e+01f)) - (floorf(((((v__1331) > (-8.837626e+01f) ? (v__1331) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n      float v__1333 = ((float*)data_1)[cse_var_29] - T_softmax_maxelem[i2_1];\n      T_softmax_expsum[i2_1] = (T_softmax_expsum[i2_1] + ((v__1332) > (v__1333) ? (v__1332) : (v__1333)));\n    }\n    for (int32_t i2_2 = 0; i2_2 < 20; ++i2_2) {\n      for (int32_t i3 = 0; i3 < 36; ++i3) {\n        int32_t cse_var_37 = (((i0_i1_fused * 720) + (i2_2 * 36)) + i3);\n          float v__1334 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n          float v__1335 = (v__1334) < (8.837627e+01f) ? (v__1334) : (8.837627e+01f);\n          int32_t v__1336 = ((int32_t)(floorf(((((v__1335) > (-8.837626e+01f) ? (v__1335) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        float v__1337 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1338 = (v__1337) < (8.837627e+01f) ? (v__1337) : (8.837627e+01f);\n        float v__1339 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1340 = (v__1339) < (8.837627e+01f) ? (v__1339) : (8.837627e+01f);\n        float v__1341 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1342 = (v__1341) < (8.837627e+01f) ? (v__1341) : (8.837627e+01f);\n        float v__1343 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1344 = (v__1343) < (8.837627e+01f) ? (v__1343) : (8.837627e+01f);\n        float v__1345 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1346 = (v__1345) < (8.837627e+01f) ? (v__1345) : (8.837627e+01f);\n        float v__1347 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1348 = (v__1347) < (8.837627e+01f) ? (v__1347) : (8.837627e+01f);\n        float v__1349 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1350 = (v__1349) < (8.837627e+01f) ? (v__1349) : (8.837627e+01f);\n        float v__1351 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1352 = (v__1351) < (8.837627e+01f) ? (v__1351) : (8.837627e+01f);\n        float v__1353 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1354 = (v__1353) < (8.837627e+01f) ? (v__1353) : (8.837627e+01f);\n        float v__1355 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1356 = (v__1355) < (8.837627e+01f) ? (v__1355) : (8.837627e+01f);\n        float v__1357 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1358 = (v__1357) < (8.837627e+01f) ? (v__1357) : (8.837627e+01f);\n        float v__1359 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1360 = (v__1359) < (8.837627e+01f) ? (v__1359) : (8.837627e+01f);\n        float v__1361 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1362 = (v__1361) < (8.837627e+01f) ? (v__1361) : (8.837627e+01f);\n        float v__1363 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1364 = (v__1363) < (8.837627e+01f) ? (v__1363) : (8.837627e+01f);\n        float v__1365 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1366 = (v__1365) < (8.837627e+01f) ? (v__1365) : (8.837627e+01f);\n        float v__1367 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        float v__1368 = (v__1367) < (8.837627e+01f) ? (v__1367) : (8.837627e+01f);\n        float v__1369 = (*(float *)(&(v__1336))) * ((((((((((((((1.987569e-04f * (((v__1338) > (-8.837626e+01f) ? (v__1338) : (-8.837626e+01f)) - (floorf(((((v__1340) > (-8.837626e+01f) ? (v__1340) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (((v__1342) > (-8.837626e+01f) ? (v__1342) : (-8.837626e+01f)) - (floorf(((((v__1344) > (-8.837626e+01f) ? (v__1344) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (((v__1346) > (-8.837626e+01f) ? (v__1346) : (-8.837626e+01f)) - (floorf(((((v__1348) > (-8.837626e+01f) ? (v__1348) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (((v__1350) > (-8.837626e+01f) ? (v__1350) : (-8.837626e+01f)) - (floorf(((((v__1352) > (-8.837626e+01f) ? (v__1352) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (((v__1354) > (-8.837626e+01f) ? (v__1354) : (-8.837626e+01f)) - (floorf(((((v__1356) > (-8.837626e+01f) ? (v__1356) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (((v__1358) > (-8.837626e+01f) ? (v__1358) : (-8.837626e+01f)) - (floorf(((((v__1360) > (-8.837626e+01f) ? (v__1360) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (((v__1362) > (-8.837626e+01f) ? (v__1362) : (-8.837626e+01f)) - (floorf(((((v__1364) > (-8.837626e+01f) ? (v__1364) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (((v__1366) > (-8.837626e+01f) ? (v__1366) : (-8.837626e+01f)) - (floorf(((((v__1368) > (-8.837626e+01f) ? (v__1368) : (-8.837626e+01f)) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f);\n        float v__1370 = ((float*)data_1)[cse_var_37] - T_softmax_maxelem[i2_2];\n        ((float*)T_softmax_norm_1)[cse_var_37] = (((v__1369) > (v__1370) ? (v__1369) : (v__1370)) / T_softmax_expsum[i2_2]);\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "fast_softmax[5__40__20__36]"
  },
  {
    "instruction": "You have a deep learning model trained in PyTorch, which includes CUDA operators. Please convert these CUDA operators to equivalent CPU operators that can run in an environment without a GPU, whether using TensorFlow, MXNet, or any other deep learning framework.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((1, 28, 28, 40), \"float32\"), T_divide: T.Buffer((1, 28, 28, 40), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused_ax2_fused in T.parallel(784):\n            tensor = T.allocate([40], \"float32\", \"global\")\n            tensor_1 = T.Buffer((40,), data=tensor)\n            data_1 = T.Buffer((31360,), data=data.data)\n            for ax3 in range(40):\n                cse_var_1: T.int32 = ax0_ax1_fused_ax2_fused * 40 + ax3\n                tensor_1[ax3] = T.float32(0)\n                tensor_1[ax3] = tensor_1[ax3] + data_1[cse_var_1] * data_1[cse_var_1]\n            for ax3 in range(40):\n                cse_var_2: T.int32 = ax0_ax1_fused_ax2_fused * 40 + ax3\n                T_divide_1 = T.Buffer((31360,), data=T_divide.data)\n                T_divide_1[cse_var_2] = data_1[cse_var_2] / T.pow(T.float32(2) + T.float32(9.9999997473787516e-05) * tensor_1[ax3], T.float32(0.75))\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ T_divide, float* __restrict__ data, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ data, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ T_divide, float* __restrict__ data, float* __restrict__ tensor) {\n  T_divide[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] / powf((2.000000e+00f + (1.000000e-04f * tensor[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))])), 7.500000e-01f));\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ data, float* __restrict__ tensor) {\n  tensor[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = 0.000000e+00f;\n  tensor[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (tensor[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] + (data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] * data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t T_divide_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* T_divide = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* T_divide_1 = (((DLTensor*)T_divide)[0].data);\n  void* default_function_T_divide_shape = (((DLTensor*)T_divide)[0].shape);\n  void* default_function_T_divide_strides = (((DLTensor*)T_divide)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_T_divide_strides == NULL)) {\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 784; ++ax0_ax1_fused_ax2_fused) {\n    float tensor[40];\n    for (int32_t ax3 = 0; ax3 < 40; ++ax3) {\n      int32_t cse_var_1 = ((ax0_ax1_fused_ax2_fused * 40) + ax3);\n      tensor[ax3] = 0.000000e+00f;\n      tensor[ax3] = (tensor[ax3] + (((float*)data_1)[cse_var_1] * ((float*)data_1)[cse_var_1]));\n    }\n    for (int32_t ax3_1 = 0; ax3_1 < 40; ++ax3_1) {\n      int32_t cse_var_2 = ((ax0_ax1_fused_ax2_fused * 40) + ax3_1);\n      ((float*)T_divide_1)[cse_var_2] = (((float*)data_1)[cse_var_2] / powf((2.000000e+00f + (1.000000e-04f * tensor[ax3_1])), 7.500000e-01f));\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "lrn[1__28__28__40]"
  },
  {
    "instruction": "Suppose your deep learning application is trained in a CUDA-enabled environment. Now, you need to port the application to an environment that doesn't support GPUs. Convert the CUDA operators provided to CPU operators to maintain application functionality in an environment without GPUs.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((1, 14, 6, 5), \"float32\"), kernel: T.Buffer((93, 14, 4, 4), \"float32\"), bias: T.Buffer((1, 93, 1, 1), \"float32\"), conv2d_nchw: T.Buffer((1, 93, 3, 2), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused in T.parallel(186):\n            cse_var_1: T.int32 = nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused % 31 * 18 + nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused // 31\n            pad_temp = T.allocate([32], \"float32\", \"global\")\n            conv2d_nchw_1 = T.Buffer((558,), data=conv2d_nchw.data)\n            conv2d_nchw_1[cse_var_1] = T.float32(0)\n            conv2d_nchw_1[cse_var_1 + 6] = T.float32(0)\n            conv2d_nchw_1[cse_var_1 + 12] = T.float32(0)\n            for rc_outer in range(7):\n                cse_var_13: T.int32 = nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused % 62\n                cse_var_12: T.int32 = cse_var_13 // 31\n                cse_var_11: T.bool = nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused < 124\n                cse_var_10: T.bool = 62 <= nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused\n                cse_var_9: T.bool = cse_var_13 < 31\n                cse_var_8: T.bool = cse_var_12 == 1\n                cse_var_7: T.int32 = rc_outer * 60 + nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused // 62 * 10\n                cse_var_6: T.bool = nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused < 93 and cse_var_9\n                cse_var_5: T.bool = cse_var_10 and cse_var_9\n                cse_var_4: T.bool = cse_var_11 and cse_var_8\n                cse_var_3: T.bool = cse_var_10 and cse_var_8\n                cse_var_2: T.int32 = cse_var_7 + cse_var_12 * 3\n                pad_temp_1 = T.Buffer((32,), data=pad_temp)\n                data_1 = T.Buffer((420,), data=data.data)\n                pad_temp_1[0] = T.if_then_else(cse_var_3, data_1[cse_var_2 - 6], T.float32(0))\n                pad_temp_1[1] = T.if_then_else(cse_var_10, data_1[cse_var_2 - 5], T.float32(0))\n                pad_temp_1[2] = T.if_then_else(cse_var_10, data_1[cse_var_2 - 4], T.float32(0))\n                pad_temp_1[3] = T.if_then_else(cse_var_5, data_1[cse_var_7 - 3], T.float32(0))\n                pad_temp_1[4] = T.if_then_else(cse_var_8, data_1[cse_var_2 - 1], T.float32(0))\n                pad_temp_1[5] = data_1[cse_var_2]\n                pad_temp_1[6] = data_1[cse_var_2 + 1]\n                pad_temp_1[7] = T.if_then_else(cse_var_9, data_1[cse_var_7 + 2], T.float32(0))\n                pad_temp_1[8] = T.if_then_else(cse_var_8, data_1[cse_var_2 + 4], T.float32(0))\n                pad_temp_1[9] = data_1[cse_var_2 + 5]\n                pad_temp_1[10] = data_1[cse_var_2 + 6]\n                pad_temp_1[11] = T.if_then_else(cse_var_9, data_1[cse_var_7 + 7], T.float32(0))\n                pad_temp_1[12] = T.if_then_else(cse_var_4, data_1[cse_var_2 + 9], T.float32(0))\n                pad_temp_1[13] = T.if_then_else(cse_var_11, data_1[cse_var_2 + 10], T.float32(0))\n                pad_temp_1[14] = T.if_then_else(cse_var_11, data_1[cse_var_2 + 11], T.float32(0))\n                pad_temp_1[15] = T.if_then_else(cse_var_6, data_1[cse_var_7 + 12], T.float32(0))\n                pad_temp_1[16] = T.if_then_else(cse_var_3, data_1[cse_var_2 + 24], T.float32(0))\n                pad_temp_1[17] = T.if_then_else(cse_var_10, data_1[cse_var_2 + 25], T.float32(0))\n                pad_temp_1[18] = T.if_then_else(cse_var_10, data_1[cse_var_2 + 26], T.float32(0))\n                pad_temp_1[19] = T.if_then_else(cse_var_5, data_1[cse_var_7 + 27], T.float32(0))\n                pad_temp_1[20] = T.if_then_else(cse_var_8, data_1[cse_var_2 + 29], T.float32(0))\n                pad_temp_1[21] = data_1[cse_var_2 + 30]\n                pad_temp_1[22] = data_1[cse_var_2 + 31]\n                pad_temp_1[23] = T.if_then_else(cse_var_9, data_1[cse_var_7 + 32], T.float32(0))\n                pad_temp_1[24] = T.if_then_else(cse_var_8, data_1[cse_var_2 + 34], T.float32(0))\n                pad_temp_1[25] = data_1[cse_var_2 + 35]\n                pad_temp_1[26] = data_1[cse_var_2 + 36]\n                pad_temp_1[27] = T.if_then_else(cse_var_9, data_1[cse_var_7 + 37], T.float32(0))\n                pad_temp_1[28] = T.if_then_else(cse_var_4, data_1[cse_var_2 + 39], T.float32(0))\n                pad_temp_1[29] = T.if_then_else(cse_var_11, data_1[cse_var_2 + 40], T.float32(0))\n                pad_temp_1[30] = T.if_then_else(cse_var_11, data_1[cse_var_2 + 41], T.float32(0))\n                pad_temp_1[31] = T.if_then_else(cse_var_6, data_1[cse_var_7 + 42], T.float32(0))\n                for ry_outer in range(4):\n                    cse_var_24: T.int32 = ry_outer * 4\n                    cse_var_23: T.int32 = cse_var_1 + 6\n                    cse_var_22: T.int32 = cse_var_1 + 12\n                    cse_var_21: T.int32 = cse_var_24 + 3\n                    cse_var_20: T.int32 = cse_var_24 + 2\n                    cse_var_19: T.int32 = cse_var_24 + 19\n                    cse_var_18: T.int32 = cse_var_24 + 18\n                    cse_var_17: T.int32 = cse_var_24 + 17\n                    cse_var_16: T.int32 = cse_var_24 + 16\n                    cse_var_15: T.int32 = cse_var_24 + 1\n                    cse_var_14: T.int32 = nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused % 31 * 672 + rc_outer * 32 + cse_var_24\n                    kernel_1 = T.Buffer((20832,), data=kernel.data)\n                    conv2d_nchw_1[cse_var_1] = conv2d_nchw_1[cse_var_1] + pad_temp_1[cse_var_24] * kernel_1[cse_var_14]\n                    conv2d_nchw_1[cse_var_1] = conv2d_nchw_1[cse_var_1] + pad_temp_1[cse_var_15] * kernel_1[cse_var_14 + 1]\n                    conv2d_nchw_1[cse_var_1] = conv2d_nchw_1[cse_var_1] + pad_temp_1[cse_var_20] * kernel_1[cse_var_14 + 2]\n                    conv2d_nchw_1[cse_var_1] = conv2d_nchw_1[cse_var_1] + pad_temp_1[cse_var_21] * kernel_1[cse_var_14 + 3]\n                    conv2d_nchw_1[cse_var_1] = conv2d_nchw_1[cse_var_1] + pad_temp_1[cse_var_16] * kernel_1[cse_var_14 + 16]\n                    conv2d_nchw_1[cse_var_1] = conv2d_nchw_1[cse_var_1] + pad_temp_1[cse_var_17] * kernel_1[cse_var_14 + 17]\n                    conv2d_nchw_1[cse_var_1] = conv2d_nchw_1[cse_var_1] + pad_temp_1[cse_var_18] * kernel_1[cse_var_14 + 18]\n                    conv2d_nchw_1[cse_var_1] = conv2d_nchw_1[cse_var_1] + pad_temp_1[cse_var_19] * kernel_1[cse_var_14 + 19]\n                    conv2d_nchw_1[cse_var_23] = conv2d_nchw_1[cse_var_23] + pad_temp_1[cse_var_24] * kernel_1[cse_var_14 + 224]\n                    conv2d_nchw_1[cse_var_23] = conv2d_nchw_1[cse_var_23] + pad_temp_1[cse_var_15] * kernel_1[cse_var_14 + 225]\n                    conv2d_nchw_1[cse_var_23] = conv2d_nchw_1[cse_var_23] + pad_temp_1[cse_var_20] * kernel_1[cse_var_14 + 226]\n                    conv2d_nchw_1[cse_var_23] = conv2d_nchw_1[cse_var_23] + pad_temp_1[cse_var_21] * kernel_1[cse_var_14 + 227]\n                    conv2d_nchw_1[cse_var_23] = conv2d_nchw_1[cse_var_23] + pad_temp_1[cse_var_16] * kernel_1[cse_var_14 + 240]\n                    conv2d_nchw_1[cse_var_23] = conv2d_nchw_1[cse_var_23] + pad_temp_1[cse_var_17] * kernel_1[cse_var_14 + 241]\n                    conv2d_nchw_1[cse_var_23] = conv2d_nchw_1[cse_var_23] + pad_temp_1[cse_var_18] * kernel_1[cse_var_14 + 242]\n                    conv2d_nchw_1[cse_var_23] = conv2d_nchw_1[cse_var_23] + pad_temp_1[cse_var_19] * kernel_1[cse_var_14 + 243]\n                    conv2d_nchw_1[cse_var_22] = conv2d_nchw_1[cse_var_22] + pad_temp_1[cse_var_24] * kernel_1[cse_var_14 + 448]\n                    conv2d_nchw_1[cse_var_22] = conv2d_nchw_1[cse_var_22] + pad_temp_1[cse_var_15] * kernel_1[cse_var_14 + 449]\n                    conv2d_nchw_1[cse_var_22] = conv2d_nchw_1[cse_var_22] + pad_temp_1[cse_var_20] * kernel_1[cse_var_14 + 450]\n                    conv2d_nchw_1[cse_var_22] = conv2d_nchw_1[cse_var_22] + pad_temp_1[cse_var_21] * kernel_1[cse_var_14 + 451]\n                    conv2d_nchw_1[cse_var_22] = conv2d_nchw_1[cse_var_22] + pad_temp_1[cse_var_16] * kernel_1[cse_var_14 + 464]\n                    conv2d_nchw_1[cse_var_22] = conv2d_nchw_1[cse_var_22] + pad_temp_1[cse_var_17] * kernel_1[cse_var_14 + 465]\n                    conv2d_nchw_1[cse_var_22] = conv2d_nchw_1[cse_var_22] + pad_temp_1[cse_var_18] * kernel_1[cse_var_14 + 466]\n                    conv2d_nchw_1[cse_var_22] = conv2d_nchw_1[cse_var_22] + pad_temp_1[cse_var_19] * kernel_1[cse_var_14 + 467]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(186) default_function_kernel(float* __restrict__ conv2d_nchw, float* __restrict__ data, float* __restrict__ kernel);\nextern \"C\" __global__ void __launch_bounds__(186) default_function_kernel(float* __restrict__ conv2d_nchw, float* __restrict__ data, float* __restrict__ kernel) {\n  float conv2d_nchw_local[1];\n  __shared__ float pad_temp_shared[784];\n  __shared__ float kernel_shared[6944];\n  conv2d_nchw_local[0] = 0.000000e+00f;\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer < 5; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer) {\n    if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 93) + (((int)threadIdx.x) >> 1)) < 392) {\n      pad_temp_shared[((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 186) + ((int)threadIdx.x))] = (((((7 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 18) + ((int)threadIdx.x)) % 56)) && ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 18) + ((int)threadIdx.x)) % 56) < 49)) && (1 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 4) + ((int)threadIdx.x)) % 7))) && ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 4) + ((int)threadIdx.x)) % 7) < 6)) ? data[(((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 93) + (((int)threadIdx.x) >> 1)) / 28) * 30) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 18) + ((int)threadIdx.x)) % 56) / 7) * 5)) + (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer * 4) + ((int)threadIdx.x)) % 7)) - 6)] : 0.000000e+00f);\n    }\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_1 < 38; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_1) {\n    if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_1 * 3) + (((int)threadIdx.x) / 62)) < 112) {\n      kernel_shared[((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_1 * 186) + ((int)threadIdx.x))] = kernel[(((((int)blockIdx.x) * 6944) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_1 * 186)) + ((int)threadIdx.x))];\n    }\n  }\n  __syncthreads();\n  for (int rc_outer_inner = 0; rc_outer_inner < 14; ++rc_outer_inner) {\n    for (int ry_outer_inner = 0; ry_outer_inner < 4; ++ry_outer_inner) {\n      for (int rx_inner = 0; rx_inner < 4; ++rx_inner) {\n        conv2d_nchw_local[0] = (conv2d_nchw_local[0] + (pad_temp_shared[(((((rc_outer_inner * 56) + (((((int)threadIdx.x) % 6) >> 1) * 14)) + (ry_outer_inner * 7)) + ((((int)threadIdx.x) & 1) * 3)) + rx_inner)] * kernel_shared[(((((((int)threadIdx.x) / 6) * 224) + (rc_outer_inner * 16)) + (ry_outer_inner * 4)) + rx_inner)]));\n      }\n    }\n  }\n  conv2d_nchw[((((int)blockIdx.x) * 186) + ((int)threadIdx.x))] = conv2d_nchw_local[0];\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t kernel_code = arg_type_ids[1];\n  int32_t bias_code = arg_type_ids[2];\n  int32_t conv2d_nchw_code = arg_type_ids[3];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* kernel = (((TVMValue*)args)[1].v_handle);\n  void* bias = (((TVMValue*)args)[2].v_handle);\n  void* conv2d_nchw = (((TVMValue*)args)[3].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* kernel_1 = (((DLTensor*)kernel)[0].data);\n  void* default_function_kernel_shape = (((DLTensor*)kernel)[0].shape);\n  void* default_function_kernel_strides = (((DLTensor*)kernel)[0].strides);\n  void* bias_1 = (((DLTensor*)bias)[0].data);\n  void* default_function_bias_shape = (((DLTensor*)bias)[0].shape);\n  void* default_function_bias_strides = (((DLTensor*)bias)[0].strides);\n  void* conv2d_nchw_1 = (((DLTensor*)conv2d_nchw)[0].data);\n  void* default_function_conv2d_nchw_shape = (((DLTensor*)conv2d_nchw)[0].shape);\n  void* default_function_conv2d_nchw_strides = (((DLTensor*)conv2d_nchw)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_kernel_strides == NULL)) {\n  }\n  if (!(default_function_bias_strides == NULL)) {\n  }\n  if (!(default_function_conv2d_nchw_strides == NULL)) {\n  }\n  for (int32_t nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused = 0; nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused < 186; ++nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused) {\n    int32_t cse_var_1 = (((nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused % 31) * 18) + (nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused / 31));\n    float pad_temp[32];\n    ((float*)conv2d_nchw_1)[cse_var_1] = 0.000000e+00f;\n    ((float*)conv2d_nchw_1)[(cse_var_1 + 6)] = 0.000000e+00f;\n    ((float*)conv2d_nchw_1)[(cse_var_1 + 12)] = 0.000000e+00f;\n    for (int32_t rc_outer = 0; rc_outer < 7; ++rc_outer) {\n      int32_t cse_var_13 = (nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused % 62);\n      int32_t cse_var_12 = (cse_var_13 / 31);\n      bool cse_var_11 = (nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused < 124);\n      bool cse_var_10 = (62 <= nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused);\n      bool cse_var_9 = (cse_var_13 < 31);\n      bool cse_var_8 = (cse_var_12 == 1);\n      int32_t cse_var_7 = ((rc_outer * 60) + ((nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused / 62) * 10));\n      bool cse_var_6 = ((nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused < 93) && cse_var_9);\n      bool cse_var_5 = (cse_var_10 && cse_var_9);\n      bool cse_var_4 = (cse_var_11 && cse_var_8);\n      bool cse_var_3 = (cse_var_10 && cse_var_8);\n      int32_t cse_var_2 = (cse_var_7 + (cse_var_12 * 3));\n      pad_temp[0] = (cse_var_3 ? ((float*)data_1)[(cse_var_2 - 6)] : 0.000000e+00f);\n      pad_temp[1] = (cse_var_10 ? ((float*)data_1)[(cse_var_2 - 5)] : 0.000000e+00f);\n      pad_temp[2] = (cse_var_10 ? ((float*)data_1)[(cse_var_2 - 4)] : 0.000000e+00f);\n      pad_temp[3] = (cse_var_5 ? ((float*)data_1)[(cse_var_7 - 3)] : 0.000000e+00f);\n      pad_temp[4] = (cse_var_8 ? ((float*)data_1)[(cse_var_2 - 1)] : 0.000000e+00f);\n      pad_temp[5] = ((float*)data_1)[cse_var_2];\n      pad_temp[6] = ((float*)data_1)[(cse_var_2 + 1)];\n      pad_temp[7] = (cse_var_9 ? ((float*)data_1)[(cse_var_7 + 2)] : 0.000000e+00f);\n      pad_temp[8] = (cse_var_8 ? ((float*)data_1)[(cse_var_2 + 4)] : 0.000000e+00f);\n      pad_temp[9] = ((float*)data_1)[(cse_var_2 + 5)];\n      pad_temp[10] = ((float*)data_1)[(cse_var_2 + 6)];\n      pad_temp[11] = (cse_var_9 ? ((float*)data_1)[(cse_var_7 + 7)] : 0.000000e+00f);\n      pad_temp[12] = (cse_var_4 ? ((float*)data_1)[(cse_var_2 + 9)] : 0.000000e+00f);\n      pad_temp[13] = (cse_var_11 ? ((float*)data_1)[(cse_var_2 + 10)] : 0.000000e+00f);\n      pad_temp[14] = (cse_var_11 ? ((float*)data_1)[(cse_var_2 + 11)] : 0.000000e+00f);\n      pad_temp[15] = (cse_var_6 ? ((float*)data_1)[(cse_var_7 + 12)] : 0.000000e+00f);\n      pad_temp[16] = (cse_var_3 ? ((float*)data_1)[(cse_var_2 + 24)] : 0.000000e+00f);\n      pad_temp[17] = (cse_var_10 ? ((float*)data_1)[(cse_var_2 + 25)] : 0.000000e+00f);\n      pad_temp[18] = (cse_var_10 ? ((float*)data_1)[(cse_var_2 + 26)] : 0.000000e+00f);\n      pad_temp[19] = (cse_var_5 ? ((float*)data_1)[(cse_var_7 + 27)] : 0.000000e+00f);\n      pad_temp[20] = (cse_var_8 ? ((float*)data_1)[(cse_var_2 + 29)] : 0.000000e+00f);\n      pad_temp[21] = ((float*)data_1)[(cse_var_2 + 30)];\n      pad_temp[22] = ((float*)data_1)[(cse_var_2 + 31)];\n      pad_temp[23] = (cse_var_9 ? ((float*)data_1)[(cse_var_7 + 32)] : 0.000000e+00f);\n      pad_temp[24] = (cse_var_8 ? ((float*)data_1)[(cse_var_2 + 34)] : 0.000000e+00f);\n      pad_temp[25] = ((float*)data_1)[(cse_var_2 + 35)];\n      pad_temp[26] = ((float*)data_1)[(cse_var_2 + 36)];\n      pad_temp[27] = (cse_var_9 ? ((float*)data_1)[(cse_var_7 + 37)] : 0.000000e+00f);\n      pad_temp[28] = (cse_var_4 ? ((float*)data_1)[(cse_var_2 + 39)] : 0.000000e+00f);\n      pad_temp[29] = (cse_var_11 ? ((float*)data_1)[(cse_var_2 + 40)] : 0.000000e+00f);\n      pad_temp[30] = (cse_var_11 ? ((float*)data_1)[(cse_var_2 + 41)] : 0.000000e+00f);\n      pad_temp[31] = (cse_var_6 ? ((float*)data_1)[(cse_var_7 + 42)] : 0.000000e+00f);\n      for (int32_t ry_outer = 0; ry_outer < 4; ++ry_outer) {\n        int32_t cse_var_24 = (ry_outer * 4);\n        int32_t cse_var_23 = (cse_var_1 + 6);\n        int32_t cse_var_22 = (cse_var_1 + 12);\n        int32_t cse_var_21 = (cse_var_24 + 3);\n        int32_t cse_var_20 = (cse_var_24 + 2);\n        int32_t cse_var_19 = (cse_var_24 + 19);\n        int32_t cse_var_18 = (cse_var_24 + 18);\n        int32_t cse_var_17 = (cse_var_24 + 17);\n        int32_t cse_var_16 = (cse_var_24 + 16);\n        int32_t cse_var_15 = (cse_var_24 + 1);\n        int32_t cse_var_14 = ((((nn_outer_outer_outer_ff_outer_outer_outer_fused_yy_outer_outer_outer_fused_xx_outer_outer_outer_fused_nn_outer_outer_inner_fused_ff_outer_outer_inner_fused_yy_outer_outer_inner_fused_xx_outer_outer_inner_fused % 31) * 672) + (rc_outer * 32)) + cse_var_24);\n        ((float*)conv2d_nchw_1)[cse_var_1] = (((float*)conv2d_nchw_1)[cse_var_1] + (pad_temp[cse_var_24] * ((float*)kernel_1)[cse_var_14]));\n        ((float*)conv2d_nchw_1)[cse_var_1] = (((float*)conv2d_nchw_1)[cse_var_1] + (pad_temp[cse_var_15] * ((float*)kernel_1)[(cse_var_14 + 1)]));\n        ((float*)conv2d_nchw_1)[cse_var_1] = (((float*)conv2d_nchw_1)[cse_var_1] + (pad_temp[cse_var_20] * ((float*)kernel_1)[(cse_var_14 + 2)]));\n        ((float*)conv2d_nchw_1)[cse_var_1] = (((float*)conv2d_nchw_1)[cse_var_1] + (pad_temp[cse_var_21] * ((float*)kernel_1)[(cse_var_14 + 3)]));\n        ((float*)conv2d_nchw_1)[cse_var_1] = (((float*)conv2d_nchw_1)[cse_var_1] + (pad_temp[cse_var_16] * ((float*)kernel_1)[(cse_var_14 + 16)]));\n        ((float*)conv2d_nchw_1)[cse_var_1] = (((float*)conv2d_nchw_1)[cse_var_1] + (pad_temp[cse_var_17] * ((float*)kernel_1)[(cse_var_14 + 17)]));\n        ((float*)conv2d_nchw_1)[cse_var_1] = (((float*)conv2d_nchw_1)[cse_var_1] + (pad_temp[cse_var_18] * ((float*)kernel_1)[(cse_var_14 + 18)]));\n        ((float*)conv2d_nchw_1)[cse_var_1] = (((float*)conv2d_nchw_1)[cse_var_1] + (pad_temp[cse_var_19] * ((float*)kernel_1)[(cse_var_14 + 19)]));\n        ((float*)conv2d_nchw_1)[cse_var_23] = (((float*)conv2d_nchw_1)[cse_var_23] + (pad_temp[cse_var_24] * ((float*)kernel_1)[(cse_var_14 + 224)]));\n        ((float*)conv2d_nchw_1)[cse_var_23] = (((float*)conv2d_nchw_1)[cse_var_23] + (pad_temp[cse_var_15] * ((float*)kernel_1)[(cse_var_14 + 225)]));\n        ((float*)conv2d_nchw_1)[cse_var_23] = (((float*)conv2d_nchw_1)[cse_var_23] + (pad_temp[cse_var_20] * ((float*)kernel_1)[(cse_var_14 + 226)]));\n        ((float*)conv2d_nchw_1)[cse_var_23] = (((float*)conv2d_nchw_1)[cse_var_23] + (pad_temp[cse_var_21] * ((float*)kernel_1)[(cse_var_14 + 227)]));\n        ((float*)conv2d_nchw_1)[cse_var_23] = (((float*)conv2d_nchw_1)[cse_var_23] + (pad_temp[cse_var_16] * ((float*)kernel_1)[(cse_var_14 + 240)]));\n        ((float*)conv2d_nchw_1)[cse_var_23] = (((float*)conv2d_nchw_1)[cse_var_23] + (pad_temp[cse_var_17] * ((float*)kernel_1)[(cse_var_14 + 241)]));\n        ((float*)conv2d_nchw_1)[cse_var_23] = (((float*)conv2d_nchw_1)[cse_var_23] + (pad_temp[cse_var_18] * ((float*)kernel_1)[(cse_var_14 + 242)]));\n        ((float*)conv2d_nchw_1)[cse_var_23] = (((float*)conv2d_nchw_1)[cse_var_23] + (pad_temp[cse_var_19] * ((float*)kernel_1)[(cse_var_14 + 243)]));\n        ((float*)conv2d_nchw_1)[cse_var_22] = (((float*)conv2d_nchw_1)[cse_var_22] + (pad_temp[cse_var_24] * ((float*)kernel_1)[(cse_var_14 + 448)]));\n        ((float*)conv2d_nchw_1)[cse_var_22] = (((float*)conv2d_nchw_1)[cse_var_22] + (pad_temp[cse_var_15] * ((float*)kernel_1)[(cse_var_14 + 449)]));\n        ((float*)conv2d_nchw_1)[cse_var_22] = (((float*)conv2d_nchw_1)[cse_var_22] + (pad_temp[cse_var_20] * ((float*)kernel_1)[(cse_var_14 + 450)]));\n        ((float*)conv2d_nchw_1)[cse_var_22] = (((float*)conv2d_nchw_1)[cse_var_22] + (pad_temp[cse_var_21] * ((float*)kernel_1)[(cse_var_14 + 451)]));\n        ((float*)conv2d_nchw_1)[cse_var_22] = (((float*)conv2d_nchw_1)[cse_var_22] + (pad_temp[cse_var_16] * ((float*)kernel_1)[(cse_var_14 + 464)]));\n        ((float*)conv2d_nchw_1)[cse_var_22] = (((float*)conv2d_nchw_1)[cse_var_22] + (pad_temp[cse_var_17] * ((float*)kernel_1)[(cse_var_14 + 465)]));\n        ((float*)conv2d_nchw_1)[cse_var_22] = (((float*)conv2d_nchw_1)[cse_var_22] + (pad_temp[cse_var_18] * ((float*)kernel_1)[(cse_var_14 + 466)]));\n        ((float*)conv2d_nchw_1)[cse_var_22] = (((float*)conv2d_nchw_1)[cse_var_22] + (pad_temp[cse_var_19] * ((float*)kernel_1)[(cse_var_14 + 467)]));\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "conv2d_nchw[1__6__5__93__14__4__4__(2__3)__(1__1)]"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((7, 8, 28, 36), \"float32\"), T_softmax_norm: T.Buffer((7, 8, 28, 36), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_exp = T.allocate([56448], \"float32\", \"global\")\n        T_softmax_exp_1 = T.Buffer((56448,), data=T_softmax_exp)\n        for i0_i1_fused_i2_fused in T.parallel(1568):\n            T_softmax_maxelem = T.allocate([1], \"float32\", \"global\")\n            for i3 in range(36):\n                cse_var_1: T.int32 = i0_i1_fused_i2_fused * 36 + i3\n                T_softmax_maxelem_1 = T.Buffer((1,), data=T_softmax_maxelem, align=4)\n                T_softmax_maxelem_1[0] = T.float32(-3.4028234663852886e+38)\n                data_1 = T.Buffer((56448,), data=data.data)\n                for k in range(36):\n                    T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[i0_i1_fused_i2_fused * 36 + k])\n                T_softmax_exp_1[cse_var_1] = T.exp(data_1[cse_var_1] - T_softmax_maxelem_1[0])\n        for i0 in T.parallel(7):\n            T_softmax_expsum = T.allocate([224], \"float32\", \"global\")\n            T_softmax_expsum_1 = T.Buffer((224,), data=T_softmax_expsum)\n            for i1, i2 in T.grid(8, 28):\n                cse_var_3: T.int32 = i1 * 28 + i2\n                cse_var_2: T.int32 = i0 * 8064 + i1 * 1008 + i2 * 36\n                T_softmax_expsum_1[cse_var_3] = T.float32(0)\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 1]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 2]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 3]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 4]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 5]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 6]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 7]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 8]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 9]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 10]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 11]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 12]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 13]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 14]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 15]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 16]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 17]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 18]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 19]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 20]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 21]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 22]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 23]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 24]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 25]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 26]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 27]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 28]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 29]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 30]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 31]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 32]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 33]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 34]\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T_softmax_exp_1[cse_var_2 + 35]\n            for i1, i2, i3 in T.grid(8, 28, 36):\n                cse_var_4: T.int32 = i0 * 8064 + i1 * 1008 + i2 * 36 + i3\n                T_softmax_norm_1 = T.Buffer((56448,), data=T_softmax_norm.data)\n                T_softmax_norm_1[cse_var_4] = T_softmax_exp_1[cse_var_4] / T_softmax_expsum_1[i1 * 28 + i2]\n\n### CUDA Code:\n\n#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ < 700)\n#define __shfl_sync(mask, var, lane, width) \\\n        __shfl((var), (lane), (width))\n\n#define __shfl_down_sync(mask, var, offset, width) \\\n        __shfl_down((var), (offset), (width))\n\n#define __shfl_up_sync(mask, var, offset, width) \\\n        __shfl_up((var), (offset), (width))\n#endif\n\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_softmax_norm, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_softmax_norm, float* __restrict__ data) {\n  float normal_reduce_temp0[1];\n  float red_buf0[1];\n  __shared__ float T_softmax_maxelem[1];\n  float normal_reduce_temp0_1[1];\n  float red_buf0_1[1];\n  __shared__ float T_softmax_expsum[1];\n  normal_reduce_temp0[0] = -3.402823e+38f;\n  normal_reduce_temp0[0] = max(normal_reduce_temp0[0], data[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))]);\n  normal_reduce_temp0[0] = max(normal_reduce_temp0[0], data[(((((int)blockIdx.x) * 36) + ((int)threadIdx.x)) + 16)]);\n  if (((int)threadIdx.x) < 4) {\n    normal_reduce_temp0[0] = max(normal_reduce_temp0[0], data[(((((int)blockIdx.x) * 36) + ((int)threadIdx.x)) + 32)]);\n  }\n  uint mask[1];\n  float t0[1];\n  red_buf0[0] = normal_reduce_temp0[0];\n  mask[0] = __activemask();\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 8, 32);\n  red_buf0[0] = max(red_buf0[0], t0[0]);\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 4, 32);\n  red_buf0[0] = max(red_buf0[0], t0[0]);\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);\n  red_buf0[0] = max(red_buf0[0], t0[0]);\n  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);\n  red_buf0[0] = max(red_buf0[0], t0[0]);\n  red_buf0[0] = __shfl_sync(mask[0], red_buf0[0], 0, 32);\n  if (((int)threadIdx.x) == 0) {\n    T_softmax_maxelem[0] = red_buf0[0];\n  }\n  normal_reduce_temp0_1[0] = 0.000000e+00f;\n  __syncthreads();\n  normal_reduce_temp0_1[0] = (normal_reduce_temp0_1[0] + __expf((data[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))] - T_softmax_maxelem[0])));\n  normal_reduce_temp0_1[0] = (normal_reduce_temp0_1[0] + __expf((data[(((((int)blockIdx.x) * 36) + ((int)threadIdx.x)) + 16)] - T_softmax_maxelem[0])));\n  if (((int)threadIdx.x) < 4) {\n    normal_reduce_temp0_1[0] = (normal_reduce_temp0_1[0] + __expf((data[(((((int)blockIdx.x) * 36) + ((int)threadIdx.x)) + 32)] - T_softmax_maxelem[0])));\n  }\n  uint mask_1[1];\n  float t0_1[1];\n  red_buf0_1[0] = normal_reduce_temp0_1[0];\n  mask_1[0] = __activemask();\n  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 8, 32);\n  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);\n  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 4, 32);\n  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);\n  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 2, 32);\n  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);\n  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 1, 32);\n  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);\n  red_buf0_1[0] = __shfl_sync(mask_1[0], red_buf0_1[0], 0, 32);\n  if (((int)threadIdx.x) == 0) {\n    T_softmax_expsum[0] = red_buf0_1[0];\n  }\n  __syncthreads();\n  for (int i3_outer = 0; i3_outer < 3; ++i3_outer) {\n    if (((i3_outer * 4) + (((int)threadIdx.x) >> 2)) < 9) {\n      T_softmax_norm[(((((int)blockIdx.x) * 36) + (i3_outer * 16)) + ((int)threadIdx.x))] = (__expf((data[(((((int)blockIdx.x) * 36) + (i3_outer * 16)) + ((int)threadIdx.x))] - T_softmax_maxelem[0])) / T_softmax_expsum[0]);\n    }\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t T_softmax_norm_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* T_softmax_norm = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* T_softmax_norm_1 = (((DLTensor*)T_softmax_norm)[0].data);\n  void* default_function_T_softmax_norm_shape = (((DLTensor*)T_softmax_norm)[0].shape);\n  void* default_function_T_softmax_norm_strides = (((DLTensor*)T_softmax_norm)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_T_softmax_norm_strides == NULL)) {\n  }\n  void* T_softmax_exp = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)225792, 2, 32);\n  if (T_softmax_exp == NULL) {\n    return -1;\n  }\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1568; ++i0_i1_fused_i2_fused) {\n    float T_softmax_maxelem[1];\n    for (int32_t i3 = 0; i3 < 36; ++i3) {\n      int32_t cse_var_1 = ((i0_i1_fused_i2_fused * 36) + i3);\n      T_softmax_maxelem[0] = -3.402823e+38f;\n      for (int32_t k = 0; k < 36; ++k) {\n        float v_ = T_softmax_maxelem[0];\n        float v__1 = ((float*)data_1)[((i0_i1_fused_i2_fused * 36) + k)];\n        T_softmax_maxelem[0] = ((v_) > (v__1) ? (v_) : (v__1));\n      }\n      ((float*)T_softmax_exp)[cse_var_1] = expf((((float*)data_1)[cse_var_1] - T_softmax_maxelem[0]));\n    }\n  }\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    float T_softmax_expsum[224];\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 28; ++i2) {\n        int32_t cse_var_3 = ((i1 * 28) + i2);\n        int32_t cse_var_2 = (((i0 * 8064) + (i1 * 1008)) + (i2 * 36));\n        T_softmax_expsum[cse_var_3] = 0.000000e+00f;\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[cse_var_2]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 1)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 2)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 3)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 4)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 5)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 6)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 7)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 8)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 9)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 10)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 11)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 12)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 13)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 14)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 15)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 16)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 17)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 18)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 19)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 20)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 21)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 22)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 23)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 24)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 25)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 26)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 27)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 28)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 29)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 30)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 31)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 32)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 33)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 34)]);\n        T_softmax_expsum[cse_var_3] = (T_softmax_expsum[cse_var_3] + ((float*)T_softmax_exp)[(cse_var_2 + 35)]);\n      }\n    }\n    for (int32_t i1_1 = 0; i1_1 < 8; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 28; ++i2_1) {\n        for (int32_t i3_1 = 0; i3_1 < 36; ++i3_1) {\n          int32_t cse_var_4 = ((((i0 * 8064) + (i1_1 * 1008)) + (i2_1 * 36)) + i3_1);\n          ((float*)T_softmax_norm_1)[cse_var_4] = (((float*)T_softmax_exp)[cse_var_4] / T_softmax_expsum[((i1_1 * 28) + i2_1)]);\n        }\n      }\n    }\n  }\n  if (TVMBackendFreeWorkspace(1, dev_id, T_softmax_exp) != 0) {\n    return -1;\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "softmax[7__8__28__36]"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((5, 16, 20, 8), \"float32\"), compute: T.Buffer((5, 16, 20, 8), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0 in T.parallel(5):\n            for i1, i2 in T.grid(16, 20):\n                cse_var_1: T.int32 = i0 * 2560 + i1 * 160 + i2 * 8\n                compute_1 = T.Buffer((12800,), data=compute.data)\n                data_1 = T.Buffer((12800,), data=data.data)\n                compute_1[cse_var_1:cse_var_1 + 8] = T.max(data_1[cse_var_1:cse_var_1 + 8], T.Broadcast(T.float32(0), 8))\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(25) default_function_kernel(float* __restrict__ compute, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(25) default_function_kernel(float* __restrict__ compute, float* __restrict__ data) {\n  compute[((((int)blockIdx.x) * 25) + ((int)threadIdx.x))] = max(data[((((int)blockIdx.x) * 25) + ((int)threadIdx.x))], 0.000000e+00f);\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t compute_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* compute = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* compute_1 = (((DLTensor*)compute)[0].data);\n  void* default_function_compute_shape = (((DLTensor*)compute)[0].shape);\n  void* default_function_compute_strides = (((DLTensor*)compute)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_compute_strides == NULL)) {\n  }\n  for (int32_t i0 = 0; i0 < 5; ++i0) {\n    for (int32_t i1 = 0; i1 < 16; ++i1) {\n      for (int32_t i2 = 0; i2 < 20; ++i2) {\n        int32_t cse_var_1 = (((i0 * 2560) + (i1 * 160)) + (i2 * 8));\n        int32_t8 v_ = int32_t8((cse_var_1)+(1*0), (cse_var_1)+(1*1), (cse_var_1)+(1*2), (cse_var_1)+(1*3), (cse_var_1)+(1*4), (cse_var_1)+(1*5), (cse_var_1)+(1*6), (cse_var_1)+(1*7));\n        float8 v__1 = float8(((float*)data_1)[v_.s0],((float*)data_1)[v_.s1],((float*)data_1)[v_.s2],((float*)data_1)[v_.s3],((float*)data_1)[v_.s4],((float*)data_1)[v_.s5],((float*)data_1)[v_.s6],((float*)data_1)[v_.s7]);\n        float8 v__2 = (float8)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f);\n        *(float8*)(((float*)compute_1) + cse_var_1) = ((v__1) > (v__2) ? (v__1) : (v__2));\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "relu[5__16__20__8]"
  },
  {
    "instruction": "You are integrating a deep learning model using CUDA operators into a distributed system where some nodes do not have GPU support. Please convert the provided CUDA operators to CPU operators to ensure consistency and performance throughout the system.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((6, 36, 32, 12), \"float32\"), data_1: T.Buffer((6, 36, 32, 12), \"float32\"), T_add: T.Buffer((6, 36, 32, 12), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused_ax2_fused in T.parallel(6912):\n            cse_var_1: T.int32 = ax0_ax1_fused_ax2_fused * 12\n            T_add_1 = T.Buffer((82944,), data=T_add.data)\n            data_2 = T.Buffer((82944,), data=data.data)\n            data_3 = T.Buffer((82944,), data=data_1.data)\n            T_add_1[cse_var_1:cse_var_1 + 12] = data_2[cse_var_1:cse_var_1 + 12] + data_3[cse_var_1:cse_var_1 + 12]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ T_add, float* __restrict__ data, float* __restrict__ data_1);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ T_add, float* __restrict__ data, float* __restrict__ data_1) {\n  T_add[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] + data_1[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t data_code_1 = arg_type_ids[1];\n  int32_t T_add_code = arg_type_ids[2];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* data_1 = (((TVMValue*)args)[1].v_handle);\n  void* T_add = (((TVMValue*)args)[2].v_handle);\n  void* data_2 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* data_3 = (((DLTensor*)data_1)[0].data);\n  void* default_function_data_shape_1 = (((DLTensor*)data_1)[0].shape);\n  void* default_function_data_strides_1 = (((DLTensor*)data_1)[0].strides);\n  void* T_add_1 = (((DLTensor*)T_add)[0].data);\n  void* default_function_T_add_shape = (((DLTensor*)T_add)[0].shape);\n  void* default_function_T_add_strides = (((DLTensor*)T_add)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_data_strides_1 == NULL)) {\n  }\n  if (!(default_function_T_add_strides == NULL)) {\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 6912; ++ax0_ax1_fused_ax2_fused) {\n    int32_t cse_var_1 = (ax0_ax1_fused_ax2_fused * 12);\n    int32_t12 v_ = int32_t12((cse_var_1)+(1*0), (cse_var_1)+(1*1), (cse_var_1)+(1*2), (cse_var_1)+(1*3), (cse_var_1)+(1*4), (cse_var_1)+(1*5), (cse_var_1)+(1*6), (cse_var_1)+(1*7), (cse_var_1)+(1*8), (cse_var_1)+(1*9), (cse_var_1)+(1*10), (cse_var_1)+(1*11));\n    *(float12*)(((float*)T_add_1) + cse_var_1) = ((float12(((float*)data_2)[v_.s0],((float*)data_2)[v_.s1],((float*)data_2)[v_.s2],((float*)data_2)[v_.s3],((float*)data_2)[v_.s4],((float*)data_2)[v_.s5],((float*)data_2)[v_.s6],((float*)data_2)[v_.s7],((float*)data_2)[v_.s8],((float*)data_2)[v_.s9],((float*)data_2)[v_.sa],((float*)data_2)[v_.sb])) + (float12(((float*)data_3)[v_.s0],((float*)data_3)[v_.s1],((float*)data_3)[v_.s2],((float*)data_3)[v_.s3],((float*)data_3)[v_.s4],((float*)data_3)[v_.s5],((float*)data_3)[v_.s6],((float*)data_3)[v_.s7],((float*)data_3)[v_.s8],((float*)data_3)[v_.s9],((float*)data_3)[v_.sa],((float*)data_3)[v_.sb])));\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "add[6__36__32__12]"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((4, 12, 12, 12), \"float32\"), T_softmax_norm: T.Buffer((4, 12, 12, 12), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(48):\n            T_softmax_exp = T.allocate([144], \"float32\", \"global\")\n            T_softmax_maxelem = T.allocate([1], \"float32\", \"global\")\n            T_softmax_expsum = T.allocate([1], \"float32\", \"global\")\n            T_softmax_exp_1 = T.Buffer((144,), data=T_softmax_exp)\n            for i2, i3 in T.grid(12, 12):\n                cse_var_2: T.int32 = i2 * 12\n                cse_var_1: T.int32 = i0_i1_fused * 144 + cse_var_2\n                T_softmax_maxelem_1 = T.Buffer((1,), data=T_softmax_maxelem, align=4)\n                T_softmax_maxelem_1[0] = T.float32(-3.4028234663852886e+38)\n                data_1 = T.Buffer((6912,), data=data.data)\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 1])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 2])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 3])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 4])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 5])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 6])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 7])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 8])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 9])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 10])\n                T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[cse_var_1 + 11])\n                T_softmax_exp_1[cse_var_2 + i3] = T.exp(data_1[cse_var_1 + i3] - T_softmax_maxelem_1[0])\n            for i2 in range(12):\n                cse_var_3: T.int32 = i2 * 12\n                T_softmax_expsum_1 = T.Buffer((1,), data=T_softmax_expsum, align=4)\n                T_softmax_expsum_1[0] = T.float32(0)\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 1]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 2]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 3]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 4]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 5]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 6]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 7]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 8]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 9]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 10]\n                T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_3 + 11]\n                T_softmax_norm_1 = T.Buffer((6912,), data=T_softmax_norm.data)\n                T_softmax_norm_1[i0_i1_fused * 144 + cse_var_3:i0_i1_fused * 144 + cse_var_3 + 12] = T_softmax_exp_1[cse_var_3:cse_var_3 + 12] / T.Broadcast(T_softmax_expsum_1[0], 12)\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ T_softmax_maxelem, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ T_softmax_expsum, float* __restrict__ T_softmax_maxelem, float* __restrict__ T_softmax_norm, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ T_softmax_expsum, float* __restrict__ T_softmax_maxelem, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ T_softmax_maxelem, float* __restrict__ data) {\n  T_softmax_maxelem[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = -3.402823e+38f;\n  for (int k = 0; k < 12; ++k) {\n    T_softmax_maxelem[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = max(T_softmax_maxelem[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))], data[(((((int)blockIdx.x) * 768) + (((int)threadIdx.x) * 12)) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ T_softmax_expsum, float* __restrict__ T_softmax_maxelem, float* __restrict__ T_softmax_norm, float* __restrict__ data) {\n  T_softmax_norm[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = (__expf((data[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] - T_softmax_maxelem[(((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 2)) / 3)])) / T_softmax_expsum[(((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 2)) / 3)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ T_softmax_expsum, float* __restrict__ T_softmax_maxelem, float* __restrict__ data) {\n  T_softmax_expsum[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = 0.000000e+00f;\n  for (int k = 0; k < 12; ++k) {\n    T_softmax_expsum[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (T_softmax_expsum[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] + __expf((data[(((((int)blockIdx.x) * 768) + (((int)threadIdx.x) * 12)) + k)] - T_softmax_maxelem[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))])));\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float expf(float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t T_softmax_norm_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* T_softmax_norm = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* T_softmax_norm_1 = (((DLTensor*)T_softmax_norm)[0].data);\n  void* default_function_T_softmax_norm_shape = (((DLTensor*)T_softmax_norm)[0].shape);\n  void* default_function_T_softmax_norm_strides = (((DLTensor*)T_softmax_norm)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_T_softmax_norm_strides == NULL)) {\n  }\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 48; ++i0_i1_fused) {\n    float T_softmax_exp[144];\n    float T_softmax_maxelem[1];\n    float T_softmax_expsum[1];\n    for (int32_t i2 = 0; i2 < 12; ++i2) {\n      for (int32_t i3 = 0; i3 < 12; ++i3) {\n        int32_t cse_var_2 = (i2 * 12);\n        int32_t cse_var_1 = ((i0_i1_fused * 144) + cse_var_2);\n        T_softmax_maxelem[0] = -3.402823e+38f;\n        float v_ = T_softmax_maxelem[0];\n        float v__1 = ((float*)data_1)[cse_var_1];\n        T_softmax_maxelem[0] = ((v_) > (v__1) ? (v_) : (v__1));\n        float v__2 = ((float*)data_1)[(cse_var_1 + 1)];\n        T_softmax_maxelem[0] = ((v_) > (v__2) ? (v_) : (v__2));\n        float v__3 = ((float*)data_1)[(cse_var_1 + 2)];\n        T_softmax_maxelem[0] = ((v_) > (v__3) ? (v_) : (v__3));\n        float v__4 = ((float*)data_1)[(cse_var_1 + 3)];\n        T_softmax_maxelem[0] = ((v_) > (v__4) ? (v_) : (v__4));\n        float v__5 = ((float*)data_1)[(cse_var_1 + 4)];\n        T_softmax_maxelem[0] = ((v_) > (v__5) ? (v_) : (v__5));\n        float v__6 = ((float*)data_1)[(cse_var_1 + 5)];\n        T_softmax_maxelem[0] = ((v_) > (v__6) ? (v_) : (v__6));\n        float v__7 = ((float*)data_1)[(cse_var_1 + 6)];\n        T_softmax_maxelem[0] = ((v_) > (v__7) ? (v_) : (v__7));\n        float v__8 = ((float*)data_1)[(cse_var_1 + 7)];\n        T_softmax_maxelem[0] = ((v_) > (v__8) ? (v_) : (v__8));\n        float v__9 = ((float*)data_1)[(cse_var_1 + 8)];\n        T_softmax_maxelem[0] = ((v_) > (v__9) ? (v_) : (v__9));\n        float v__10 = ((float*)data_1)[(cse_var_1 + 9)];\n        T_softmax_maxelem[0] = ((v_) > (v__10) ? (v_) : (v__10));\n        float v__11 = ((float*)data_1)[(cse_var_1 + 10)];\n        T_softmax_maxelem[0] = ((v_) > (v__11) ? (v_) : (v__11));\n        float v__12 = ((float*)data_1)[(cse_var_1 + 11)];\n        T_softmax_maxelem[0] = ((v_) > (v__12) ? (v_) : (v__12));\n        T_softmax_exp[(cse_var_2 + i3)] = expf((((float*)data_1)[(cse_var_1 + i3)] - T_softmax_maxelem[0]));\n      }\n    }\n    for (int32_t i2_1 = 0; i2_1 < 12; ++i2_1) {\n      int32_t cse_var_3 = (i2_1 * 12);\n      T_softmax_expsum[0] = 0.000000e+00f;\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[cse_var_3]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 1)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 2)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 3)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 4)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 5)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 6)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 7)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 8)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 9)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 10)]);\n      T_softmax_expsum[0] = (T_softmax_expsum[0] + T_softmax_exp[(cse_var_3 + 11)]);\n      int32_t12 v__13 = int32_t12((cse_var_3)+(1*0), (cse_var_3)+(1*1), (cse_var_3)+(1*2), (cse_var_3)+(1*3), (cse_var_3)+(1*4), (cse_var_3)+(1*5), (cse_var_3)+(1*6), (cse_var_3)+(1*7), (cse_var_3)+(1*8), (cse_var_3)+(1*9), (cse_var_3)+(1*10), (cse_var_3)+(1*11));\n      *(float12*)(((float*)T_softmax_norm_1) + ((i0_i1_fused * 144) + cse_var_3)) = ((float12(T_softmax_exp[v__13.s0],T_softmax_exp[v__13.s1],T_softmax_exp[v__13.s2],T_softmax_exp[v__13.s3],T_softmax_exp[v__13.s4],T_softmax_exp[v__13.s5],T_softmax_exp[v__13.s6],T_softmax_exp[v__13.s7],T_softmax_exp[v__13.s8],T_softmax_exp[v__13.s9],T_softmax_exp[v__13.sa],T_softmax_exp[v__13.sb])) / ((float12)(T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0], T_softmax_expsum[0])));\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "softmax[4__12__12__12]"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((6, 28, 28, 16), \"float32\"), adaptive_pool_max: T.Buffer((6, 28, 1, 1), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(168):\n            cse_var_1: T.int32 = ax0_ax1_fused * 448\n            adaptive_pool_max_1 = T.Buffer((168,), data=adaptive_pool_max.data)\n            adaptive_pool_max_1[ax0_ax1_fused] = T.float32(-3.4028234663852886e+38)\n            data_1 = T.Buffer((75264,), data=data.data)\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 1])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 2])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 3])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 4])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 5])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 6])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 7])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 8])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 9])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 10])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 11])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 12])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 13])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 14])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 15])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 16])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 17])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 18])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 19])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 20])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 21])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 22])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 23])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 24])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 25])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 26])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 27])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 28])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 29])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 30])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 31])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 32])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 33])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 34])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 35])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 36])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 37])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 38])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 39])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 40])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 41])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 42])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 43])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 44])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 45])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 46])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 47])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 48])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 49])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 50])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 51])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 52])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 53])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 54])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 55])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 56])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 57])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 58])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 59])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 60])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 61])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 62])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 63])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 64])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 65])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 66])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 67])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 68])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 69])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 70])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 71])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 72])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 73])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 74])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 75])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 76])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 77])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 78])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 79])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 80])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 81])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 82])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 83])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 84])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 85])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 86])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 87])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 88])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 89])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 90])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 91])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 92])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 93])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 94])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 95])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 96])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 97])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 98])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 99])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 100])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 101])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 102])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 103])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 104])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 105])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 106])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 107])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 108])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 109])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 110])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 111])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 112])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 113])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 114])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 115])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 116])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 117])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 118])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 119])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 120])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 121])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 122])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 123])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 124])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 125])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 126])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 127])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 128])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 129])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 130])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 131])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 132])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 133])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 134])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 135])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 136])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 137])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 138])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 139])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 140])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 141])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 142])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 143])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 144])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 145])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 146])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 147])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 148])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 149])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 150])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 151])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 152])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 153])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 154])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 155])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 156])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 157])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 158])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 159])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 160])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 161])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 162])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 163])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 164])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 165])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 166])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 167])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 168])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 169])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 170])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 171])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 172])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 173])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 174])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 175])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 176])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 177])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 178])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 179])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 180])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 181])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 182])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 183])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 184])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 185])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 186])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 187])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 188])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 189])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 190])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 191])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 192])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 193])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 194])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 195])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 196])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 197])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 198])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 199])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 200])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 201])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 202])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 203])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 204])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 205])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 206])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 207])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 208])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 209])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 210])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 211])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 212])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 213])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 214])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 215])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 216])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 217])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 218])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 219])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 220])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 221])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 222])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 223])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 224])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 225])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 226])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 227])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 228])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 229])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 230])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 231])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 232])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 233])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 234])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 235])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 236])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 237])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 238])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 239])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 240])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 241])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 242])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 243])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 244])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 245])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 246])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 247])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 248])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 249])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 250])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 251])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 252])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 253])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 254])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 255])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 256])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 257])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 258])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 259])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 260])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 261])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 262])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 263])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 264])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 265])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 266])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 267])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 268])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 269])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 270])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 271])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 272])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 273])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 274])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 275])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 276])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 277])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 278])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 279])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 280])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 281])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 282])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 283])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 284])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 285])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 286])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 287])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 288])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 289])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 290])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 291])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 292])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 293])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 294])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 295])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 296])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 297])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 298])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 299])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 300])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 301])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 302])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 303])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 304])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 305])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 306])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 307])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 308])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 309])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 310])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 311])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 312])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 313])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 314])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 315])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 316])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 317])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 318])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 319])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 320])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 321])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 322])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 323])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 324])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 325])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 326])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 327])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 328])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 329])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 330])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 331])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 332])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 333])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 334])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 335])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 336])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 337])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 338])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 339])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 340])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 341])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 342])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 343])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 344])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 345])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 346])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 347])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 348])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 349])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 350])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 351])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 352])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 353])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 354])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 355])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 356])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 357])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 358])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 359])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 360])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 361])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 362])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 363])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 364])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 365])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 366])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 367])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 368])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 369])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 370])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 371])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 372])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 373])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 374])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 375])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 376])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 377])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 378])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 379])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 380])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 381])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 382])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 383])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 384])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 385])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 386])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 387])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 388])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 389])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 390])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 391])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 392])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 393])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 394])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 395])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 396])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 397])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 398])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 399])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 400])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 401])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 402])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 403])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 404])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 405])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 406])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 407])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 408])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 409])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 410])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 411])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 412])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 413])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 414])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 415])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 416])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 417])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 418])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 419])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 420])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 421])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 422])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 423])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 424])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 425])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 426])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 427])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 428])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 429])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 430])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 431])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 432])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 433])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 434])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 435])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 436])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 437])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 438])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 439])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 440])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 441])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 442])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 443])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 444])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 445])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 446])\n            adaptive_pool_max_1[ax0_ax1_fused] = T.max(adaptive_pool_max_1[ax0_ax1_fused], data_1[cse_var_1 + 447])\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(float* __restrict__ adaptive_pool_max, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel(float* __restrict__ adaptive_pool_max, float* __restrict__ data) {\n  adaptive_pool_max[((((int)blockIdx.x) * 3) + ((int)threadIdx.x))] = -3.402823e+38f;\n  for (int rv0 = 0; rv0 < 28; ++rv0) {\n    for (int rv1 = 0; rv1 < 16; ++rv1) {\n      adaptive_pool_max[((((int)blockIdx.x) * 3) + ((int)threadIdx.x))] = max(adaptive_pool_max[((((int)blockIdx.x) * 3) + ((int)threadIdx.x))], data[((((((int)blockIdx.x) * 1344) + (((int)threadIdx.x) * 448)) + (rv0 * 16)) + rv1)]);\n    }\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t adaptive_pool_max_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* adaptive_pool_max = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* adaptive_pool_max_1 = (((DLTensor*)adaptive_pool_max)[0].data);\n  void* default_function_adaptive_pool_max_shape = (((DLTensor*)adaptive_pool_max)[0].shape);\n  void* default_function_adaptive_pool_max_strides = (((DLTensor*)adaptive_pool_max)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_adaptive_pool_max_strides == NULL)) {\n  }\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 168; ++ax0_ax1_fused) {\n    int32_t cse_var_1 = (ax0_ax1_fused * 448);\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = -3.402823e+38f;\n    float v_ = ((float*)adaptive_pool_max_1)[ax0_ax1_fused];\n    float v__1 = ((float*)data_1)[cse_var_1];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__1) ? (v_) : (v__1));\n    float v__2 = ((float*)data_1)[(cse_var_1 + 1)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__2) ? (v_) : (v__2));\n    float v__3 = ((float*)data_1)[(cse_var_1 + 2)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__3) ? (v_) : (v__3));\n    float v__4 = ((float*)data_1)[(cse_var_1 + 3)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__4) ? (v_) : (v__4));\n    float v__5 = ((float*)data_1)[(cse_var_1 + 4)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__5) ? (v_) : (v__5));\n    float v__6 = ((float*)data_1)[(cse_var_1 + 5)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__6) ? (v_) : (v__6));\n    float v__7 = ((float*)data_1)[(cse_var_1 + 6)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__7) ? (v_) : (v__7));\n    float v__8 = ((float*)data_1)[(cse_var_1 + 7)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__8) ? (v_) : (v__8));\n    float v__9 = ((float*)data_1)[(cse_var_1 + 8)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__9) ? (v_) : (v__9));\n    float v__10 = ((float*)data_1)[(cse_var_1 + 9)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__10) ? (v_) : (v__10));\n    float v__11 = ((float*)data_1)[(cse_var_1 + 10)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__11) ? (v_) : (v__11));\n    float v__12 = ((float*)data_1)[(cse_var_1 + 11)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__12) ? (v_) : (v__12));\n    float v__13 = ((float*)data_1)[(cse_var_1 + 12)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__13) ? (v_) : (v__13));\n    float v__14 = ((float*)data_1)[(cse_var_1 + 13)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__14) ? (v_) : (v__14));\n    float v__15 = ((float*)data_1)[(cse_var_1 + 14)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__15) ? (v_) : (v__15));\n    float v__16 = ((float*)data_1)[(cse_var_1 + 15)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__16) ? (v_) : (v__16));\n    float v__17 = ((float*)data_1)[(cse_var_1 + 16)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__17) ? (v_) : (v__17));\n    float v__18 = ((float*)data_1)[(cse_var_1 + 17)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__18) ? (v_) : (v__18));\n    float v__19 = ((float*)data_1)[(cse_var_1 + 18)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__19) ? (v_) : (v__19));\n    float v__20 = ((float*)data_1)[(cse_var_1 + 19)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__20) ? (v_) : (v__20));\n    float v__21 = ((float*)data_1)[(cse_var_1 + 20)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__21) ? (v_) : (v__21));\n    float v__22 = ((float*)data_1)[(cse_var_1 + 21)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__22) ? (v_) : (v__22));\n    float v__23 = ((float*)data_1)[(cse_var_1 + 22)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__23) ? (v_) : (v__23));\n    float v__24 = ((float*)data_1)[(cse_var_1 + 23)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__24) ? (v_) : (v__24));\n    float v__25 = ((float*)data_1)[(cse_var_1 + 24)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__25) ? (v_) : (v__25));\n    float v__26 = ((float*)data_1)[(cse_var_1 + 25)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__26) ? (v_) : (v__26));\n    float v__27 = ((float*)data_1)[(cse_var_1 + 26)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__27) ? (v_) : (v__27));\n    float v__28 = ((float*)data_1)[(cse_var_1 + 27)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__28) ? (v_) : (v__28));\n    float v__29 = ((float*)data_1)[(cse_var_1 + 28)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__29) ? (v_) : (v__29));\n    float v__30 = ((float*)data_1)[(cse_var_1 + 29)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__30) ? (v_) : (v__30));\n    float v__31 = ((float*)data_1)[(cse_var_1 + 30)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__31) ? (v_) : (v__31));\n    float v__32 = ((float*)data_1)[(cse_var_1 + 31)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__32) ? (v_) : (v__32));\n    float v__33 = ((float*)data_1)[(cse_var_1 + 32)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__33) ? (v_) : (v__33));\n    float v__34 = ((float*)data_1)[(cse_var_1 + 33)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__34) ? (v_) : (v__34));\n    float v__35 = ((float*)data_1)[(cse_var_1 + 34)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__35) ? (v_) : (v__35));\n    float v__36 = ((float*)data_1)[(cse_var_1 + 35)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__36) ? (v_) : (v__36));\n    float v__37 = ((float*)data_1)[(cse_var_1 + 36)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__37) ? (v_) : (v__37));\n    float v__38 = ((float*)data_1)[(cse_var_1 + 37)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__38) ? (v_) : (v__38));\n    float v__39 = ((float*)data_1)[(cse_var_1 + 38)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__39) ? (v_) : (v__39));\n    float v__40 = ((float*)data_1)[(cse_var_1 + 39)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__40) ? (v_) : (v__40));\n    float v__41 = ((float*)data_1)[(cse_var_1 + 40)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__41) ? (v_) : (v__41));\n    float v__42 = ((float*)data_1)[(cse_var_1 + 41)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__42) ? (v_) : (v__42));\n    float v__43 = ((float*)data_1)[(cse_var_1 + 42)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__43) ? (v_) : (v__43));\n    float v__44 = ((float*)data_1)[(cse_var_1 + 43)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__44) ? (v_) : (v__44));\n    float v__45 = ((float*)data_1)[(cse_var_1 + 44)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__45) ? (v_) : (v__45));\n    float v__46 = ((float*)data_1)[(cse_var_1 + 45)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__46) ? (v_) : (v__46));\n    float v__47 = ((float*)data_1)[(cse_var_1 + 46)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__47) ? (v_) : (v__47));\n    float v__48 = ((float*)data_1)[(cse_var_1 + 47)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__48) ? (v_) : (v__48));\n    float v__49 = ((float*)data_1)[(cse_var_1 + 48)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__49) ? (v_) : (v__49));\n    float v__50 = ((float*)data_1)[(cse_var_1 + 49)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__50) ? (v_) : (v__50));\n    float v__51 = ((float*)data_1)[(cse_var_1 + 50)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__51) ? (v_) : (v__51));\n    float v__52 = ((float*)data_1)[(cse_var_1 + 51)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__52) ? (v_) : (v__52));\n    float v__53 = ((float*)data_1)[(cse_var_1 + 52)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__53) ? (v_) : (v__53));\n    float v__54 = ((float*)data_1)[(cse_var_1 + 53)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__54) ? (v_) : (v__54));\n    float v__55 = ((float*)data_1)[(cse_var_1 + 54)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__55) ? (v_) : (v__55));\n    float v__56 = ((float*)data_1)[(cse_var_1 + 55)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__56) ? (v_) : (v__56));\n    float v__57 = ((float*)data_1)[(cse_var_1 + 56)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__57) ? (v_) : (v__57));\n    float v__58 = ((float*)data_1)[(cse_var_1 + 57)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__58) ? (v_) : (v__58));\n    float v__59 = ((float*)data_1)[(cse_var_1 + 58)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__59) ? (v_) : (v__59));\n    float v__60 = ((float*)data_1)[(cse_var_1 + 59)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__60) ? (v_) : (v__60));\n    float v__61 = ((float*)data_1)[(cse_var_1 + 60)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__61) ? (v_) : (v__61));\n    float v__62 = ((float*)data_1)[(cse_var_1 + 61)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__62) ? (v_) : (v__62));\n    float v__63 = ((float*)data_1)[(cse_var_1 + 62)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__63) ? (v_) : (v__63));\n    float v__64 = ((float*)data_1)[(cse_var_1 + 63)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__64) ? (v_) : (v__64));\n    float v__65 = ((float*)data_1)[(cse_var_1 + 64)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__65) ? (v_) : (v__65));\n    float v__66 = ((float*)data_1)[(cse_var_1 + 65)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__66) ? (v_) : (v__66));\n    float v__67 = ((float*)data_1)[(cse_var_1 + 66)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__67) ? (v_) : (v__67));\n    float v__68 = ((float*)data_1)[(cse_var_1 + 67)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__68) ? (v_) : (v__68));\n    float v__69 = ((float*)data_1)[(cse_var_1 + 68)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__69) ? (v_) : (v__69));\n    float v__70 = ((float*)data_1)[(cse_var_1 + 69)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__70) ? (v_) : (v__70));\n    float v__71 = ((float*)data_1)[(cse_var_1 + 70)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__71) ? (v_) : (v__71));\n    float v__72 = ((float*)data_1)[(cse_var_1 + 71)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__72) ? (v_) : (v__72));\n    float v__73 = ((float*)data_1)[(cse_var_1 + 72)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__73) ? (v_) : (v__73));\n    float v__74 = ((float*)data_1)[(cse_var_1 + 73)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__74) ? (v_) : (v__74));\n    float v__75 = ((float*)data_1)[(cse_var_1 + 74)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__75) ? (v_) : (v__75));\n    float v__76 = ((float*)data_1)[(cse_var_1 + 75)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__76) ? (v_) : (v__76));\n    float v__77 = ((float*)data_1)[(cse_var_1 + 76)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__77) ? (v_) : (v__77));\n    float v__78 = ((float*)data_1)[(cse_var_1 + 77)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__78) ? (v_) : (v__78));\n    float v__79 = ((float*)data_1)[(cse_var_1 + 78)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__79) ? (v_) : (v__79));\n    float v__80 = ((float*)data_1)[(cse_var_1 + 79)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__80) ? (v_) : (v__80));\n    float v__81 = ((float*)data_1)[(cse_var_1 + 80)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__81) ? (v_) : (v__81));\n    float v__82 = ((float*)data_1)[(cse_var_1 + 81)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__82) ? (v_) : (v__82));\n    float v__83 = ((float*)data_1)[(cse_var_1 + 82)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__83) ? (v_) : (v__83));\n    float v__84 = ((float*)data_1)[(cse_var_1 + 83)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__84) ? (v_) : (v__84));\n    float v__85 = ((float*)data_1)[(cse_var_1 + 84)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__85) ? (v_) : (v__85));\n    float v__86 = ((float*)data_1)[(cse_var_1 + 85)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__86) ? (v_) : (v__86));\n    float v__87 = ((float*)data_1)[(cse_var_1 + 86)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__87) ? (v_) : (v__87));\n    float v__88 = ((float*)data_1)[(cse_var_1 + 87)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__88) ? (v_) : (v__88));\n    float v__89 = ((float*)data_1)[(cse_var_1 + 88)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__89) ? (v_) : (v__89));\n    float v__90 = ((float*)data_1)[(cse_var_1 + 89)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__90) ? (v_) : (v__90));\n    float v__91 = ((float*)data_1)[(cse_var_1 + 90)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__91) ? (v_) : (v__91));\n    float v__92 = ((float*)data_1)[(cse_var_1 + 91)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__92) ? (v_) : (v__92));\n    float v__93 = ((float*)data_1)[(cse_var_1 + 92)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__93) ? (v_) : (v__93));\n    float v__94 = ((float*)data_1)[(cse_var_1 + 93)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__94) ? (v_) : (v__94));\n    float v__95 = ((float*)data_1)[(cse_var_1 + 94)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__95) ? (v_) : (v__95));\n    float v__96 = ((float*)data_1)[(cse_var_1 + 95)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__96) ? (v_) : (v__96));\n    float v__97 = ((float*)data_1)[(cse_var_1 + 96)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__97) ? (v_) : (v__97));\n    float v__98 = ((float*)data_1)[(cse_var_1 + 97)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__98) ? (v_) : (v__98));\n    float v__99 = ((float*)data_1)[(cse_var_1 + 98)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__99) ? (v_) : (v__99));\n    float v__100 = ((float*)data_1)[(cse_var_1 + 99)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__100) ? (v_) : (v__100));\n    float v__101 = ((float*)data_1)[(cse_var_1 + 100)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__101) ? (v_) : (v__101));\n    float v__102 = ((float*)data_1)[(cse_var_1 + 101)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__102) ? (v_) : (v__102));\n    float v__103 = ((float*)data_1)[(cse_var_1 + 102)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__103) ? (v_) : (v__103));\n    float v__104 = ((float*)data_1)[(cse_var_1 + 103)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__104) ? (v_) : (v__104));\n    float v__105 = ((float*)data_1)[(cse_var_1 + 104)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__105) ? (v_) : (v__105));\n    float v__106 = ((float*)data_1)[(cse_var_1 + 105)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__106) ? (v_) : (v__106));\n    float v__107 = ((float*)data_1)[(cse_var_1 + 106)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__107) ? (v_) : (v__107));\n    float v__108 = ((float*)data_1)[(cse_var_1 + 107)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__108) ? (v_) : (v__108));\n    float v__109 = ((float*)data_1)[(cse_var_1 + 108)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__109) ? (v_) : (v__109));\n    float v__110 = ((float*)data_1)[(cse_var_1 + 109)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__110) ? (v_) : (v__110));\n    float v__111 = ((float*)data_1)[(cse_var_1 + 110)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__111) ? (v_) : (v__111));\n    float v__112 = ((float*)data_1)[(cse_var_1 + 111)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__112) ? (v_) : (v__112));\n    float v__113 = ((float*)data_1)[(cse_var_1 + 112)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__113) ? (v_) : (v__113));\n    float v__114 = ((float*)data_1)[(cse_var_1 + 113)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__114) ? (v_) : (v__114));\n    float v__115 = ((float*)data_1)[(cse_var_1 + 114)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__115) ? (v_) : (v__115));\n    float v__116 = ((float*)data_1)[(cse_var_1 + 115)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__116) ? (v_) : (v__116));\n    float v__117 = ((float*)data_1)[(cse_var_1 + 116)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__117) ? (v_) : (v__117));\n    float v__118 = ((float*)data_1)[(cse_var_1 + 117)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__118) ? (v_) : (v__118));\n    float v__119 = ((float*)data_1)[(cse_var_1 + 118)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__119) ? (v_) : (v__119));\n    float v__120 = ((float*)data_1)[(cse_var_1 + 119)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__120) ? (v_) : (v__120));\n    float v__121 = ((float*)data_1)[(cse_var_1 + 120)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__121) ? (v_) : (v__121));\n    float v__122 = ((float*)data_1)[(cse_var_1 + 121)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__122) ? (v_) : (v__122));\n    float v__123 = ((float*)data_1)[(cse_var_1 + 122)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__123) ? (v_) : (v__123));\n    float v__124 = ((float*)data_1)[(cse_var_1 + 123)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__124) ? (v_) : (v__124));\n    float v__125 = ((float*)data_1)[(cse_var_1 + 124)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__125) ? (v_) : (v__125));\n    float v__126 = ((float*)data_1)[(cse_var_1 + 125)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__126) ? (v_) : (v__126));\n    float v__127 = ((float*)data_1)[(cse_var_1 + 126)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__127) ? (v_) : (v__127));\n    float v__128 = ((float*)data_1)[(cse_var_1 + 127)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__128) ? (v_) : (v__128));\n    float v__129 = ((float*)data_1)[(cse_var_1 + 128)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__129) ? (v_) : (v__129));\n    float v__130 = ((float*)data_1)[(cse_var_1 + 129)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__130) ? (v_) : (v__130));\n    float v__131 = ((float*)data_1)[(cse_var_1 + 130)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__131) ? (v_) : (v__131));\n    float v__132 = ((float*)data_1)[(cse_var_1 + 131)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__132) ? (v_) : (v__132));\n    float v__133 = ((float*)data_1)[(cse_var_1 + 132)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__133) ? (v_) : (v__133));\n    float v__134 = ((float*)data_1)[(cse_var_1 + 133)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__134) ? (v_) : (v__134));\n    float v__135 = ((float*)data_1)[(cse_var_1 + 134)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__135) ? (v_) : (v__135));\n    float v__136 = ((float*)data_1)[(cse_var_1 + 135)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__136) ? (v_) : (v__136));\n    float v__137 = ((float*)data_1)[(cse_var_1 + 136)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__137) ? (v_) : (v__137));\n    float v__138 = ((float*)data_1)[(cse_var_1 + 137)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__138) ? (v_) : (v__138));\n    float v__139 = ((float*)data_1)[(cse_var_1 + 138)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__139) ? (v_) : (v__139));\n    float v__140 = ((float*)data_1)[(cse_var_1 + 139)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__140) ? (v_) : (v__140));\n    float v__141 = ((float*)data_1)[(cse_var_1 + 140)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__141) ? (v_) : (v__141));\n    float v__142 = ((float*)data_1)[(cse_var_1 + 141)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__142) ? (v_) : (v__142));\n    float v__143 = ((float*)data_1)[(cse_var_1 + 142)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__143) ? (v_) : (v__143));\n    float v__144 = ((float*)data_1)[(cse_var_1 + 143)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__144) ? (v_) : (v__144));\n    float v__145 = ((float*)data_1)[(cse_var_1 + 144)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__145) ? (v_) : (v__145));\n    float v__146 = ((float*)data_1)[(cse_var_1 + 145)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__146) ? (v_) : (v__146));\n    float v__147 = ((float*)data_1)[(cse_var_1 + 146)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__147) ? (v_) : (v__147));\n    float v__148 = ((float*)data_1)[(cse_var_1 + 147)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__148) ? (v_) : (v__148));\n    float v__149 = ((float*)data_1)[(cse_var_1 + 148)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__149) ? (v_) : (v__149));\n    float v__150 = ((float*)data_1)[(cse_var_1 + 149)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__150) ? (v_) : (v__150));\n    float v__151 = ((float*)data_1)[(cse_var_1 + 150)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__151) ? (v_) : (v__151));\n    float v__152 = ((float*)data_1)[(cse_var_1 + 151)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__152) ? (v_) : (v__152));\n    float v__153 = ((float*)data_1)[(cse_var_1 + 152)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__153) ? (v_) : (v__153));\n    float v__154 = ((float*)data_1)[(cse_var_1 + 153)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__154) ? (v_) : (v__154));\n    float v__155 = ((float*)data_1)[(cse_var_1 + 154)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__155) ? (v_) : (v__155));\n    float v__156 = ((float*)data_1)[(cse_var_1 + 155)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__156) ? (v_) : (v__156));\n    float v__157 = ((float*)data_1)[(cse_var_1 + 156)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__157) ? (v_) : (v__157));\n    float v__158 = ((float*)data_1)[(cse_var_1 + 157)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__158) ? (v_) : (v__158));\n    float v__159 = ((float*)data_1)[(cse_var_1 + 158)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__159) ? (v_) : (v__159));\n    float v__160 = ((float*)data_1)[(cse_var_1 + 159)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__160) ? (v_) : (v__160));\n    float v__161 = ((float*)data_1)[(cse_var_1 + 160)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__161) ? (v_) : (v__161));\n    float v__162 = ((float*)data_1)[(cse_var_1 + 161)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__162) ? (v_) : (v__162));\n    float v__163 = ((float*)data_1)[(cse_var_1 + 162)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__163) ? (v_) : (v__163));\n    float v__164 = ((float*)data_1)[(cse_var_1 + 163)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__164) ? (v_) : (v__164));\n    float v__165 = ((float*)data_1)[(cse_var_1 + 164)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__165) ? (v_) : (v__165));\n    float v__166 = ((float*)data_1)[(cse_var_1 + 165)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__166) ? (v_) : (v__166));\n    float v__167 = ((float*)data_1)[(cse_var_1 + 166)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__167) ? (v_) : (v__167));\n    float v__168 = ((float*)data_1)[(cse_var_1 + 167)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__168) ? (v_) : (v__168));\n    float v__169 = ((float*)data_1)[(cse_var_1 + 168)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__169) ? (v_) : (v__169));\n    float v__170 = ((float*)data_1)[(cse_var_1 + 169)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__170) ? (v_) : (v__170));\n    float v__171 = ((float*)data_1)[(cse_var_1 + 170)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__171) ? (v_) : (v__171));\n    float v__172 = ((float*)data_1)[(cse_var_1 + 171)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__172) ? (v_) : (v__172));\n    float v__173 = ((float*)data_1)[(cse_var_1 + 172)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__173) ? (v_) : (v__173));\n    float v__174 = ((float*)data_1)[(cse_var_1 + 173)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__174) ? (v_) : (v__174));\n    float v__175 = ((float*)data_1)[(cse_var_1 + 174)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__175) ? (v_) : (v__175));\n    float v__176 = ((float*)data_1)[(cse_var_1 + 175)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__176) ? (v_) : (v__176));\n    float v__177 = ((float*)data_1)[(cse_var_1 + 176)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__177) ? (v_) : (v__177));\n    float v__178 = ((float*)data_1)[(cse_var_1 + 177)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__178) ? (v_) : (v__178));\n    float v__179 = ((float*)data_1)[(cse_var_1 + 178)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__179) ? (v_) : (v__179));\n    float v__180 = ((float*)data_1)[(cse_var_1 + 179)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__180) ? (v_) : (v__180));\n    float v__181 = ((float*)data_1)[(cse_var_1 + 180)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__181) ? (v_) : (v__181));\n    float v__182 = ((float*)data_1)[(cse_var_1 + 181)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__182) ? (v_) : (v__182));\n    float v__183 = ((float*)data_1)[(cse_var_1 + 182)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__183) ? (v_) : (v__183));\n    float v__184 = ((float*)data_1)[(cse_var_1 + 183)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__184) ? (v_) : (v__184));\n    float v__185 = ((float*)data_1)[(cse_var_1 + 184)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__185) ? (v_) : (v__185));\n    float v__186 = ((float*)data_1)[(cse_var_1 + 185)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__186) ? (v_) : (v__186));\n    float v__187 = ((float*)data_1)[(cse_var_1 + 186)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__187) ? (v_) : (v__187));\n    float v__188 = ((float*)data_1)[(cse_var_1 + 187)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__188) ? (v_) : (v__188));\n    float v__189 = ((float*)data_1)[(cse_var_1 + 188)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__189) ? (v_) : (v__189));\n    float v__190 = ((float*)data_1)[(cse_var_1 + 189)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__190) ? (v_) : (v__190));\n    float v__191 = ((float*)data_1)[(cse_var_1 + 190)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__191) ? (v_) : (v__191));\n    float v__192 = ((float*)data_1)[(cse_var_1 + 191)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__192) ? (v_) : (v__192));\n    float v__193 = ((float*)data_1)[(cse_var_1 + 192)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__193) ? (v_) : (v__193));\n    float v__194 = ((float*)data_1)[(cse_var_1 + 193)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__194) ? (v_) : (v__194));\n    float v__195 = ((float*)data_1)[(cse_var_1 + 194)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__195) ? (v_) : (v__195));\n    float v__196 = ((float*)data_1)[(cse_var_1 + 195)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__196) ? (v_) : (v__196));\n    float v__197 = ((float*)data_1)[(cse_var_1 + 196)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__197) ? (v_) : (v__197));\n    float v__198 = ((float*)data_1)[(cse_var_1 + 197)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__198) ? (v_) : (v__198));\n    float v__199 = ((float*)data_1)[(cse_var_1 + 198)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__199) ? (v_) : (v__199));\n    float v__200 = ((float*)data_1)[(cse_var_1 + 199)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__200) ? (v_) : (v__200));\n    float v__201 = ((float*)data_1)[(cse_var_1 + 200)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__201) ? (v_) : (v__201));\n    float v__202 = ((float*)data_1)[(cse_var_1 + 201)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__202) ? (v_) : (v__202));\n    float v__203 = ((float*)data_1)[(cse_var_1 + 202)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__203) ? (v_) : (v__203));\n    float v__204 = ((float*)data_1)[(cse_var_1 + 203)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__204) ? (v_) : (v__204));\n    float v__205 = ((float*)data_1)[(cse_var_1 + 204)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__205) ? (v_) : (v__205));\n    float v__206 = ((float*)data_1)[(cse_var_1 + 205)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__206) ? (v_) : (v__206));\n    float v__207 = ((float*)data_1)[(cse_var_1 + 206)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__207) ? (v_) : (v__207));\n    float v__208 = ((float*)data_1)[(cse_var_1 + 207)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__208) ? (v_) : (v__208));\n    float v__209 = ((float*)data_1)[(cse_var_1 + 208)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__209) ? (v_) : (v__209));\n    float v__210 = ((float*)data_1)[(cse_var_1 + 209)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__210) ? (v_) : (v__210));\n    float v__211 = ((float*)data_1)[(cse_var_1 + 210)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__211) ? (v_) : (v__211));\n    float v__212 = ((float*)data_1)[(cse_var_1 + 211)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__212) ? (v_) : (v__212));\n    float v__213 = ((float*)data_1)[(cse_var_1 + 212)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__213) ? (v_) : (v__213));\n    float v__214 = ((float*)data_1)[(cse_var_1 + 213)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__214) ? (v_) : (v__214));\n    float v__215 = ((float*)data_1)[(cse_var_1 + 214)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__215) ? (v_) : (v__215));\n    float v__216 = ((float*)data_1)[(cse_var_1 + 215)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__216) ? (v_) : (v__216));\n    float v__217 = ((float*)data_1)[(cse_var_1 + 216)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__217) ? (v_) : (v__217));\n    float v__218 = ((float*)data_1)[(cse_var_1 + 217)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__218) ? (v_) : (v__218));\n    float v__219 = ((float*)data_1)[(cse_var_1 + 218)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__219) ? (v_) : (v__219));\n    float v__220 = ((float*)data_1)[(cse_var_1 + 219)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__220) ? (v_) : (v__220));\n    float v__221 = ((float*)data_1)[(cse_var_1 + 220)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__221) ? (v_) : (v__221));\n    float v__222 = ((float*)data_1)[(cse_var_1 + 221)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__222) ? (v_) : (v__222));\n    float v__223 = ((float*)data_1)[(cse_var_1 + 222)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__223) ? (v_) : (v__223));\n    float v__224 = ((float*)data_1)[(cse_var_1 + 223)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__224) ? (v_) : (v__224));\n    float v__225 = ((float*)data_1)[(cse_var_1 + 224)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__225) ? (v_) : (v__225));\n    float v__226 = ((float*)data_1)[(cse_var_1 + 225)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__226) ? (v_) : (v__226));\n    float v__227 = ((float*)data_1)[(cse_var_1 + 226)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__227) ? (v_) : (v__227));\n    float v__228 = ((float*)data_1)[(cse_var_1 + 227)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__228) ? (v_) : (v__228));\n    float v__229 = ((float*)data_1)[(cse_var_1 + 228)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__229) ? (v_) : (v__229));\n    float v__230 = ((float*)data_1)[(cse_var_1 + 229)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__230) ? (v_) : (v__230));\n    float v__231 = ((float*)data_1)[(cse_var_1 + 230)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__231) ? (v_) : (v__231));\n    float v__232 = ((float*)data_1)[(cse_var_1 + 231)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__232) ? (v_) : (v__232));\n    float v__233 = ((float*)data_1)[(cse_var_1 + 232)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__233) ? (v_) : (v__233));\n    float v__234 = ((float*)data_1)[(cse_var_1 + 233)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__234) ? (v_) : (v__234));\n    float v__235 = ((float*)data_1)[(cse_var_1 + 234)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__235) ? (v_) : (v__235));\n    float v__236 = ((float*)data_1)[(cse_var_1 + 235)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__236) ? (v_) : (v__236));\n    float v__237 = ((float*)data_1)[(cse_var_1 + 236)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__237) ? (v_) : (v__237));\n    float v__238 = ((float*)data_1)[(cse_var_1 + 237)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__238) ? (v_) : (v__238));\n    float v__239 = ((float*)data_1)[(cse_var_1 + 238)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__239) ? (v_) : (v__239));\n    float v__240 = ((float*)data_1)[(cse_var_1 + 239)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__240) ? (v_) : (v__240));\n    float v__241 = ((float*)data_1)[(cse_var_1 + 240)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__241) ? (v_) : (v__241));\n    float v__242 = ((float*)data_1)[(cse_var_1 + 241)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__242) ? (v_) : (v__242));\n    float v__243 = ((float*)data_1)[(cse_var_1 + 242)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__243) ? (v_) : (v__243));\n    float v__244 = ((float*)data_1)[(cse_var_1 + 243)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__244) ? (v_) : (v__244));\n    float v__245 = ((float*)data_1)[(cse_var_1 + 244)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__245) ? (v_) : (v__245));\n    float v__246 = ((float*)data_1)[(cse_var_1 + 245)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__246) ? (v_) : (v__246));\n    float v__247 = ((float*)data_1)[(cse_var_1 + 246)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__247) ? (v_) : (v__247));\n    float v__248 = ((float*)data_1)[(cse_var_1 + 247)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__248) ? (v_) : (v__248));\n    float v__249 = ((float*)data_1)[(cse_var_1 + 248)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__249) ? (v_) : (v__249));\n    float v__250 = ((float*)data_1)[(cse_var_1 + 249)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__250) ? (v_) : (v__250));\n    float v__251 = ((float*)data_1)[(cse_var_1 + 250)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__251) ? (v_) : (v__251));\n    float v__252 = ((float*)data_1)[(cse_var_1 + 251)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__252) ? (v_) : (v__252));\n    float v__253 = ((float*)data_1)[(cse_var_1 + 252)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__253) ? (v_) : (v__253));\n    float v__254 = ((float*)data_1)[(cse_var_1 + 253)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__254) ? (v_) : (v__254));\n    float v__255 = ((float*)data_1)[(cse_var_1 + 254)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__255) ? (v_) : (v__255));\n    float v__256 = ((float*)data_1)[(cse_var_1 + 255)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__256) ? (v_) : (v__256));\n    float v__257 = ((float*)data_1)[(cse_var_1 + 256)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__257) ? (v_) : (v__257));\n    float v__258 = ((float*)data_1)[(cse_var_1 + 257)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__258) ? (v_) : (v__258));\n    float v__259 = ((float*)data_1)[(cse_var_1 + 258)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__259) ? (v_) : (v__259));\n    float v__260 = ((float*)data_1)[(cse_var_1 + 259)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__260) ? (v_) : (v__260));\n    float v__261 = ((float*)data_1)[(cse_var_1 + 260)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__261) ? (v_) : (v__261));\n    float v__262 = ((float*)data_1)[(cse_var_1 + 261)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__262) ? (v_) : (v__262));\n    float v__263 = ((float*)data_1)[(cse_var_1 + 262)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__263) ? (v_) : (v__263));\n    float v__264 = ((float*)data_1)[(cse_var_1 + 263)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__264) ? (v_) : (v__264));\n    float v__265 = ((float*)data_1)[(cse_var_1 + 264)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__265) ? (v_) : (v__265));\n    float v__266 = ((float*)data_1)[(cse_var_1 + 265)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__266) ? (v_) : (v__266));\n    float v__267 = ((float*)data_1)[(cse_var_1 + 266)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__267) ? (v_) : (v__267));\n    float v__268 = ((float*)data_1)[(cse_var_1 + 267)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__268) ? (v_) : (v__268));\n    float v__269 = ((float*)data_1)[(cse_var_1 + 268)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__269) ? (v_) : (v__269));\n    float v__270 = ((float*)data_1)[(cse_var_1 + 269)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__270) ? (v_) : (v__270));\n    float v__271 = ((float*)data_1)[(cse_var_1 + 270)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__271) ? (v_) : (v__271));\n    float v__272 = ((float*)data_1)[(cse_var_1 + 271)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__272) ? (v_) : (v__272));\n    float v__273 = ((float*)data_1)[(cse_var_1 + 272)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__273) ? (v_) : (v__273));\n    float v__274 = ((float*)data_1)[(cse_var_1 + 273)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__274) ? (v_) : (v__274));\n    float v__275 = ((float*)data_1)[(cse_var_1 + 274)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__275) ? (v_) : (v__275));\n    float v__276 = ((float*)data_1)[(cse_var_1 + 275)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__276) ? (v_) : (v__276));\n    float v__277 = ((float*)data_1)[(cse_var_1 + 276)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__277) ? (v_) : (v__277));\n    float v__278 = ((float*)data_1)[(cse_var_1 + 277)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__278) ? (v_) : (v__278));\n    float v__279 = ((float*)data_1)[(cse_var_1 + 278)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__279) ? (v_) : (v__279));\n    float v__280 = ((float*)data_1)[(cse_var_1 + 279)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__280) ? (v_) : (v__280));\n    float v__281 = ((float*)data_1)[(cse_var_1 + 280)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__281) ? (v_) : (v__281));\n    float v__282 = ((float*)data_1)[(cse_var_1 + 281)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__282) ? (v_) : (v__282));\n    float v__283 = ((float*)data_1)[(cse_var_1 + 282)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__283) ? (v_) : (v__283));\n    float v__284 = ((float*)data_1)[(cse_var_1 + 283)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__284) ? (v_) : (v__284));\n    float v__285 = ((float*)data_1)[(cse_var_1 + 284)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__285) ? (v_) : (v__285));\n    float v__286 = ((float*)data_1)[(cse_var_1 + 285)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__286) ? (v_) : (v__286));\n    float v__287 = ((float*)data_1)[(cse_var_1 + 286)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__287) ? (v_) : (v__287));\n    float v__288 = ((float*)data_1)[(cse_var_1 + 287)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__288) ? (v_) : (v__288));\n    float v__289 = ((float*)data_1)[(cse_var_1 + 288)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__289) ? (v_) : (v__289));\n    float v__290 = ((float*)data_1)[(cse_var_1 + 289)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__290) ? (v_) : (v__290));\n    float v__291 = ((float*)data_1)[(cse_var_1 + 290)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__291) ? (v_) : (v__291));\n    float v__292 = ((float*)data_1)[(cse_var_1 + 291)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__292) ? (v_) : (v__292));\n    float v__293 = ((float*)data_1)[(cse_var_1 + 292)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__293) ? (v_) : (v__293));\n    float v__294 = ((float*)data_1)[(cse_var_1 + 293)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__294) ? (v_) : (v__294));\n    float v__295 = ((float*)data_1)[(cse_var_1 + 294)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__295) ? (v_) : (v__295));\n    float v__296 = ((float*)data_1)[(cse_var_1 + 295)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__296) ? (v_) : (v__296));\n    float v__297 = ((float*)data_1)[(cse_var_1 + 296)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__297) ? (v_) : (v__297));\n    float v__298 = ((float*)data_1)[(cse_var_1 + 297)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__298) ? (v_) : (v__298));\n    float v__299 = ((float*)data_1)[(cse_var_1 + 298)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__299) ? (v_) : (v__299));\n    float v__300 = ((float*)data_1)[(cse_var_1 + 299)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__300) ? (v_) : (v__300));\n    float v__301 = ((float*)data_1)[(cse_var_1 + 300)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__301) ? (v_) : (v__301));\n    float v__302 = ((float*)data_1)[(cse_var_1 + 301)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__302) ? (v_) : (v__302));\n    float v__303 = ((float*)data_1)[(cse_var_1 + 302)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__303) ? (v_) : (v__303));\n    float v__304 = ((float*)data_1)[(cse_var_1 + 303)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__304) ? (v_) : (v__304));\n    float v__305 = ((float*)data_1)[(cse_var_1 + 304)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__305) ? (v_) : (v__305));\n    float v__306 = ((float*)data_1)[(cse_var_1 + 305)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__306) ? (v_) : (v__306));\n    float v__307 = ((float*)data_1)[(cse_var_1 + 306)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__307) ? (v_) : (v__307));\n    float v__308 = ((float*)data_1)[(cse_var_1 + 307)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__308) ? (v_) : (v__308));\n    float v__309 = ((float*)data_1)[(cse_var_1 + 308)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__309) ? (v_) : (v__309));\n    float v__310 = ((float*)data_1)[(cse_var_1 + 309)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__310) ? (v_) : (v__310));\n    float v__311 = ((float*)data_1)[(cse_var_1 + 310)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__311) ? (v_) : (v__311));\n    float v__312 = ((float*)data_1)[(cse_var_1 + 311)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__312) ? (v_) : (v__312));\n    float v__313 = ((float*)data_1)[(cse_var_1 + 312)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__313) ? (v_) : (v__313));\n    float v__314 = ((float*)data_1)[(cse_var_1 + 313)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__314) ? (v_) : (v__314));\n    float v__315 = ((float*)data_1)[(cse_var_1 + 314)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__315) ? (v_) : (v__315));\n    float v__316 = ((float*)data_1)[(cse_var_1 + 315)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__316) ? (v_) : (v__316));\n    float v__317 = ((float*)data_1)[(cse_var_1 + 316)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__317) ? (v_) : (v__317));\n    float v__318 = ((float*)data_1)[(cse_var_1 + 317)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__318) ? (v_) : (v__318));\n    float v__319 = ((float*)data_1)[(cse_var_1 + 318)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__319) ? (v_) : (v__319));\n    float v__320 = ((float*)data_1)[(cse_var_1 + 319)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__320) ? (v_) : (v__320));\n    float v__321 = ((float*)data_1)[(cse_var_1 + 320)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__321) ? (v_) : (v__321));\n    float v__322 = ((float*)data_1)[(cse_var_1 + 321)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__322) ? (v_) : (v__322));\n    float v__323 = ((float*)data_1)[(cse_var_1 + 322)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__323) ? (v_) : (v__323));\n    float v__324 = ((float*)data_1)[(cse_var_1 + 323)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__324) ? (v_) : (v__324));\n    float v__325 = ((float*)data_1)[(cse_var_1 + 324)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__325) ? (v_) : (v__325));\n    float v__326 = ((float*)data_1)[(cse_var_1 + 325)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__326) ? (v_) : (v__326));\n    float v__327 = ((float*)data_1)[(cse_var_1 + 326)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__327) ? (v_) : (v__327));\n    float v__328 = ((float*)data_1)[(cse_var_1 + 327)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__328) ? (v_) : (v__328));\n    float v__329 = ((float*)data_1)[(cse_var_1 + 328)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__329) ? (v_) : (v__329));\n    float v__330 = ((float*)data_1)[(cse_var_1 + 329)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__330) ? (v_) : (v__330));\n    float v__331 = ((float*)data_1)[(cse_var_1 + 330)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__331) ? (v_) : (v__331));\n    float v__332 = ((float*)data_1)[(cse_var_1 + 331)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__332) ? (v_) : (v__332));\n    float v__333 = ((float*)data_1)[(cse_var_1 + 332)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__333) ? (v_) : (v__333));\n    float v__334 = ((float*)data_1)[(cse_var_1 + 333)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__334) ? (v_) : (v__334));\n    float v__335 = ((float*)data_1)[(cse_var_1 + 334)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__335) ? (v_) : (v__335));\n    float v__336 = ((float*)data_1)[(cse_var_1 + 335)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__336) ? (v_) : (v__336));\n    float v__337 = ((float*)data_1)[(cse_var_1 + 336)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__337) ? (v_) : (v__337));\n    float v__338 = ((float*)data_1)[(cse_var_1 + 337)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__338) ? (v_) : (v__338));\n    float v__339 = ((float*)data_1)[(cse_var_1 + 338)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__339) ? (v_) : (v__339));\n    float v__340 = ((float*)data_1)[(cse_var_1 + 339)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__340) ? (v_) : (v__340));\n    float v__341 = ((float*)data_1)[(cse_var_1 + 340)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__341) ? (v_) : (v__341));\n    float v__342 = ((float*)data_1)[(cse_var_1 + 341)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__342) ? (v_) : (v__342));\n    float v__343 = ((float*)data_1)[(cse_var_1 + 342)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__343) ? (v_) : (v__343));\n    float v__344 = ((float*)data_1)[(cse_var_1 + 343)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__344) ? (v_) : (v__344));\n    float v__345 = ((float*)data_1)[(cse_var_1 + 344)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__345) ? (v_) : (v__345));\n    float v__346 = ((float*)data_1)[(cse_var_1 + 345)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__346) ? (v_) : (v__346));\n    float v__347 = ((float*)data_1)[(cse_var_1 + 346)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__347) ? (v_) : (v__347));\n    float v__348 = ((float*)data_1)[(cse_var_1 + 347)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__348) ? (v_) : (v__348));\n    float v__349 = ((float*)data_1)[(cse_var_1 + 348)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__349) ? (v_) : (v__349));\n    float v__350 = ((float*)data_1)[(cse_var_1 + 349)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__350) ? (v_) : (v__350));\n    float v__351 = ((float*)data_1)[(cse_var_1 + 350)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__351) ? (v_) : (v__351));\n    float v__352 = ((float*)data_1)[(cse_var_1 + 351)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__352) ? (v_) : (v__352));\n    float v__353 = ((float*)data_1)[(cse_var_1 + 352)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__353) ? (v_) : (v__353));\n    float v__354 = ((float*)data_1)[(cse_var_1 + 353)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__354) ? (v_) : (v__354));\n    float v__355 = ((float*)data_1)[(cse_var_1 + 354)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__355) ? (v_) : (v__355));\n    float v__356 = ((float*)data_1)[(cse_var_1 + 355)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__356) ? (v_) : (v__356));\n    float v__357 = ((float*)data_1)[(cse_var_1 + 356)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__357) ? (v_) : (v__357));\n    float v__358 = ((float*)data_1)[(cse_var_1 + 357)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__358) ? (v_) : (v__358));\n    float v__359 = ((float*)data_1)[(cse_var_1 + 358)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__359) ? (v_) : (v__359));\n    float v__360 = ((float*)data_1)[(cse_var_1 + 359)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__360) ? (v_) : (v__360));\n    float v__361 = ((float*)data_1)[(cse_var_1 + 360)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__361) ? (v_) : (v__361));\n    float v__362 = ((float*)data_1)[(cse_var_1 + 361)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__362) ? (v_) : (v__362));\n    float v__363 = ((float*)data_1)[(cse_var_1 + 362)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__363) ? (v_) : (v__363));\n    float v__364 = ((float*)data_1)[(cse_var_1 + 363)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__364) ? (v_) : (v__364));\n    float v__365 = ((float*)data_1)[(cse_var_1 + 364)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__365) ? (v_) : (v__365));\n    float v__366 = ((float*)data_1)[(cse_var_1 + 365)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__366) ? (v_) : (v__366));\n    float v__367 = ((float*)data_1)[(cse_var_1 + 366)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__367) ? (v_) : (v__367));\n    float v__368 = ((float*)data_1)[(cse_var_1 + 367)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__368) ? (v_) : (v__368));\n    float v__369 = ((float*)data_1)[(cse_var_1 + 368)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__369) ? (v_) : (v__369));\n    float v__370 = ((float*)data_1)[(cse_var_1 + 369)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__370) ? (v_) : (v__370));\n    float v__371 = ((float*)data_1)[(cse_var_1 + 370)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__371) ? (v_) : (v__371));\n    float v__372 = ((float*)data_1)[(cse_var_1 + 371)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__372) ? (v_) : (v__372));\n    float v__373 = ((float*)data_1)[(cse_var_1 + 372)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__373) ? (v_) : (v__373));\n    float v__374 = ((float*)data_1)[(cse_var_1 + 373)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__374) ? (v_) : (v__374));\n    float v__375 = ((float*)data_1)[(cse_var_1 + 374)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__375) ? (v_) : (v__375));\n    float v__376 = ((float*)data_1)[(cse_var_1 + 375)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__376) ? (v_) : (v__376));\n    float v__377 = ((float*)data_1)[(cse_var_1 + 376)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__377) ? (v_) : (v__377));\n    float v__378 = ((float*)data_1)[(cse_var_1 + 377)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__378) ? (v_) : (v__378));\n    float v__379 = ((float*)data_1)[(cse_var_1 + 378)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__379) ? (v_) : (v__379));\n    float v__380 = ((float*)data_1)[(cse_var_1 + 379)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__380) ? (v_) : (v__380));\n    float v__381 = ((float*)data_1)[(cse_var_1 + 380)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__381) ? (v_) : (v__381));\n    float v__382 = ((float*)data_1)[(cse_var_1 + 381)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__382) ? (v_) : (v__382));\n    float v__383 = ((float*)data_1)[(cse_var_1 + 382)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__383) ? (v_) : (v__383));\n    float v__384 = ((float*)data_1)[(cse_var_1 + 383)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__384) ? (v_) : (v__384));\n    float v__385 = ((float*)data_1)[(cse_var_1 + 384)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__385) ? (v_) : (v__385));\n    float v__386 = ((float*)data_1)[(cse_var_1 + 385)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__386) ? (v_) : (v__386));\n    float v__387 = ((float*)data_1)[(cse_var_1 + 386)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__387) ? (v_) : (v__387));\n    float v__388 = ((float*)data_1)[(cse_var_1 + 387)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__388) ? (v_) : (v__388));\n    float v__389 = ((float*)data_1)[(cse_var_1 + 388)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__389) ? (v_) : (v__389));\n    float v__390 = ((float*)data_1)[(cse_var_1 + 389)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__390) ? (v_) : (v__390));\n    float v__391 = ((float*)data_1)[(cse_var_1 + 390)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__391) ? (v_) : (v__391));\n    float v__392 = ((float*)data_1)[(cse_var_1 + 391)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__392) ? (v_) : (v__392));\n    float v__393 = ((float*)data_1)[(cse_var_1 + 392)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__393) ? (v_) : (v__393));\n    float v__394 = ((float*)data_1)[(cse_var_1 + 393)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__394) ? (v_) : (v__394));\n    float v__395 = ((float*)data_1)[(cse_var_1 + 394)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__395) ? (v_) : (v__395));\n    float v__396 = ((float*)data_1)[(cse_var_1 + 395)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__396) ? (v_) : (v__396));\n    float v__397 = ((float*)data_1)[(cse_var_1 + 396)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__397) ? (v_) : (v__397));\n    float v__398 = ((float*)data_1)[(cse_var_1 + 397)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__398) ? (v_) : (v__398));\n    float v__399 = ((float*)data_1)[(cse_var_1 + 398)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__399) ? (v_) : (v__399));\n    float v__400 = ((float*)data_1)[(cse_var_1 + 399)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__400) ? (v_) : (v__400));\n    float v__401 = ((float*)data_1)[(cse_var_1 + 400)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__401) ? (v_) : (v__401));\n    float v__402 = ((float*)data_1)[(cse_var_1 + 401)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__402) ? (v_) : (v__402));\n    float v__403 = ((float*)data_1)[(cse_var_1 + 402)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__403) ? (v_) : (v__403));\n    float v__404 = ((float*)data_1)[(cse_var_1 + 403)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__404) ? (v_) : (v__404));\n    float v__405 = ((float*)data_1)[(cse_var_1 + 404)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__405) ? (v_) : (v__405));\n    float v__406 = ((float*)data_1)[(cse_var_1 + 405)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__406) ? (v_) : (v__406));\n    float v__407 = ((float*)data_1)[(cse_var_1 + 406)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__407) ? (v_) : (v__407));\n    float v__408 = ((float*)data_1)[(cse_var_1 + 407)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__408) ? (v_) : (v__408));\n    float v__409 = ((float*)data_1)[(cse_var_1 + 408)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__409) ? (v_) : (v__409));\n    float v__410 = ((float*)data_1)[(cse_var_1 + 409)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__410) ? (v_) : (v__410));\n    float v__411 = ((float*)data_1)[(cse_var_1 + 410)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__411) ? (v_) : (v__411));\n    float v__412 = ((float*)data_1)[(cse_var_1 + 411)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__412) ? (v_) : (v__412));\n    float v__413 = ((float*)data_1)[(cse_var_1 + 412)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__413) ? (v_) : (v__413));\n    float v__414 = ((float*)data_1)[(cse_var_1 + 413)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__414) ? (v_) : (v__414));\n    float v__415 = ((float*)data_1)[(cse_var_1 + 414)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__415) ? (v_) : (v__415));\n    float v__416 = ((float*)data_1)[(cse_var_1 + 415)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__416) ? (v_) : (v__416));\n    float v__417 = ((float*)data_1)[(cse_var_1 + 416)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__417) ? (v_) : (v__417));\n    float v__418 = ((float*)data_1)[(cse_var_1 + 417)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__418) ? (v_) : (v__418));\n    float v__419 = ((float*)data_1)[(cse_var_1 + 418)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__419) ? (v_) : (v__419));\n    float v__420 = ((float*)data_1)[(cse_var_1 + 419)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__420) ? (v_) : (v__420));\n    float v__421 = ((float*)data_1)[(cse_var_1 + 420)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__421) ? (v_) : (v__421));\n    float v__422 = ((float*)data_1)[(cse_var_1 + 421)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__422) ? (v_) : (v__422));\n    float v__423 = ((float*)data_1)[(cse_var_1 + 422)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__423) ? (v_) : (v__423));\n    float v__424 = ((float*)data_1)[(cse_var_1 + 423)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__424) ? (v_) : (v__424));\n    float v__425 = ((float*)data_1)[(cse_var_1 + 424)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__425) ? (v_) : (v__425));\n    float v__426 = ((float*)data_1)[(cse_var_1 + 425)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__426) ? (v_) : (v__426));\n    float v__427 = ((float*)data_1)[(cse_var_1 + 426)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__427) ? (v_) : (v__427));\n    float v__428 = ((float*)data_1)[(cse_var_1 + 427)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__428) ? (v_) : (v__428));\n    float v__429 = ((float*)data_1)[(cse_var_1 + 428)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__429) ? (v_) : (v__429));\n    float v__430 = ((float*)data_1)[(cse_var_1 + 429)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__430) ? (v_) : (v__430));\n    float v__431 = ((float*)data_1)[(cse_var_1 + 430)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__431) ? (v_) : (v__431));\n    float v__432 = ((float*)data_1)[(cse_var_1 + 431)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__432) ? (v_) : (v__432));\n    float v__433 = ((float*)data_1)[(cse_var_1 + 432)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__433) ? (v_) : (v__433));\n    float v__434 = ((float*)data_1)[(cse_var_1 + 433)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__434) ? (v_) : (v__434));\n    float v__435 = ((float*)data_1)[(cse_var_1 + 434)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__435) ? (v_) : (v__435));\n    float v__436 = ((float*)data_1)[(cse_var_1 + 435)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__436) ? (v_) : (v__436));\n    float v__437 = ((float*)data_1)[(cse_var_1 + 436)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__437) ? (v_) : (v__437));\n    float v__438 = ((float*)data_1)[(cse_var_1 + 437)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__438) ? (v_) : (v__438));\n    float v__439 = ((float*)data_1)[(cse_var_1 + 438)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__439) ? (v_) : (v__439));\n    float v__440 = ((float*)data_1)[(cse_var_1 + 439)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__440) ? (v_) : (v__440));\n    float v__441 = ((float*)data_1)[(cse_var_1 + 440)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__441) ? (v_) : (v__441));\n    float v__442 = ((float*)data_1)[(cse_var_1 + 441)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__442) ? (v_) : (v__442));\n    float v__443 = ((float*)data_1)[(cse_var_1 + 442)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__443) ? (v_) : (v__443));\n    float v__444 = ((float*)data_1)[(cse_var_1 + 443)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__444) ? (v_) : (v__444));\n    float v__445 = ((float*)data_1)[(cse_var_1 + 444)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__445) ? (v_) : (v__445));\n    float v__446 = ((float*)data_1)[(cse_var_1 + 445)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__446) ? (v_) : (v__446));\n    float v__447 = ((float*)data_1)[(cse_var_1 + 446)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__447) ? (v_) : (v__447));\n    float v__448 = ((float*)data_1)[(cse_var_1 + 447)];\n    ((float*)adaptive_pool_max_1)[ax0_ax1_fused] = ((v_) > (v__448) ? (v_) : (v__448));\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "global_pool_max[6__28__28__16]"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((1, 74, 3, 10, 75), \"float32\"), kernel: T.Buffer((74, 1, 4, 4, 75), \"float32\"), conv3d_ndhwc: T.Buffer((1, 3, 5, 9, 75), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused in T.parallel(135):\n            conv3d_ndhwc_local = T.allocate([15], \"float32x5\", \"local\")\n            pad_temp = T.allocate([4500], \"float32\", \"global\")\n            conv3d_ndhwc_local_1 = T.Buffer((15,), \"float32x5\", data=conv3d_ndhwc_local, scope=\"local\")\n            conv3d_ndhwc_local_1[0] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[1] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[2] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[3] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[4] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[5] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[6] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[7] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[8] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[9] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[10] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[11] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[12] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[13] = T.Broadcast(T.float32(0), 5)\n            conv3d_ndhwc_local_1[14] = T.Broadcast(T.float32(0), 5)\n            for ry_outer in range(37):\n                pad_temp_1 = T.Buffer((4500,), data=pad_temp)\n                for i1, i2, i3, i4 in T.grid(2, 5, 6, 75):\n                    cse_var_6: T.int32 = nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused // 45\n                    cse_var_5: T.int32 = nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 9 // 3\n                    cse_var_4: T.int32 = i1 * 2250\n                    cse_var_3: T.int32 = i3 * 75\n                    cse_var_2: T.int32 = cse_var_6 * 3 + i3\n                    cse_var_1: T.int32 = ry_outer * 2 + cse_var_5 + i1\n                    data_1 = T.Buffer((166500,), data=data.data)\n                    pad_temp_1[cse_var_4 + i2 * 450 + cse_var_3 + i4] = T.if_then_else(1 <= cse_var_1 and cse_var_1 < 75 and 1 <= i2 and i2 < 4 and 1 <= cse_var_2 and cse_var_2 < 11, data_1[ry_outer * 4500 + cse_var_5 * 2250 + cse_var_4 + i2 * 750 + cse_var_6 * 225 + cse_var_3 + i4 - 3075], T.float32(0))\n                for rz_outer, rc_outer, xx_c_outer_inner, zz_c_outer_inner, ry_inner in T.grid(2, 15, 5, 3, 2):\n                    cse_var_10: T.int32 = xx_c_outer_inner * 3 + zz_c_outer_inner\n                    cse_var_9: T.int32 = ry_inner * 2250 + xx_c_outer_inner * 450 + rz_outer * 150 + zz_c_outer_inner * 75 + rc_outer * 5\n                    cse_var_8: T.int32 = ry_outer * 2400 + ry_inner * 1200 + rz_outer * 600 + rc_outer * 375 + nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 45 // 9 * 15 + nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 3 * 5\n                    cse_var_7: T.int32 = cse_var_8 + 300\n                    kernel_1 = T.Buffer((88800,), data=kernel.data)\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9], 5) * kernel_1[cse_var_8:cse_var_8 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 1], 5) * kernel_1[cse_var_8 + 75:cse_var_8 + 75 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 2], 5) * kernel_1[cse_var_8 + 150:cse_var_8 + 150 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 3], 5) * kernel_1[cse_var_8 + 225:cse_var_8 + 225 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 4], 5) * kernel_1[cse_var_7:cse_var_7 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 75], 5) * kernel_1[cse_var_7:cse_var_7 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 76], 5) * kernel_1[cse_var_8 + 375:cse_var_8 + 375 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 77], 5) * kernel_1[cse_var_8 + 450:cse_var_8 + 450 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 78], 5) * kernel_1[cse_var_8 + 525:cse_var_8 + 525 + 5]\n                    conv3d_ndhwc_local_1[cse_var_10] = conv3d_ndhwc_local_1[cse_var_10] + T.Broadcast(pad_temp_1[cse_var_9 + 79], 5) * kernel_1[cse_var_8 + 600:cse_var_8 + 600 + 5]\n            for xx_inner, zz_inner in T.grid(5, 3):\n                conv3d_ndhwc_1 = T.Buffer((10125,), data=conv3d_ndhwc.data)\n                conv3d_ndhwc_1[nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 9 // 3 * 3375 + xx_inner * 675 + nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused // 45 * 225 + zz_inner * 75 + nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 45 // 9 * 15 + nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 3 * 5:nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 9 // 3 * 3375 + xx_inner * 675 + nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused // 45 * 225 + zz_inner * 75 + nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 45 // 9 * 15 + nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 3 * 5 + 5] = conv3d_ndhwc_local_1[xx_inner * 3 + zz_inner]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(75) default_function_kernel(float* __restrict__ conv3d_ndhwc, float* __restrict__ data, float* __restrict__ kernel);\nextern \"C\" __global__ void __launch_bounds__(75) default_function_kernel(float* __restrict__ conv3d_ndhwc, float* __restrict__ data, float* __restrict__ kernel) {\n  float conv3d_ndhwc_local[5];\n  __shared__ float pad_temp_shared[1520];\n  __shared__ float kernel_shared[7400];\n  for (int xx_c_inner_init = 0; xx_c_inner_init < 5; ++xx_c_inner_init) {\n    conv3d_ndhwc_local[xx_c_inner_init] = 0.000000e+00f;\n  }\n  for (int rc_outer_outer = 0; rc_outer_outer < 75; ++rc_outer_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer < 21; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer) {\n      if (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 15) + (((int)threadIdx.x) / 5)) < 304) {\n        pad_temp_shared[((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 75) + ((int)threadIdx.x))] = (((((((4 <= ((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 15) + (((int)threadIdx.x) / 5))) && (ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer < 20)) && (4 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 15) + ((int)threadIdx.x)) % 20))) && ((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 15) + ((int)threadIdx.x)) % 20) < 16)) && (1 <= ((((int)blockIdx.x) / 3) + (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 3) + ((int)threadIdx.x)) & 3)))) && (((((int)blockIdx.x) / 3) + (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 3) + ((int)threadIdx.x)) & 3)) < 11)) ? data[(((((((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 15) + (((int)threadIdx.x) / 5)) >> 2) * 2250) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 15) + ((int)threadIdx.x)) % 20) >> 2) * 750)) + ((((int)blockIdx.x) / 3) * 75)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer * 3) + ((int)threadIdx.x)) & 3) * 75)) + rc_outer_outer) - 3075)] : 0.000000e+00f);\n      }\n    }\n    for (int ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer_1 < 99; ++ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer_1) {\n      if (((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer_1 * 3) + (((int)threadIdx.x) / 25)) < 296) {\n        if (rc_outer_outer < 4) {\n          kernel_shared[((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer_1 * 75) + ((int)threadIdx.x))] = kernel[(((((ax0_ax1_fused_ax2_fused_ax3_fused_ax4_fused_outer_outer_1 * 900) + ((((int)threadIdx.x) / 25) * 300)) + (rc_outer_outer * 75)) + ((((int)blockIdx.x) % 3) * 25)) + (((int)threadIdx.x) % 25))];\n        }\n      }\n    }\n    __syncthreads();\n    for (int ry_outer_inner = 0; ry_outer_inner < 2; ++ry_outer_inner) {\n      for (int rz_outer_inner = 0; rz_outer_inner < 2; ++rz_outer_inner) {\n        for (int ry_inner = 0; ry_inner < 37; ++ry_inner) {\n          for (int rz_inner = 0; rz_inner < 2; ++rz_inner) {\n            for (int xx_c_inner = 0; xx_c_inner < 5; ++xx_c_inner) {\n              conv3d_ndhwc_local[xx_c_inner] = (conv3d_ndhwc_local[xx_c_inner] + (pad_temp_shared[((((((ry_outer_inner * 740) + ((((int)threadIdx.x) / 25) * 20)) + (ry_inner * 20)) + (xx_c_inner * 4)) + (rz_outer_inner * 2)) + rz_inner)] * kernel_shared[(((((ry_outer_inner * 3700) + (ry_inner * 100)) + (rz_outer_inner * 50)) + (rz_inner * 25)) + (((int)threadIdx.x) % 25))]));\n            }\n          }\n        }\n      }\n    }\n  }\n  for (int xx_inner = 0; xx_inner < 5; ++xx_inner) {\n    conv3d_ndhwc[(((((((int)threadIdx.x) / 25) * 3375) + (xx_inner * 675)) + (((int)blockIdx.x) * 25)) + (((int)threadIdx.x) % 25))] = conv3d_ndhwc_local[xx_inner];\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t kernel_code = arg_type_ids[1];\n  int32_t conv3d_ndhwc_code = arg_type_ids[2];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* kernel = (((TVMValue*)args)[1].v_handle);\n  void* conv3d_ndhwc = (((TVMValue*)args)[2].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* kernel_1 = (((DLTensor*)kernel)[0].data);\n  void* default_function_kernel_shape = (((DLTensor*)kernel)[0].shape);\n  void* default_function_kernel_strides = (((DLTensor*)kernel)[0].strides);\n  void* conv3d_ndhwc_1 = (((DLTensor*)conv3d_ndhwc)[0].data);\n  void* default_function_conv3d_ndhwc_shape = (((DLTensor*)conv3d_ndhwc)[0].shape);\n  void* default_function_conv3d_ndhwc_strides = (((DLTensor*)conv3d_ndhwc)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_kernel_strides == NULL)) {\n  }\n  if (!(default_function_conv3d_ndhwc_strides == NULL)) {\n  }\n  for (int32_t nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused = 0; nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused < 135; ++nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused) {\n    void* conv3d_ndhwc_local = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)300, 2, 32);\n    if (conv3d_ndhwc_local == NULL) {\n      return -1;\n    }\n    void* pad_temp = TVMBackendAllocWorkspace(1, dev_id, (uint64_t)18000, 2, 32);\n    if (pad_temp == NULL) {\n      return -1;\n    }\n    ((float5*)conv3d_ndhwc_local)[0] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[1] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[2] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[3] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[4] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[5] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[6] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[7] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[8] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[9] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[10] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[11] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[12] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[13] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    ((float5*)conv3d_ndhwc_local)[14] = ((float5)(0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f, 0.000000e+00f));\n    for (int32_t ry_outer = 0; ry_outer < 37; ++ry_outer) {\n      for (int32_t i1 = 0; i1 < 2; ++i1) {\n        for (int32_t i2 = 0; i2 < 5; ++i2) {\n          for (int32_t i3 = 0; i3 < 6; ++i3) {\n            for (int32_t i4 = 0; i4 < 75; ++i4) {\n              int32_t cse_var_6 = (nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused / 45);\n              int32_t cse_var_5 = ((nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 9) / 3);\n              int32_t cse_var_4 = (i1 * 2250);\n              int32_t cse_var_3 = (i3 * 75);\n              int32_t cse_var_2 = ((cse_var_6 * 3) + i3);\n              int32_t cse_var_1 = (((ry_outer * 2) + cse_var_5) + i1);\n              ((float*)pad_temp)[(((cse_var_4 + (i2 * 450)) + cse_var_3) + i4)] = (((((((1 <= cse_var_1) && (cse_var_1 < 75)) && (1 <= i2)) && (i2 < 4)) && (1 <= cse_var_2)) && (cse_var_2 < 11)) ? ((float*)data_1)[((((((((ry_outer * 4500) + (cse_var_5 * 2250)) + cse_var_4) + (i2 * 750)) + (cse_var_6 * 225)) + cse_var_3) + i4) - 3075)] : 0.000000e+00f);\n            }\n          }\n        }\n      }\n      for (int32_t rz_outer = 0; rz_outer < 2; ++rz_outer) {\n        for (int32_t rc_outer = 0; rc_outer < 15; ++rc_outer) {\n          for (int32_t xx_c_outer_inner = 0; xx_c_outer_inner < 5; ++xx_c_outer_inner) {\n            for (int32_t zz_c_outer_inner = 0; zz_c_outer_inner < 3; ++zz_c_outer_inner) {\n              for (int32_t ry_inner = 0; ry_inner < 2; ++ry_inner) {\n                int32_t cse_var_10 = ((xx_c_outer_inner * 3) + zz_c_outer_inner);\n                int32_t cse_var_9 = (((((ry_inner * 2250) + (xx_c_outer_inner * 450)) + (rz_outer * 150)) + (zz_c_outer_inner * 75)) + (rc_outer * 5));\n                int32_t cse_var_8 = ((((((ry_outer * 2400) + (ry_inner * 1200)) + (rz_outer * 600)) + (rc_outer * 375)) + (((nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 45) / 9) * 15)) + ((nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 3) * 5));\n                int32_t cse_var_7 = (cse_var_8 + 300);\n                int32_t5 v_ = int32_t5((cse_var_8)+(1*0), (cse_var_8)+(1*1), (cse_var_8)+(1*2), (cse_var_8)+(1*3), (cse_var_8)+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[cse_var_9], ((float*)pad_temp)[cse_var_9], ((float*)pad_temp)[cse_var_9], ((float*)pad_temp)[cse_var_9], ((float*)pad_temp)[cse_var_9])) * (float5(((float*)kernel_1)[v_.s0],((float*)kernel_1)[v_.s1],((float*)kernel_1)[v_.s2],((float*)kernel_1)[v_.s3],((float*)kernel_1)[v_.s4]))));\n                int32_t5 v__1 = int32_t5(((cse_var_8 + 75))+(1*0), ((cse_var_8 + 75))+(1*1), ((cse_var_8 + 75))+(1*2), ((cse_var_8 + 75))+(1*3), ((cse_var_8 + 75))+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 1)], ((float*)pad_temp)[(cse_var_9 + 1)], ((float*)pad_temp)[(cse_var_9 + 1)], ((float*)pad_temp)[(cse_var_9 + 1)], ((float*)pad_temp)[(cse_var_9 + 1)])) * (float5(((float*)kernel_1)[v__1.s0],((float*)kernel_1)[v__1.s1],((float*)kernel_1)[v__1.s2],((float*)kernel_1)[v__1.s3],((float*)kernel_1)[v__1.s4]))));\n                int32_t5 v__2 = int32_t5(((cse_var_8 + 150))+(1*0), ((cse_var_8 + 150))+(1*1), ((cse_var_8 + 150))+(1*2), ((cse_var_8 + 150))+(1*3), ((cse_var_8 + 150))+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 2)], ((float*)pad_temp)[(cse_var_9 + 2)], ((float*)pad_temp)[(cse_var_9 + 2)], ((float*)pad_temp)[(cse_var_9 + 2)], ((float*)pad_temp)[(cse_var_9 + 2)])) * (float5(((float*)kernel_1)[v__2.s0],((float*)kernel_1)[v__2.s1],((float*)kernel_1)[v__2.s2],((float*)kernel_1)[v__2.s3],((float*)kernel_1)[v__2.s4]))));\n                int32_t5 v__3 = int32_t5(((cse_var_8 + 225))+(1*0), ((cse_var_8 + 225))+(1*1), ((cse_var_8 + 225))+(1*2), ((cse_var_8 + 225))+(1*3), ((cse_var_8 + 225))+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 3)], ((float*)pad_temp)[(cse_var_9 + 3)], ((float*)pad_temp)[(cse_var_9 + 3)], ((float*)pad_temp)[(cse_var_9 + 3)], ((float*)pad_temp)[(cse_var_9 + 3)])) * (float5(((float*)kernel_1)[v__3.s0],((float*)kernel_1)[v__3.s1],((float*)kernel_1)[v__3.s2],((float*)kernel_1)[v__3.s3],((float*)kernel_1)[v__3.s4]))));\n                int32_t5 v__4 = int32_t5((cse_var_7)+(1*0), (cse_var_7)+(1*1), (cse_var_7)+(1*2), (cse_var_7)+(1*3), (cse_var_7)+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 4)], ((float*)pad_temp)[(cse_var_9 + 4)], ((float*)pad_temp)[(cse_var_9 + 4)], ((float*)pad_temp)[(cse_var_9 + 4)], ((float*)pad_temp)[(cse_var_9 + 4)])) * (float5(((float*)kernel_1)[v__4.s0],((float*)kernel_1)[v__4.s1],((float*)kernel_1)[v__4.s2],((float*)kernel_1)[v__4.s3],((float*)kernel_1)[v__4.s4]))));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 75)], ((float*)pad_temp)[(cse_var_9 + 75)], ((float*)pad_temp)[(cse_var_9 + 75)], ((float*)pad_temp)[(cse_var_9 + 75)], ((float*)pad_temp)[(cse_var_9 + 75)])) * (float5(((float*)kernel_1)[v__4.s0],((float*)kernel_1)[v__4.s1],((float*)kernel_1)[v__4.s2],((float*)kernel_1)[v__4.s3],((float*)kernel_1)[v__4.s4]))));\n                int32_t5 v__5 = int32_t5(((cse_var_8 + 375))+(1*0), ((cse_var_8 + 375))+(1*1), ((cse_var_8 + 375))+(1*2), ((cse_var_8 + 375))+(1*3), ((cse_var_8 + 375))+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 76)], ((float*)pad_temp)[(cse_var_9 + 76)], ((float*)pad_temp)[(cse_var_9 + 76)], ((float*)pad_temp)[(cse_var_9 + 76)], ((float*)pad_temp)[(cse_var_9 + 76)])) * (float5(((float*)kernel_1)[v__5.s0],((float*)kernel_1)[v__5.s1],((float*)kernel_1)[v__5.s2],((float*)kernel_1)[v__5.s3],((float*)kernel_1)[v__5.s4]))));\n                int32_t5 v__6 = int32_t5(((cse_var_8 + 450))+(1*0), ((cse_var_8 + 450))+(1*1), ((cse_var_8 + 450))+(1*2), ((cse_var_8 + 450))+(1*3), ((cse_var_8 + 450))+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 77)], ((float*)pad_temp)[(cse_var_9 + 77)], ((float*)pad_temp)[(cse_var_9 + 77)], ((float*)pad_temp)[(cse_var_9 + 77)], ((float*)pad_temp)[(cse_var_9 + 77)])) * (float5(((float*)kernel_1)[v__6.s0],((float*)kernel_1)[v__6.s1],((float*)kernel_1)[v__6.s2],((float*)kernel_1)[v__6.s3],((float*)kernel_1)[v__6.s4]))));\n                int32_t5 v__7 = int32_t5(((cse_var_8 + 525))+(1*0), ((cse_var_8 + 525))+(1*1), ((cse_var_8 + 525))+(1*2), ((cse_var_8 + 525))+(1*3), ((cse_var_8 + 525))+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 78)], ((float*)pad_temp)[(cse_var_9 + 78)], ((float*)pad_temp)[(cse_var_9 + 78)], ((float*)pad_temp)[(cse_var_9 + 78)], ((float*)pad_temp)[(cse_var_9 + 78)])) * (float5(((float*)kernel_1)[v__7.s0],((float*)kernel_1)[v__7.s1],((float*)kernel_1)[v__7.s2],((float*)kernel_1)[v__7.s3],((float*)kernel_1)[v__7.s4]))));\n                int32_t5 v__8 = int32_t5(((cse_var_8 + 600))+(1*0), ((cse_var_8 + 600))+(1*1), ((cse_var_8 + 600))+(1*2), ((cse_var_8 + 600))+(1*3), ((cse_var_8 + 600))+(1*4));\n                ((float5*)conv3d_ndhwc_local)[cse_var_10] = (((float5*)conv3d_ndhwc_local)[cse_var_10] + (((float5)(((float*)pad_temp)[(cse_var_9 + 79)], ((float*)pad_temp)[(cse_var_9 + 79)], ((float*)pad_temp)[(cse_var_9 + 79)], ((float*)pad_temp)[(cse_var_9 + 79)], ((float*)pad_temp)[(cse_var_9 + 79)])) * (float5(((float*)kernel_1)[v__8.s0],((float*)kernel_1)[v__8.s1],((float*)kernel_1)[v__8.s2],((float*)kernel_1)[v__8.s3],((float*)kernel_1)[v__8.s4]))));\n              }\n            }\n          }\n        }\n      }\n    }\n    for (int32_t xx_inner = 0; xx_inner < 5; ++xx_inner) {\n      for (int32_t zz_inner = 0; zz_inner < 3; ++zz_inner) {\n        *(float5*)(((float*)conv3d_ndhwc_1) + ((((((((nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 9) / 3) * 3375) + (xx_inner * 675)) + ((nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused / 45) * 225)) + (zz_inner * 75)) + (((nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 45) / 9) * 15)) + ((nn_outer_outer_yy_outer_outer_fused_xx_outer_outer_fused_zz_outer_outer_fused_ff_outer_outer_fused_nn_outer_inner_fused_yy_outer_inner_fused_xx_outer_inner_fused_zz_outer_inner_fused_ff_outer_inner_fused % 3) * 5))) = ((float5*)conv3d_ndhwc_local)[((xx_inner * 3) + zz_inner)];\n      }\n    }\n    if (TVMBackendFreeWorkspace(1, dev_id, pad_temp) != 0) {\n      return -1;\n    }\n    if (TVMBackendFreeWorkspace(1, dev_id, conv3d_ndhwc_local) != 0) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "conv3d_ndhwc[1__3__10__74__75__4__4__(2__3)__(1__1)]"
  },
  {
    "instruction": "Given a CUDA operator, convert it to an equivalent CPU operator. Please ensure both performance and correctness, and maximize the execution efficiency on the CPU as much as possible.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((7, 40, 28, 24), \"float32\"), depth_to_space: T.Buffer((7, 10, 56, 48), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(70):\n            for i2, i3 in T.grid(56, 48):\n                depth_to_space_1 = T.Buffer((188160,), data=depth_to_space.data)\n                data_1 = T.Buffer((188160,), data=data.data)\n                depth_to_space_1[i0_i1_fused * 2688 + i2 * 48 + i3] = data_1[i0_i1_fused // 10 * 26880 + T.truncmod(i2, 2) * 13440 + T.truncmod(i3, 2) * 6720 + i0_i1_fused % 10 * 672 + T.Div(i2, 2) * 24 + T.Div(i3, 2)]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ data, float* __restrict__ depth_to_space);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ data, float* __restrict__ depth_to_space) {\n  depth_to_space[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = data[(((((((((int)blockIdx.x) / 420) * 26880) + ((((((((int)blockIdx.x) % 42) * 4) + (((int)threadIdx.x) >> 4)) / 3) % 2) * 13440)) + (((((((int)blockIdx.x) * 16) + ((int)threadIdx.x)) % 48) % 2) * 6720)) + (((((int)blockIdx.x) % 420) / 42) * 672)) + ((((((((int)blockIdx.x) % 42) * 4) + (((int)threadIdx.x) >> 4)) / 3) / 2) * 24)) + ((((((int)blockIdx.x) * 16) + ((int)threadIdx.x)) % 48) / 2))];\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t depth_to_space_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* depth_to_space = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* depth_to_space_1 = (((DLTensor*)depth_to_space)[0].data);\n  void* default_function_depth_to_space_shape = (((DLTensor*)depth_to_space)[0].shape);\n  void* default_function_depth_to_space_strides = (((DLTensor*)depth_to_space)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_depth_to_space_strides == NULL)) {\n  }\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 70; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 56; ++i2) {\n      for (int32_t i3 = 0; i3 < 48; ++i3) {\n        ((float*)depth_to_space_1)[(((i0_i1_fused * 2688) + (i2 * 48)) + i3)] = ((float*)data_1)[(((((((i0_i1_fused / 10) * 26880) + ((i2 % 2) * 13440)) + ((i3 % 2) * 6720)) + ((i0_i1_fused % 10) * 672)) + ((i2 / 2) * 24)) + (i3 / 2))];\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "depth_to_space[7__40__28__24]"
  },
  {
    "instruction": "Given a performance-sensitive application that includes CUDA operators, you want to run in an environment without a GPU. Please convert the CUDA operators provided to an efficient CPU implementation with as little performance penalty as possible.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((7, 8, 28, 12), \"float32\"), T_divide: T.Buffer((7, 8, 28, 12), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(56):\n            tensor = T.allocate([12], \"float32\", \"global\")\n            for ax2 in range(28):\n                cse_var_12: T.int32 = ax0_ax1_fused * 336 + ax2 * 12\n                cse_var_11: T.int32 = cse_var_12 + 9\n                cse_var_10: T.int32 = cse_var_12 + 8\n                cse_var_9: T.int32 = cse_var_12 + 7\n                cse_var_8: T.int32 = cse_var_12 + 6\n                cse_var_7: T.int32 = cse_var_12 + 5\n                cse_var_6: T.int32 = cse_var_12 + 4\n                cse_var_5: T.int32 = cse_var_12 + 3\n                cse_var_4: T.int32 = cse_var_12 + 2\n                cse_var_3: T.int32 = cse_var_12 + 11\n                cse_var_2: T.int32 = cse_var_12 + 10\n                cse_var_1: T.int32 = cse_var_12 + 1\n                tensor_1 = T.Buffer((12,), data=tensor, align=32)\n                tensor_1[0] = T.float32(0)\n                data_1 = T.Buffer((18816,), data=data.data)\n                tensor_1[0] = tensor_1[0] + data_1[cse_var_12] * data_1[cse_var_12]\n                tensor_1[1] = T.float32(0)\n                tensor_1[1] = tensor_1[1] + data_1[cse_var_1] * data_1[cse_var_1]\n                tensor_1[2] = T.float32(0)\n                tensor_1[2] = tensor_1[2] + data_1[cse_var_4] * data_1[cse_var_4]\n                tensor_1[3] = T.float32(0)\n                tensor_1[3] = tensor_1[3] + data_1[cse_var_5] * data_1[cse_var_5]\n                tensor_1[4] = T.float32(0)\n                tensor_1[4] = tensor_1[4] + data_1[cse_var_6] * data_1[cse_var_6]\n                tensor_1[5] = T.float32(0)\n                tensor_1[5] = tensor_1[5] + data_1[cse_var_7] * data_1[cse_var_7]\n                tensor_1[6] = T.float32(0)\n                tensor_1[6] = tensor_1[6] + data_1[cse_var_8] * data_1[cse_var_8]\n                tensor_1[7] = T.float32(0)\n                tensor_1[7] = tensor_1[7] + data_1[cse_var_9] * data_1[cse_var_9]\n                tensor_1[8] = T.float32(0)\n                tensor_1[8] = tensor_1[8] + data_1[cse_var_10] * data_1[cse_var_10]\n                tensor_1[9] = T.float32(0)\n                tensor_1[9] = tensor_1[9] + data_1[cse_var_11] * data_1[cse_var_11]\n                tensor_1[10] = T.float32(0)\n                tensor_1[10] = tensor_1[10] + data_1[cse_var_2] * data_1[cse_var_2]\n                tensor_1[11] = T.float32(0)\n                tensor_1[11] = tensor_1[11] + data_1[cse_var_3] * data_1[cse_var_3]\n                for ax3 in range(12):\n                    cse_var_13: T.int32 = cse_var_12 + ax3\n                    T_divide_1 = T.Buffer((18816,), data=T_divide.data)\n                    T_divide_1[cse_var_13] = data_1[cse_var_13] / T.pow(T.float32(2) + T.float32(9.9999997473787516e-05) * tensor_1[ax3], T.float32(0.75))\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ T_divide, float* __restrict__ data, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ data, float* __restrict__ tensor);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ T_divide, float* __restrict__ data, float* __restrict__ tensor) {\n  T_divide[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (data[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] / powf((2.000000e+00f + (1.000000e-04f * tensor[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))])), 7.500000e-01f));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ data, float* __restrict__ tensor) {\n  tensor[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = 0.000000e+00f;\n  tensor[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = (tensor[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] + (data[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] * data[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL float powf(float, float);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t T_divide_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* T_divide = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* T_divide_1 = (((DLTensor*)T_divide)[0].data);\n  void* default_function_T_divide_shape = (((DLTensor*)T_divide)[0].shape);\n  void* default_function_T_divide_strides = (((DLTensor*)T_divide)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_T_divide_strides == NULL)) {\n  }\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 56; ++ax0_ax1_fused) {\n    float tensor[12];\n    for (int32_t ax2 = 0; ax2 < 28; ++ax2) {\n      int32_t cse_var_12 = ((ax0_ax1_fused * 336) + (ax2 * 12));\n      int32_t cse_var_11 = (cse_var_12 + 9);\n      int32_t cse_var_10 = (cse_var_12 + 8);\n      int32_t cse_var_9 = (cse_var_12 + 7);\n      int32_t cse_var_8 = (cse_var_12 + 6);\n      int32_t cse_var_7 = (cse_var_12 + 5);\n      int32_t cse_var_6 = (cse_var_12 + 4);\n      int32_t cse_var_5 = (cse_var_12 + 3);\n      int32_t cse_var_4 = (cse_var_12 + 2);\n      int32_t cse_var_3 = (cse_var_12 + 11);\n      int32_t cse_var_2 = (cse_var_12 + 10);\n      int32_t cse_var_1 = (cse_var_12 + 1);\n      tensor[0] = 0.000000e+00f;\n      tensor[0] = (tensor[0] + (((float*)data_1)[cse_var_12] * ((float*)data_1)[cse_var_12]));\n      tensor[1] = 0.000000e+00f;\n      tensor[1] = (tensor[1] + (((float*)data_1)[cse_var_1] * ((float*)data_1)[cse_var_1]));\n      tensor[2] = 0.000000e+00f;\n      tensor[2] = (tensor[2] + (((float*)data_1)[cse_var_4] * ((float*)data_1)[cse_var_4]));\n      tensor[3] = 0.000000e+00f;\n      tensor[3] = (tensor[3] + (((float*)data_1)[cse_var_5] * ((float*)data_1)[cse_var_5]));\n      tensor[4] = 0.000000e+00f;\n      tensor[4] = (tensor[4] + (((float*)data_1)[cse_var_6] * ((float*)data_1)[cse_var_6]));\n      tensor[5] = 0.000000e+00f;\n      tensor[5] = (tensor[5] + (((float*)data_1)[cse_var_7] * ((float*)data_1)[cse_var_7]));\n      tensor[6] = 0.000000e+00f;\n      tensor[6] = (tensor[6] + (((float*)data_1)[cse_var_8] * ((float*)data_1)[cse_var_8]));\n      tensor[7] = 0.000000e+00f;\n      tensor[7] = (tensor[7] + (((float*)data_1)[cse_var_9] * ((float*)data_1)[cse_var_9]));\n      tensor[8] = 0.000000e+00f;\n      tensor[8] = (tensor[8] + (((float*)data_1)[cse_var_10] * ((float*)data_1)[cse_var_10]));\n      tensor[9] = 0.000000e+00f;\n      tensor[9] = (tensor[9] + (((float*)data_1)[cse_var_11] * ((float*)data_1)[cse_var_11]));\n      tensor[10] = 0.000000e+00f;\n      tensor[10] = (tensor[10] + (((float*)data_1)[cse_var_2] * ((float*)data_1)[cse_var_2]));\n      tensor[11] = 0.000000e+00f;\n      tensor[11] = (tensor[11] + (((float*)data_1)[cse_var_3] * ((float*)data_1)[cse_var_3]));\n      for (int32_t ax3 = 0; ax3 < 12; ++ax3) {\n        int32_t cse_var_13 = (cse_var_12 + ax3);\n        ((float*)T_divide_1)[cse_var_13] = (((float*)data_1)[cse_var_13] / powf((2.000000e+00f + (1.000000e-04f * tensor[ax3])), 7.500000e-01f));\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "lrn[7__8__28__12]"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((10, 20, 4, 40), \"float32\"), adaptive_pool_avg: T.Buffer((10, 20, 8, 8), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(200):\n            adaptive_pool_sum = T.allocate([8], \"float32\", \"global\")\n            for ax2 in range(8):\n                cse_var_1: T.int32 = (ax2 + 1) // 2\n                adaptive_pool_sum_1 = T.Buffer((8,), data=adaptive_pool_sum, align=32)\n                for ax3 in range(8):\n                    adaptive_pool_sum_1[ax3] = T.float32(0)\n                    for rv0 in range(T.Select((ax2 * 4 + 4) % 8 == 0, cse_var_1, cse_var_1 + 1) - ax2 // 2):\n                        cse_var_2: T.int32 = ax0_ax1_fused * 160 + ax2 // 2 * 40 + rv0 * 40 + ax3 * 5\n                        data_1 = T.Buffer((32000,), data=data.data)\n                        adaptive_pool_sum_1[ax3] = adaptive_pool_sum_1[ax3] + data_1[cse_var_2]\n                        adaptive_pool_sum_1[ax3] = adaptive_pool_sum_1[ax3] + data_1[cse_var_2 + 1]\n                        adaptive_pool_sum_1[ax3] = adaptive_pool_sum_1[ax3] + data_1[cse_var_2 + 2]\n                        adaptive_pool_sum_1[ax3] = adaptive_pool_sum_1[ax3] + data_1[cse_var_2 + 3]\n                        adaptive_pool_sum_1[ax3] = adaptive_pool_sum_1[ax3] + data_1[cse_var_2 + 4]\n                adaptive_pool_avg_1 = T.Buffer((12800,), data=adaptive_pool_avg.data)\n                adaptive_pool_avg_1[ax0_ax1_fused * 64 + ax2 * 8:ax0_ax1_fused * 64 + ax2 * 8 + 8] = adaptive_pool_sum_1[0:8] / T.Broadcast(T.Cast(\"float32\", T.Select((ax2 * 4 + 4) % 8 == 0, cse_var_1, cse_var_1 + 1) - ax2 // 2) * T.float32(5), 8)\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ adaptive_pool_avg, float* __restrict__ adaptive_pool_sum);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ adaptive_pool_sum, float* __restrict__ data);\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ adaptive_pool_avg, float* __restrict__ adaptive_pool_sum) {\n  adaptive_pool_avg[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (adaptive_pool_sum[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] / (((float)(((((((((int)threadIdx.x) >> 3) * 4) + 4) % 8) == 0) ? ((((int)threadIdx.x) + 8) >> 4) : (((((int)threadIdx.x) + 8) >> 4) + 1)) - (((int)threadIdx.x) >> 4))) * 5.000000e+00f));\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ adaptive_pool_sum, float* __restrict__ data) {\n  adaptive_pool_sum[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = 0.000000e+00f;\n  for (int rv0 = 0; rv0 < (((((((((int)threadIdx.x) >> 3) * 4) + 4) % 8) == 0) ? ((((int)threadIdx.x) + 8) >> 4) : (((((int)threadIdx.x) + 8) >> 4) + 1)) - (((int)threadIdx.x) >> 4)); ++rv0) {\n    for (int rv1 = 0; rv1 < 5; ++rv1) {\n      adaptive_pool_sum[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (adaptive_pool_sum[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] + data[(((((((int)blockIdx.x) * 160) + ((((int)threadIdx.x) >> 4) * 40)) + (rv0 * 40)) + ((((int)threadIdx.x) & 7) * 5)) + rv1)]);\n    }\n  }\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t adaptive_pool_avg_code = arg_type_ids[1];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* adaptive_pool_avg = (((TVMValue*)args)[1].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* adaptive_pool_avg_1 = (((DLTensor*)adaptive_pool_avg)[0].data);\n  void* default_function_adaptive_pool_avg_shape = (((DLTensor*)adaptive_pool_avg)[0].shape);\n  void* default_function_adaptive_pool_avg_strides = (((DLTensor*)adaptive_pool_avg)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_adaptive_pool_avg_strides == NULL)) {\n  }\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 200; ++ax0_ax1_fused) {\n    float adaptive_pool_sum[8];\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      int32_t cse_var_1 = ((ax2 + 1) >> 1);\n      for (int32_t ax3 = 0; ax3 < 8; ++ax3) {\n        adaptive_pool_sum[ax3] = 0.000000e+00f;\n        for (int32_t rv0 = 0; rv0 < ((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1)); ++rv0) {\n          int32_t cse_var_2 = ((((ax0_ax1_fused * 160) + ((ax2 >> 1) * 40)) + (rv0 * 40)) + (ax3 * 5));\n          adaptive_pool_sum[ax3] = (adaptive_pool_sum[ax3] + ((float*)data_1)[cse_var_2]);\n          adaptive_pool_sum[ax3] = (adaptive_pool_sum[ax3] + ((float*)data_1)[(cse_var_2 + 1)]);\n          adaptive_pool_sum[ax3] = (adaptive_pool_sum[ax3] + ((float*)data_1)[(cse_var_2 + 2)]);\n          adaptive_pool_sum[ax3] = (adaptive_pool_sum[ax3] + ((float*)data_1)[(cse_var_2 + 3)]);\n          adaptive_pool_sum[ax3] = (adaptive_pool_sum[ax3] + ((float*)data_1)[(cse_var_2 + 4)]);\n        }\n      }\n      *(float8*)(((float*)adaptive_pool_avg_1) + ((ax0_ax1_fused * 64) + (ax2 * 8))) = (*(float8*)(adaptive_pool_sum + 0) / ((float8)((((float)((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1))) * 5.000000e+00f), (((float)((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1))) * 5.000000e+00f), (((float)((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1))) * 5.000000e+00f), (((float)((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1))) * 5.000000e+00f), (((float)((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1))) * 5.000000e+00f), (((float)((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1))) * 5.000000e+00f), (((float)((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1))) * 5.000000e+00f), (((float)((((((ax2 * 4) + 4) % 8) == 0) ? cse_var_1 : (cse_var_1 + 1)) - (ax2 >> 1))) * 5.000000e+00f))));\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "adaptive_pool_avg[10__20__4__40]"
  },
  {
    "instruction": "Your deep learning application is trained in an environment with GPU support, but now you need to perform inference in an environment without GPUs. Please convert CUDA operators to CPU operators and optimize for performance to achieve the best execution efficiency on the CPU.IR information corresponding to the CUDA code will also be provided.",
    "input": "### IR Code:\n\n# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(data: T.Buffer((3, 12, 4, 8), \"float32\"), buffer: T.Buffer((3, 12, 4, 8), \"float32\"), new_buffer: T.Buffer((3, 12, 4, 8), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i in T.parallel(3):\n            for j, k, l in T.grid(12, 4, 8):\n                cse_var_1: T.int32 = i * 384 + j * 32 + k * 8 + l\n                new_buffer_1 = T.Buffer((1152,), data=new_buffer.data)\n                data_1 = T.Buffer((1152,), data=data.data)\n                new_buffer_1[cse_var_1] = data_1[cse_var_1]\n\n### CUDA Code:\n\n#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \\\n     (__CUDACC_VER_MAJOR__ > 11))\n#define TVM_ENABLE_L2_PREFETCH 1\n#else\n#define TVM_ENABLE_L2_PREFETCH 0\n#endif\n\n#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ data, float* __restrict__ new_buffer);\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel(float* __restrict__ data, float* __restrict__ new_buffer) {\n  new_buffer[((((int)blockIdx.x) * 18) + ((int)threadIdx.x))] = data[((((int)blockIdx.x) * 18) + ((int)threadIdx.x))];\n}\n\n\n\n",
    "output": "// tvm target: c -keys=cpu \n#define TVM_EXPORTS\n#include \"tvm/runtime/c_runtime_api.h\"\n#include \"tvm/runtime/c_backend_api.h\"\n#include <math.h>\n#include <stdbool.h>\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle);\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t default_function(void* args, int32_t* arg_type_ids, int32_t num_args, void* out_ret_value, int32_t* out_ret_tcode, void* resource_handle) {\n  int32_t data_code = arg_type_ids[0];\n  int32_t buffer_code = arg_type_ids[1];\n  int32_t new_buffer_code = arg_type_ids[2];\n  void* data = (((TVMValue*)args)[0].v_handle);\n  void* buffer = (((TVMValue*)args)[1].v_handle);\n  void* new_buffer = (((TVMValue*)args)[2].v_handle);\n  void* data_1 = (((DLTensor*)data)[0].data);\n  void* default_function_data_shape = (((DLTensor*)data)[0].shape);\n  void* default_function_data_strides = (((DLTensor*)data)[0].strides);\n  int32_t dev_id = (((DLTensor*)data)[0].device.device_id);\n  void* buffer_1 = (((DLTensor*)buffer)[0].data);\n  void* default_function_buffer_shape = (((DLTensor*)buffer)[0].shape);\n  void* default_function_buffer_strides = (((DLTensor*)buffer)[0].strides);\n  void* new_buffer_1 = (((DLTensor*)new_buffer)[0].data);\n  void* default_function_new_buffer_shape = (((DLTensor*)new_buffer)[0].shape);\n  void* default_function_new_buffer_strides = (((DLTensor*)new_buffer)[0].strides);\n  if (!(default_function_data_strides == NULL)) {\n  }\n  if (!(default_function_buffer_strides == NULL)) {\n  }\n  if (!(default_function_new_buffer_strides == NULL)) {\n  }\n  for (int32_t i = 0; i < 3; ++i) {\n    for (int32_t j = 0; j < 12; ++j) {\n      for (int32_t k = 0; k < 4; ++k) {\n        for (int32_t l = 0; l < 8; ++l) {\n          int32_t cse_var_1 = ((((i * 384) + (j * 32)) + (k * 8)) + l);\n          ((float*)new_buffer_1)[cse_var_1] = ((float*)data_1)[cse_var_1];\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n// CodegenC: NOTE: Auto-generated entry function\n#ifdef __cplusplus\nextern \"C\"\n#endif\nTVM_DLL int32_t __tvm_main__(void* args, int* arg_type_ids, int num_args, void* out_ret_value, int* out_ret_tcode, void* resource_handle) {\n  return default_function(args, arg_type_ids, num_args, out_ret_value, out_ret_tcode, resource_handle);\n}\n",
    "op_name": "fifo_buffer[3__12__4__8]"
  }
]