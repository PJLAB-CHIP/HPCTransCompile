[
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 18; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 9; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 2; ++i2) {\n      compute_1[((i0_i1_fused * 2) + i2)] = expf(asinhf(ph_0[((i0_i1_fused * 2) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 18; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = ceilf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 18; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = ceilf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = ceilf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = ceilf(ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fabsf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = __expf(asinhf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((1, 9, 2), \"float32\"), compute: T.Buffer((1, 9, 2), \"float32\"), compute_1: T.Buffer((1, 9, 2), \"float32\"), compute_2: T.Buffer((1, 9, 2), \"float32\"), compute_3: T.Buffer((1, 9, 2), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((18,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(18):\n            compute_4 = T.Buffer((18,), data=compute.data)\n            compute_4[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused in T.parallel(9):\n            for i2 in range(2):\n                cse_var_1: T.int32 = i0_i1_fused * 2 + i2\n                compute_4 = T.Buffer((18,), data=compute_1.data)\n                compute_4[cse_var_1] = T.exp(T.asinh(ph_0_1[cse_var_1]))\n        for i0_i1_fused_i2_fused in T.parallel(18):\n            compute_4 = T.Buffer((18,), data=compute_2.data)\n            compute_4[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(18):\n            compute_4 = T.Buffer((18,), data=compute_3.data)\n            compute_4[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "abs",
                "asinh",
                "exp",
                "ceil",
                "ceil"
            ]
        ],
        "input_shape": "[[1, 9, 2]]",
        "output_shape": "[[1, 9, 2], [1, 9, 2], [1, 9, 2], [1, 9, 2]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = fabsf(ph_0[((i0 * 2) + i1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 18; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = expf(asinhf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 18; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = ceilf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 18; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = ceilf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 18; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 18; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = expf(asinhf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 9; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 2; ++i2) {\n      compute_2[((i0_i1_fused * 2) + i2)] = ceilf(ph_0[((i0_i1_fused * 2) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 18; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = ceilf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 18; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 18; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = expf(asinhf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 9; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 2; ++i2) {\n      compute_2[((i0_i1_fused * 2) + i2)] = ceilf(ph_0[((i0_i1_fused * 2) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 18; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = ceilf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 18; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 18; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = expf(asinhf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 18; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = ceilf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 1; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute_3[(((i0 * 18) + (i1 * 2)) + i2)] = ceilf(ph_0[(((i0 * 18) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 221; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute[((i0_i1_fused * 7) + i2)] = expf(ph_0[((i0_i1_fused * 7) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 221; ++i0_i1_fused_1) {\n    for (int32_t i2_1 = 0; i2_1 < 7; ++i2_1) {\n      compute_1[((i0_i1_fused_1 * 7) + i2_1)] = atanhf(ph_0[((i0_i1_fused_1 * 7) + i2_1)]);\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(16) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = atanhf(ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))] = __expf(ph_0[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((13, 17, 7), \"float32\"), compute: T.Buffer((13, 17, 7), \"float32\"), compute_1: T.Buffer((13, 17, 7), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((1547,), data=ph_0.data)\n        for i0_i1_fused in T.parallel(221):\n            for i2 in range(7):\n                cse_var_1: T.int32 = i0_i1_fused * 7 + i2\n                compute_2 = T.Buffer((1547,), data=compute.data)\n                compute_2[cse_var_1] = T.exp(ph_0_1[cse_var_1])\n        for i0_i1_fused in T.parallel(221):\n            for i2 in range(7):\n                cse_var_2: T.int32 = i0_i1_fused * 7 + i2\n                compute_2 = T.Buffer((1547,), data=compute_1.data)\n                compute_2[cse_var_2] = T.atanh(ph_0_1[cse_var_2])",
        "op_args": [
            [
                "exp",
                "atanh"
            ]
        ],
        "input_shape": "[[13, 17, 7]]",
        "output_shape": "[[13, 17, 7], [13, 17, 7]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 13; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 119) + (i1 * 7)) + i2)] = expf(ph_0[(((i0 * 119) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 221; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 7; ++i2_1) {\n      compute_1[((i0_i1_fused * 7) + i2_1)] = atanhf(ph_0[((i0_i1_fused * 7) + i2_1)]);\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1547; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 221; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute_1[((i0_i1_fused * 7) + i2)] = atanhf(ph_0[((i0_i1_fused * 7) + i2)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1389; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 241; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute_1[((i0_i1_fused * 7) + i2)] = atanhf(ph_0[((i0_i1_fused * 7) + i2)]);\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1547; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1547; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = atanhf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 6840; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] * ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 6840; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 19; ++i0) {\n    for (int32_t i1 = 0; i1 < 20; ++i1) {\n      for (int32_t i2 = 0; i2 < 18; ++i2) {\n        compute_1[(((i0 * 360) + (i1 * 18)) + i2)] = atanhf(ph_0[(((i0 * 360) + (i1 * 18)) + i2)]);\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(24) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 24) + ((int)threadIdx.x))] = atanhf(ph_0[((((int)blockIdx.x) * 24) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = fabsf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_multiply[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] * ph_3[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((19, 20, 18), \"float32\"), ph_3: T.Buffer((19, 20, 18), \"float32\"), T_multiply: T.Buffer((19, 20, 18), \"float32\"), compute: T.Buffer((19, 20, 18), \"float32\"), compute_1: T.Buffer((19, 20, 18), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((6840,), data=ph_0.data)\n        for ax0_ax1_fused_ax2_fused in T.parallel(6840):\n            T_multiply_1 = T.Buffer((6840,), data=T_multiply.data)\n            ph_3_1 = T.Buffer((6840,), data=ph_3.data)\n            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * ph_3_1[ax0_ax1_fused_ax2_fused]\n        for i0_i1_fused_i2_fused in T.parallel(6840):\n            compute_2 = T.Buffer((6840,), data=compute.data)\n            compute_2[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused])\n        for i0 in T.parallel(19):\n            for i1, i2 in T.grid(20, 18):\n                cse_var_1: T.int32 = i0 * 360 + i1 * 18 + i2\n                compute_2 = T.Buffer((6840,), data=compute_1.data)\n                compute_2[cse_var_1] = T.atanh(ph_0_1[cse_var_1])",
        "op_args": [
            [
                "multiply",
                "abs",
                "atanh"
            ]
        ],
        "input_shape": "[[19, 20, 18], [9, 19, 17], [19, 20, 18]]",
        "output_shape": "[[19, 20, 18], [9, 19, 17], [19, 20, 18], [19, 20, 18]]",
        "deepseek_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 6840; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] * ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 6840; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 6840; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = atanhf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 380; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 18; ++ax2) {\n      T_multiply[((ax0_ax1_fused * 18) + ax2)] = (ph_0[((ax0_ax1_fused * 18) + ax2)] * ph_3[((ax0_ax1_fused * 18) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 380; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 18; ++i2) {\n      compute[((i0_i1_fused * 18) + i2)] = fabsf(ph_0[((i0_i1_fused * 18) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 6840; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 7200; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] * ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 7200; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 380; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 18; ++i2) {\n      compute_1[((i0_i1_fused * 18) + i2)] = atanhf(ph_0[((i0_i1_fused * 18) + i2)]);\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 6840; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 3066; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = fabsf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 19; ++i0) {\n    for (int32_t i1 = 0; i1 < 20; ++i1) {\n      for (int32_t i2 = 0; i2 < 18; ++i2) {\n        compute_2[(((i0 * 360) + (i1 * 18)) + i2)] = (ph_0[(((i0 * 360) + (i1 * 18)) + i2)] * ph_3[(((i0 * 360) + (i1 * 18)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 21) + (i1 * 7)) + i2)] = atanf(ph_0[(((i0 * 21) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 126; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = fabsf(atanf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 6; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 3; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 7; ++i2_1) {\n        compute_2[(((i0_1 * 21) + (i1_1 * 7)) + i2_1)] = atanf(ph_0[(((i0_1 * 21) + (i1_1 * 7)) + i2_1)]);\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(36) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fabsf(atanf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((6, 3, 7), \"float32\"), compute: T.Buffer((6, 3, 7), \"float32\"), compute_1: T.Buffer((6, 3, 7), \"float32\"), compute_2: T.Buffer((6, 3, 7), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((126,), data=ph_0.data)\n        for i0 in T.parallel(6):\n            for i1, i2 in T.grid(3, 7):\n                cse_var_1: T.int32 = i0 * 21 + i1 * 7 + i2\n                compute_3 = T.Buffer((126,), data=compute.data)\n                compute_3[cse_var_1] = T.atan(ph_0_1[cse_var_1])\n        for i0_i1_fused_i2_fused in T.parallel(126):\n            compute_3 = T.Buffer((126,), data=compute_1.data)\n            compute_3[i0_i1_fused_i2_fused] = T.fabs(T.atan(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0 in T.parallel(6):\n            for i1, i2 in T.grid(3, 7):\n                cse_var_2: T.int32 = i0 * 21 + i1 * 7 + i2\n                compute_3 = T.Buffer((126,), data=compute_2.data)\n                compute_3[cse_var_2] = T.atan(ph_0_1[cse_var_2])",
        "op_args": [
            [
                "atan",
                "atan",
                "abs",
                "atan"
            ]
        ],
        "input_shape": "[[6, 3, 7]]",
        "output_shape": "[[6, 3, 7], [6, 3, 7], [6, 3, 7]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 21) + (i1 * 7)) + i2)] = atanf(ph_0[(((i0 * 21) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 18; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute_1[((i0_i1_fused * 7) + i2)] = fabsf(atanf(ph_0[((i0_i1_fused * 7) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 126; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 126; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 18; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute_1[((i0_i1_fused * 7) + i2)] = fabsf(atanf(ph_0[((i0_i1_fused * 7) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 126; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = atanf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 126; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 18; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute_1[((i0_i1_fused * 7) + i2)] = fabsf(atanf(ph_0[((i0_i1_fused * 7) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 126; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = atanf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 126; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 126; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = fabsf(atanf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 6; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute_2[(((i0 * 21) + (i1 * 7)) + i2)] = atanf(ph_0[(((i0 * 21) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  float compute_3[2340];\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2340; ++i0_i1_fused_i2_fused) {\n    compute_3[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2340; ++i0_i1_fused_i2_fused_1) {\n    compute[i0_i1_fused_i2_fused_1] = acoshf(compute_3[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2340; ++i0_i1_fused_i2_fused_2) {\n    compute_1[i0_i1_fused_i2_fused_2] = atanhf(compute_3[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0 = 0; ax0 < 20; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 13; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n        T_add[(((ax0 * 117) + (ax1 * 9)) + ax2)] = (ph_0[(((ax0 * 117) + (ax1 * 9)) + ax2)] + ph_3[(((ax0 * 117) + (ax1 * 9)) + ax2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 2340; ++i0_i1_fused_i2_fused_3) {\n    compute_2[i0_i1_fused_i2_fused_3] = atanf((ph_0[i0_i1_fused_i2_fused_3] / ph_3[i0_i1_fused_i2_fused_3]));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(16) default_function_kernel_2(float* __restrict__ T_add, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_add[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] + ph_3[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = atanf((ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] / ph_3[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = acoshf(__expf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = atanhf(__expf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((20, 13, 9), \"float32\"), ph_3: T.Buffer((20, 13, 9), \"float32\"), T_add: T.Buffer((20, 13, 9), \"float32\"), compute: T.Buffer((20, 13, 9), \"float32\"), compute_1: T.Buffer((20, 13, 9), \"float32\"), compute_2: T.Buffer((20, 13, 9), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        compute_3 = T.allocate([2340], \"float32\", \"global\")\n        compute_4 = T.Buffer((2340,), data=compute_3)\n        ph_0_1 = T.Buffer((2340,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(2340):\n            compute_4[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(2340):\n            compute_5 = T.Buffer((2340,), data=compute.data)\n            compute_5[i0_i1_fused_i2_fused] = T.acosh(compute_4[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(2340):\n            compute_5 = T.Buffer((2340,), data=compute_1.data)\n            compute_5[i0_i1_fused_i2_fused] = T.atanh(compute_4[i0_i1_fused_i2_fused])\n        ph_3_1 = T.Buffer((2340,), data=ph_3.data)\n        for ax0 in T.parallel(20):\n            for ax1, ax2 in T.grid(13, 9):\n                cse_var_1: T.int32 = ax0 * 117 + ax1 * 9 + ax2\n                T_add_1 = T.Buffer((2340,), data=T_add.data)\n                T_add_1[cse_var_1] = ph_0_1[cse_var_1] + ph_3_1[cse_var_1]\n        for i0_i1_fused_i2_fused in T.parallel(2340):\n            compute_5 = T.Buffer((2340,), data=compute_2.data)\n            compute_5[i0_i1_fused_i2_fused] = T.atan(ph_0_1[i0_i1_fused_i2_fused] / ph_3_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "divide",
                "add",
                "exp",
                "acosh",
                "atanh",
                "atan"
            ]
        ],
        "input_shape": "[[20, 13, 9], [16, 4, 9], [20, 13, 9]]",
        "output_shape": "[[16, 4, 9], [20, 13, 9], [20, 13, 9], [20, 13, 9], [20, 13, 9]]",
        "deepseek_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 20; ++i0) {\n    for (int32_t i1 = 0; i1 < 13; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 117) + (i1 * 9)) + i2)] = expf(ph_0[(((i0 * 117) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 260; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute_1[((i0_i1_fused * 9) + i2)] = atanhf(expf(ph_0[((i0_i1_fused * 9) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 260; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute_2[((i0_i1_fused * 9) + i2)] = atanf((ph_0[((i0_i1_fused * 9) + i2)] / ph_3[((i0_i1_fused * 9) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 260; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      T_add[((i0_i1_fused * 9) + i2)] = (ph_0[((i0_i1_fused * 9) + i2)] + ph_3[((i0_i1_fused * 9) + i2)]);\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 260; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute[((i0_i1_fused * 9) + i2)] = acoshf(expf(ph_0[((i0_i1_fused * 9) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2340; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = atanhf(expf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 260; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n      T_add[((ax0_ax1_fused * 9) + ax2)] = (ph_0[((ax0_ax1_fused * 9) + ax2)] + ph_3[((ax0_ax1_fused * 9) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2340; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = atanf((ph_0[i0_i1_fused_i2_fused_1] / ph_3[i0_i1_fused_i2_fused_1]));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2540; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(expf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 264; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute_1[((i0_i1_fused * 9) + i2)] = atanhf(expf(ph_0[((i0_i1_fused * 9) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 264; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n      T_add[((ax0_ax1_fused * 9) + ax2)] = (ph_0[((ax0_ax1_fused * 9) + ax2)] + ph_3[((ax0_ax1_fused * 9) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2540; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = atanf((ph_0[i0_i1_fused_i2_fused_1] / ph_3[i0_i1_fused_i2_fused_1]));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 20; ++i0) {\n    for (int32_t i1 = 0; i1 < 13; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        T_add[(((i0 * 117) + (i1 * 9)) + i2)] = (ph_0[(((i0 * 117) + (i1 * 9)) + i2)] + ph_3[(((i0 * 117) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2340; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf((ph_0[i0_i1_fused_i2_fused] / ph_3[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2340; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = acoshf(expf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2340; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = atanhf(expf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1280; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = sinf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1280; ++ax0_ax1_fused_ax2_fused) {\n    T_mod[ax0_ax1_fused_ax2_fused] = fmodf(atanhf(ph_0[ax0_ax1_fused_ax2_fused]), ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 160; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 8; ++i2) {\n      compute_1[((i0_i1_fused * 8) + i2)] = acoshf(ph_0[((i0_i1_fused * 8) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 160; ++i0_i1_fused_1) {\n    for (int32_t i2_1 = 0; i2_1 < 8; ++i2_1) {\n      compute_2[((i0_i1_fused_1 * 8) + i2_1)] = asinhf(sinf(ph_0[((i0_i1_fused_1 * 8) + i2_1)]));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ T_mod, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    T_mod[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fmodf(atanhf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]), ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = __sinf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = acoshf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = asinhf(__sinf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((16, 10, 8), \"float32\"), compute: T.Buffer((16, 10, 8), \"float32\"), T_mod: T.Buffer((16, 10, 8), \"float32\"), compute_1: T.Buffer((16, 10, 8), \"float32\"), compute_2: T.Buffer((16, 10, 8), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((1280,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(1280):\n            compute_3 = T.Buffer((1280,), data=compute.data)\n            compute_3[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])\n        for ax0_ax1_fused_ax2_fused in T.parallel(1280):\n            T_mod_1 = T.Buffer((1280,), data=T_mod.data)\n            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(T.atanh(ph_0_1[ax0_ax1_fused_ax2_fused]), ph_0_1[ax0_ax1_fused_ax2_fused])\n        for i0_i1_fused in T.parallel(160):\n            for i2 in range(8):\n                cse_var_1: T.int32 = i0_i1_fused * 8 + i2\n                compute_3 = T.Buffer((1280,), data=compute_1.data)\n                compute_3[cse_var_1] = T.acosh(ph_0_1[cse_var_1])\n        for i0_i1_fused in T.parallel(160):\n            for i2 in range(8):\n                cse_var_2: T.int32 = i0_i1_fused * 8 + i2\n                compute_3 = T.Buffer((1280,), data=compute_2.data)\n                compute_3[cse_var_2] = T.asinh(T.sin(ph_0_1[cse_var_2]))",
        "op_args": [
            [
                "sin",
                "atanh",
                "mod",
                "acosh",
                "sin",
                "asinh"
            ]
        ],
        "input_shape": "[[16, 10, 8]]",
        "output_shape": "[[16, 10, 8], [16, 10, 8], [16, 10, 8], [16, 10, 8]]",
        "deepseek_c": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        compute[(((i0 * 80) + (i1 * 8)) + i2)] = sinf(ph_0[(((i0 * 80) + (i1 * 8)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1280; ++ax0_ax1_fused_ax2_fused) {\n    T_mod[ax0_ax1_fused_ax2_fused] = fmodf(atanhf(ph_0[ax0_ax1_fused_ax2_fused]), ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 16; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 10; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 8; ++i2_1) {\n        compute_1[(((i0_1 * 80) + (i1_1 * 8)) + i2_1)] = acoshf(ph_0[(((i0_1 * 80) + (i1_1 * 8)) + i2_1)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_2 = 0; i0_2 < 16; ++i0_2) {\n    for (int32_t i1_2 = 0; i1_2 < 10; ++i1_2) {\n      for (int32_t i2_2 = 0; i2_2 < 8; ++i2_2) {\n        compute_2[(((i0_2 * 80) + (i1_2 * 8)) + i2_2)] = asinhf(sinf(ph_0[(((i0_2 * 80) + (i1_2 * 8)) + i2_2)]));\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 160; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 8; ++i2) {\n      compute[((i0_i1_fused * 8) + i2)] = sinf(ph_0[((i0_i1_fused * 8) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1280; ++ax0_ax1_fused_ax2_fused) {\n    T_mod[ax0_ax1_fused_ax2_fused] = fmodf(atanhf(ph_0[ax0_ax1_fused_ax2_fused]), ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1280; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1280; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1280; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = sinf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 160; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      T_mod[((ax0_ax1_fused * 8) + ax2)] = fmodf(atanhf(ph_0[((ax0_ax1_fused * 8) + ax2)]), ph_0[((ax0_ax1_fused * 8) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1280; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = acoshf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 1280; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = asinhf(sinf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1280; ++i0_i1_fused_i2_fused) {\n    if ((i0_i1_fused_i2_fused < 32) || (i0_i1_fused_i2_fused >= 1248)) {\n      T_mod[i0_i1_fused_i2_fused] = fmodf(atanhf(ph_0[i0_i1_fused_i2_fused]), ph_0[i0_i1_fused_i2_fused]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1280; ++i0_i1_fused_i2_fused_1) {\n    if ((i0_i1_fused_i2_fused_1 < 32) || (i0_i1_fused_i2_fused_1 >= 1248)) {\n      compute[i0_i1_fused_i2_fused_1] = sinf(ph_0[i0_i1_fused_i2_fused_1]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 1280; ++i0_i1_fused_i2_fused_2) {\n    if ((i0_i1_fused_i2_fused_2 < 64) || (i0_i1_fused_i2_fused_2 >= 1216)) {\n      compute_1[i0_i1_fused_i2_fused_2] = acoshf(ph_0[i0_i1_fused_i2_fused_2]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        compute_2[(((i0 * 80) + (i1 * 8)) + i2)] = asinhf(sinf(ph_0[(((i0 * 80) + (i1 * 8)) + i2)]));\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2700; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2700; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = acoshf(ceilf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 15; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 18; ++i2) {\n        compute_2[(((i0 * 180) + (i1 * 18)) + i2)] = ceilf(ph_0[(((i0 * 180) + (i1 * 18)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2700; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = ceilf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(4) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = acoshf(ceilf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))] = ceilf(ph_0[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = atanhf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = ceilf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((15, 10, 18), \"float32\"), compute: T.Buffer((15, 10, 18), \"float32\"), compute_1: T.Buffer((15, 10, 18), \"float32\"), compute_2: T.Buffer((15, 10, 18), \"float32\"), compute_3: T.Buffer((15, 10, 18), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((2700,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(2700):\n            compute_4 = T.Buffer((2700,), data=compute.data)\n            compute_4[i0_i1_fused_i2_fused] = T.atanh(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(2700):\n            compute_4 = T.Buffer((2700,), data=compute_1.data)\n            compute_4[i0_i1_fused_i2_fused] = T.acosh(T.ceil(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0 in T.parallel(15):\n            for i1, i2 in T.grid(10, 18):\n                cse_var_1: T.int32 = i0 * 180 + i1 * 18 + i2\n                compute_4 = T.Buffer((2700,), data=compute_2.data)\n                compute_4[cse_var_1] = T.ceil(ph_0_1[cse_var_1])\n        for i0_i1_fused_i2_fused in T.parallel(2700):\n            compute_4 = T.Buffer((2700,), data=compute_3.data)\n            compute_4[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "atanh",
                "ceil",
                "acosh",
                "ceil",
                "ceil"
            ]
        ],
        "input_shape": "[[15, 10, 18]]",
        "output_shape": "[[15, 10, 18], [15, 10, 18], [15, 10, 18], [15, 10, 18]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 15; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 18; ++i2) {\n        compute[(((i0 * 180) + (i1 * 18)) + i2)] = atanhf(ph_0[(((i0 * 180) + (i1 * 18)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 150; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 18; ++i2_1) {\n      compute_1[((i0_i1_fused * 18) + i2_1)] = acoshf(ceilf(ph_0[((i0_i1_fused * 18) + i2_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2700; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2700; ++i0_i1_fused_i2_fused_1) {\n    compute_3[i0_i1_fused_i2_fused_1] = ceilf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2700; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 150; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 18; ++i2) {\n      compute_1[((i0_i1_fused * 18) + i2)] = acoshf(ceilf(ph_0[((i0_i1_fused * 18) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2700; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = ceilf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2700; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = ceilf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2700; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 150; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 18; ++i2) {\n      compute_1[((i0_i1_fused * 18) + i2)] = acoshf(ceilf(ph_0[((i0_i1_fused * 18) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2700; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = ceilf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2700; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = ceilf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2700; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = acoshf(ceilf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2700; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = ceilf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2700; ++i0_i1_fused_i2_fused_2) {\n    compute[i0_i1_fused_i2_fused_2] = atanhf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 15; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 18; ++i2) {\n        compute_3[(((i0 * 180) + (i1 * 18)) + i2)] = ceilf(ph_0[(((i0 * 180) + (i1 * 18)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 154; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 154; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 22; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute_2[((i0_i1_fused * 7) + i2)] = sinf(ph_0[((i0_i1_fused * 7) + i2)]);\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(36) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))] = atanhf(asinf(ph_0[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = __sinf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = asinhf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((2, 11, 7), \"float32\"), compute: T.Buffer((2, 11, 7), \"float32\"), compute_1: T.Buffer((2, 11, 7), \"float32\"), compute_2: T.Buffer((2, 11, 7), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((154,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(154):\n            compute_3 = T.Buffer((154,), data=compute.data)\n            compute_3[i0_i1_fused_i2_fused] = T.asinh(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(154):\n            compute_3 = T.Buffer((154,), data=compute_1.data)\n            compute_3[i0_i1_fused_i2_fused] = T.atanh(T.asin(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused in T.parallel(22):\n            for i2 in range(7):\n                cse_var_1: T.int32 = i0_i1_fused * 7 + i2\n                compute_3 = T.Buffer((154,), data=compute_2.data)\n                compute_3[cse_var_1] = T.sin(ph_0_1[cse_var_1])",
        "op_args": [
            [
                "asinh",
                "asin",
                "atanh",
                "sin"
            ]
        ],
        "input_shape": "[[2, 11, 7]]",
        "output_shape": "[[2, 11, 7], [2, 11, 7], [2, 11, 7]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 11; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 77) + (i1 * 7)) + i2)] = asinhf(ph_0[(((i0 * 77) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 22; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 7; ++i2_1) {\n      compute_1[((i0_i1_fused * 7) + i2_1)] = atanhf(asinf(ph_0[((i0_i1_fused * 7) + i2_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 154; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = sinf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 11; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 77) + (i1 * 7)) + i2)] = asinhf(ph_0[(((i0 * 77) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 154; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 22; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 7; ++i2_1) {\n      compute_2[((i0_i1_fused * 7) + i2_1)] = sinf(ph_0[((i0_i1_fused * 7) + i2_1)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 154; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 154; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 22; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute_2[((i0_i1_fused * 7) + i2)] = sinf(ph_0[((i0_i1_fused * 7) + i2)]);\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 154; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 154; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = sinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 11; ++i1) {\n      for (int32_t i2 = 0; i2 < 7; ++i2) {\n        compute[(((i0 * 77) + (i1 * 7)) + i2)] = asinhf(ph_0[(((i0 * 77) + (i1 * 7)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* compute_4, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 594; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 594; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 594; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = acosf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 594; ++i0_i1_fused_i2_fused_3) {\n    compute_3[i0_i1_fused_i2_fused_3] = expf(sinf(ph_0[i0_i1_fused_i2_fused_3]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 11; ++i1) {\n      for (int32_t i2 = 0; i2 < 6; ++i2) {\n        compute_4[(((i0 * 66) + (i1 * 6)) + i2)] = asinf(sinf(ph_0[(((i0 * 66) + (i1 * 6)) + i2)]));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(2) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))] = atanhf(asinf(ph_0[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = ceilf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = __expf(__sinf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_4(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = asinf(__sinf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = acosf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((9, 11, 6), \"float32\"), compute: T.Buffer((9, 11, 6), \"float32\"), compute_1: T.Buffer((9, 11, 6), \"float32\"), compute_2: T.Buffer((9, 11, 6), \"float32\"), compute_3: T.Buffer((9, 11, 6), \"float32\"), compute_4: T.Buffer((9, 11, 6), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((594,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(594):\n            compute_5 = T.Buffer((594,), data=compute.data)\n            compute_5[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(594):\n            compute_5 = T.Buffer((594,), data=compute_1.data)\n            compute_5[i0_i1_fused_i2_fused] = T.atanh(T.asin(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused_i2_fused in T.parallel(594):\n            compute_5 = T.Buffer((594,), data=compute_2.data)\n            compute_5[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(594):\n            compute_5 = T.Buffer((594,), data=compute_3.data)\n            compute_5[i0_i1_fused_i2_fused] = T.exp(T.sin(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0 in T.parallel(9):\n            for i1, i2 in T.grid(11, 6):\n                cse_var_1: T.int32 = i0 * 66 + i1 * 6 + i2\n                compute_5 = T.Buffer((594,), data=compute_4.data)\n                compute_5[cse_var_1] = T.asin(T.sin(ph_0_1[cse_var_1]))",
        "op_args": [
            [
                "ceil",
                "asin",
                "atanh",
                "acos",
                "sin",
                "exp",
                "asin"
            ]
        ],
        "input_shape": "[[9, 11, 6]]",
        "output_shape": "[[9, 11, 6], [9, 11, 6], [9, 11, 6], [9, 11, 6], [9, 11, 6]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* compute_4, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 11; ++i1) {\n      for (int32_t i2 = 0; i2 < 6; ++i2) {\n        compute[(((i0 * 66) + (i1 * 6)) + i2)] = ceilf(ph_0[(((i0 * 66) + (i1 * 6)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 99; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 6; ++i2) {\n      compute_1[((i0_i1_fused * 6) + i2)] = atanhf(asinf(ph_0[((i0_i1_fused * 6) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 594; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 594; ++i0_i1_fused_i2_fused_1) {\n    compute_3[i0_i1_fused_i2_fused_1] = expf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 594; ++i0_i1_fused_i2_fused_2) {\n    compute_4[i0_i1_fused_i2_fused_2] = asinf(sinf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* compute_4, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 99; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 6; ++i2) {\n      compute[((i0_i1_fused * 6) + i2)] = ceilf(ph_0[((i0_i1_fused * 6) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 594; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 594; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = acosf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 594; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = expf(sinf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 594; ++i0_i1_fused_i2_fused_3) {\n    compute_4[i0_i1_fused_i2_fused_3] = asinf(sinf(ph_0[i0_i1_fused_i2_fused_3]));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* compute_4, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 554; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 99; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 6; ++i2) {\n      compute_1[((i0_i1_fused * 6) + i2)] = atanhf(asinf(ph_0[((i0_i1_fused * 6) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 554; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = acosf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 554; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = expf(sinf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 554; ++i0_i1_fused_i2_fused_3) {\n    compute_4[i0_i1_fused_i2_fused_3] = asinf(sinf(ph_0[i0_i1_fused_i2_fused_3]));\n  }\n}",
        "gemini3_c": "void default_function_kernel_1(float* compute, float* compute_1, float* compute_2, float* compute_3, float* compute_4, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 594; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 594; ++i0_i1_fused_i2_fused_1) {\n    if ((i0_i1_fused_i2_fused_1 / 32) < 9) {\n      compute_1[i0_i1_fused_i2_fused_1] = ceilf(ph_0[i0_i1_fused_i2_fused_1]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 594; ++i0_i1_fused_i2_fused_2) {\n    if ((i0_i1_fused_i2_fused_2 / 64) < 9) {\n      compute_2[i0_i1_fused_i2_fused_2] = expf(sinf(ph_0[i0_i1_fused_i2_fused_2]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 594; ++i0_i1_fused_i2_fused_3) {\n    if ((i0_i1_fused_i2_fused_3 / 32) < 9) {\n      compute_3[i0_i1_fused_i2_fused_3] = asinf(sinf(ph_0[i0_i1_fused_i2_fused_3]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_4 = 0; i0_i1_fused_i2_fused_4 < 594; ++i0_i1_fused_i2_fused_4) {\n    if ((i0_i1_fused_i2_fused_4 / 64) < 9) {\n      compute_4[i0_i1_fused_i2_fused_4] = acosf(ph_0[i0_i1_fused_i2_fused_4]);\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 150; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 150; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 150; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = fabsf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 10; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 15; ++i2) {\n      compute_3[((i0_i1_fused * 15) + i2)] = asinf(ph_0[((i0_i1_fused * 15) + i2)]);\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = atanhf(ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fabsf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = asinf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(3) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 3) + ((int)threadIdx.x))] = atanhf(asinf(ph_0[((((int)blockIdx.x) * 3) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((2, 5, 15), \"float32\"), compute: T.Buffer((2, 5, 15), \"float32\"), compute_1: T.Buffer((2, 5, 15), \"float32\"), compute_2: T.Buffer((2, 5, 15), \"float32\"), compute_3: T.Buffer((2, 5, 15), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((150,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(150):\n            compute_4 = T.Buffer((150,), data=compute.data)\n            compute_4[i0_i1_fused_i2_fused] = T.atanh(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(150):\n            compute_4 = T.Buffer((150,), data=compute_1.data)\n            compute_4[i0_i1_fused_i2_fused] = T.atanh(T.asin(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused_i2_fused in T.parallel(150):\n            compute_4 = T.Buffer((150,), data=compute_2.data)\n            compute_4[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused in T.parallel(10):\n            for i2 in range(15):\n                cse_var_1: T.int32 = i0_i1_fused * 15 + i2\n                compute_4 = T.Buffer((150,), data=compute_3.data)\n                compute_4[cse_var_1] = T.asin(ph_0_1[cse_var_1])",
        "op_args": [
            [
                "atanh",
                "asin",
                "atanh",
                "abs",
                "asin"
            ]
        ],
        "input_shape": "[[2, 5, 15]]",
        "output_shape": "[[2, 5, 15], [2, 5, 15], [2, 5, 15], [2, 5, 15]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 15; ++i2) {\n        compute[(((i0 * 75) + (i1 * 15)) + i2)] = atanhf(ph_0[(((i0 * 75) + (i1 * 15)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 10; ++i0_i1_fused) {\n    for (int32_t i2_s = 0; i2_s < 15; ++i2_s) {\n      compute_1[((i0_i1_fused * 15) + i2_s)] = atanhf(asinf(ph_0[((i0_i1_fused * 15) + i2_s)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 150; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 150; ++i0_i1_fused_i2_fused_1) {\n    compute_3[i0_i1_fused_i2_fused_1] = asinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 10; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 15; ++i2) {\n      compute[((i0_i1_fused * 15) + i2)] = atanhf(ph_0[((i0_i1_fused * 15) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 150; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 150; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = fabsf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 150; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = asinf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 150; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 10; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 15; ++i2) {\n      compute_1[((i0_i1_fused * 15) + i2)] = atanhf(asinf(ph_0[((i0_i1_fused * 15) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 150; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = fabsf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 150; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = asinf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 15; ++i2) {\n        compute[(((i0 * 150) + (i1 * 15)) + i2)] = atanhf(ph_0[(((i0 * 150) + (i1 * 15)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 150; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 150; ++i0_i1_fused_i2_fused_1) {\n    compute_3[i0_i1_fused_i2_fused_1] = asinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 150; ++i0_i1_fused_i2_fused_2) {\n    compute_1[i0_i1_fused_i2_fused_2] = atanhf(asinf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1088; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0 = 0; ax0 < 16; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 17; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_add[(((ax0 * 68) + (ax1 * 4)) + ax2)] = (cosf(ph_0[(((ax0 * 68) + (ax1 * 4)) + ax2)]) + ph_0[(((ax0 * 68) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1088; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = expf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ T_add, float* __restrict__ ph_0) {\n  T_add[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (__cosf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]) + ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 24) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 24) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = __expf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((16, 17, 4), \"float32\"), compute: T.Buffer((16, 17, 4), \"float32\"), T_add: T.Buffer((16, 17, 4), \"float32\"), compute_1: T.Buffer((16, 17, 4), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((1088,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(1088):\n            compute_2 = T.Buffer((1088,), data=compute.data)\n            compute_2[i0_i1_fused_i2_fused] = T.atan(ph_0_1[i0_i1_fused_i2_fused])\n        for ax0 in T.parallel(16):\n            for ax1, ax2 in T.grid(17, 4):\n                cse_var_1: T.int32 = ax0 * 68 + ax1 * 4 + ax2\n                T_add_1 = T.Buffer((1088,), data=T_add.data)\n                T_add_1[cse_var_1] = T.cos(ph_0_1[cse_var_1]) + ph_0_1[cse_var_1]\n        for i0_i1_fused_i2_fused in T.parallel(1088):\n            compute_2 = T.Buffer((1088,), data=compute_1.data)\n            compute_2[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "atan",
                "cos",
                "add",
                "exp"
            ]
        ],
        "input_shape": "[[16, 17, 4]]",
        "output_shape": "[[16, 17, 4], [16, 17, 4], [16, 17, 4]]",
        "deepseek_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute[(((i0 * 68) + (i1 * 4)) + i2)] = atanf(ph_0[(((i0 * 68) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 272; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 4; ++i2_1) {\n      T_add[((i0_i1_fused * 4) + i2_1)] = (cosf(ph_0[((i0_i1_fused * 4) + i2_1)]) + ph_0[((i0_i1_fused * 4) + i2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1088; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 272; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 4; ++i2) {\n      compute[((i0_i1_fused * 4) + i2)] = atanf(ph_0[((i0_i1_fused * 4) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1088; ++ax0_ax1_fused_ax2_fused) {\n    T_add[ax0_ax1_fused_ax2_fused] = (cosf(ph_0[ax0_ax1_fused_ax2_fused]) + ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1088; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 816; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 272; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n      T_add[((ax0_ax1_fused * 4) + ax2)] = (cosf(ph_0[((ax0_ax1_fused * 4) + ax2)]) + ph_0[((ax0_ax1_fused * 4) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 816; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = expf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1088; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1088; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = expf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute_1[(((i0 * 68) + (i1 * 4)) + i2)] = (cosf(ph_0[(((i0 * 68) + (i1 * 4)) + i2)]) + ph_0[(((i0 * 68) + (i1 * 4)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_batch_matmul_NN, float* compute, float* ph_0) {\n  float auto_scheduler_layout_transform[1280];\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1280; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(fmodf(ph_0[i0_i1_fused_i2_fused], ceilf(ph_0[i0_i1_fused_i2_fused])));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 5; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax4 = 0; ax4 < 4; ++ax4) {\n      for (int32_t ax5 = 0; ax5 < 2; ++ax5) {\n        for (int32_t ax6 = 0; ax6 < 8; ++ax6) {\n          for (int32_t ax7 = 0; ax7 < 2; ++ax7) {\n            for (int32_t ax8 = 0; ax8 < 2; ++ax8) {\n              auto_scheduler_layout_transform[((((((ax0_ax1_fused_ax2_fused * 256) + (ax4 * 64)) + (ax5 * 32)) + (ax6 * 4)) + (ax7 * 2)) + ax8)] = atanf(ph_0[((((((ax0_ax1_fused_ax2_fused * 256) + (ax5 * 128)) + (ax8 * 64)) + (ax4 * 16)) + (ax7 * 8)) + ax6)]);\n            }\n          }\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused = 0; b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused < 10; ++b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused) {\n    for (int32_t b_outer_inner_init = 0; b_outer_inner_init < 2; ++b_outer_inner_init) {\n      for (int32_t i_outer_inner_init = 0; i_outer_inner_init < 2; ++i_outer_inner_init) {\n        for (int32_t j_outer_inner_init = 0; j_outer_inner_init < 8; ++j_outer_inner_init) {\n          for (int32_t b_inner_init = 0; b_inner_init < 2; ++b_inner_init) {\n            for (int32_t i_inner_init = 0; i_inner_init < 2; ++i_inner_init) {\n              T_batch_matmul_NN[((((((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5) * 256) + (b_outer_inner_init * 128)) + (b_inner_init * 64)) + ((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused / 5) * 32)) + (i_outer_inner_init * 16)) + (i_inner_init * 8)) + j_outer_inner_init)] = 0.000000e+00f;\n            }\n          }\n        }\n      }\n    }\n    for (int32_t k_outer = 0; k_outer < 4; ++k_outer) {\n      for (int32_t b_outer_inner = 0; b_outer_inner < 2; ++b_outer_inner) {\n        for (int32_t i_outer_inner = 0; i_outer_inner < 2; ++i_outer_inner) {\n          for (int32_t j_outer_inner = 0; j_outer_inner < 8; ++j_outer_inner) {\n            for (int32_t k_inner = 0; k_inner < 2; ++k_inner) {\n              for (int32_t b_inner = 0; b_inner < 2; ++b_inner) {\n                for (int32_t i_inner = 0; i_inner < 2; ++i_inner) {\n                  T_batch_matmul_NN[((((((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5) * 256) + (b_outer_inner * 128)) + (b_inner * 64)) + ((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused / 5) * 32)) + (i_outer_inner * 16)) + (i_inner * 8)) + j_outer_inner)] = (T_batch_matmul_NN[((((((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5) * 256) + (b_outer_inner * 128)) + (b_inner * 64)) + ((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused / 5) * 32)) + (i_outer_inner * 16)) + (i_inner * 8)) + j_outer_inner)] + (ph_0[(((((((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5) * 256) + (b_outer_inner * 128)) + (b_inner * 64)) + ((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused / 5) * 32)) + (i_outer_inner * 16)) + (i_inner * 8)) + (k_outer * 2)) + k_inner)] * auto_scheduler_layout_transform[(((((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5) * 256) + (k_outer * 64)) + (b_outer_inner * 32)) + (j_outer_inner * 4)) + (k_inner * 2)) + b_inner)]));\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(40) default_function_kernel_2(float* __restrict__ T_batch_matmul_NN, float* __restrict__ ph_0, float* __restrict__ ph_6) {\n  float T_batch_matmul_NN_local[2];\n  __shared__ float ph_6_shared[50];\n  for (int b_c_inner_init = 0; b_c_inner_init < 2; ++b_c_inner_init) {\n    T_batch_matmul_NN_local[b_c_inner_init] = 0.000000e+00f;\n  }\n  for (int ax0_ax1_fused_ax2_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_outer_outer < 2; ++ax0_ax1_fused_ax2_fused_outer_outer) {\n    if (((ax0_ax1_fused_ax2_fused_outer_outer * 4) + (((int)threadIdx.x) / 10)) < 5) {\n      ph_6_shared[((ax0_ax1_fused_ax2_fused_outer_outer * 40) + ((int)threadIdx.x))] = ph_6[(((((int)blockIdx.x) * 50) + (ax0_ax1_fused_ax2_fused_outer_outer * 40)) + ((int)threadIdx.x))];\n    }\n  }\n  __syncthreads();\n  for (int k_inner = 0; k_inner < 5; ++k_inner) {\n    for (int b_c_inner = 0; b_c_inner < 2; ++b_c_inner) {\n      T_batch_matmul_NN_local[b_c_inner] = (T_batch_matmul_NN_local[b_c_inner] + (ph_0[((((((int)blockIdx.x) * 80) + (b_c_inner * 40)) + ((((int)threadIdx.x) / 5) * 5)) + k_inner)] * ph_6_shared[(((b_c_inner * 25) + (k_inner * 5)) + (((int)threadIdx.x) % 5))]));\n    }\n  }\n  for (int b_inner = 0; b_inner < 2; ++b_inner) {\n    T_batch_matmul_NN[(((((int)blockIdx.x) * 80) + (b_inner * 40)) + ((int)threadIdx.x))] = T_batch_matmul_NN_local[b_inner];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = asinhf(fmodf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))], ceilf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))])));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((20, 8, 8), \"float32\"), compute: T.Buffer((20, 8, 8), \"float32\"), T_batch_matmul_NN: T.Buffer((20, 8, 8), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        auto_scheduler_layout_transform = T.allocate([1280], \"float32\", \"global\")\n        ph_0_1 = T.Buffer((1280,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(1280):\n            compute_1 = T.Buffer((1280,), data=compute.data)\n            compute_1[i0_i1_fused_i2_fused] = T.asinh(T.truncmod(ph_0_1[i0_i1_fused_i2_fused], T.ceil(ph_0_1[i0_i1_fused_i2_fused])))\n        auto_scheduler_layout_transform_1 = T.Buffer((1280,), data=auto_scheduler_layout_transform)\n        for ax0_ax1_fused_ax2_fused in T.parallel(5):\n            for ax4, ax5, ax6, ax7, ax8 in T.grid(4, 2, 8, 2, 2):\n                cse_var_1: T.int32 = ax0_ax1_fused_ax2_fused * 256\n                auto_scheduler_layout_transform_1[cse_var_1 + ax4 * 64 + ax5 * 32 + ax6 * 4 + ax7 * 2 + ax8] = T.atan(ph_0_1[cse_var_1 + ax5 * 128 + ax8 * 64 + ax4 * 16 + ax7 * 8 + ax6])\n        for b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(10):\n            T_batch_matmul_NN_1 = T.Buffer((1280,), data=T_batch_matmul_NN.data)\n            for b_outer_inner_init, i_outer_inner_init, j_outer_inner_init, b_inner_init, i_inner_init in T.grid(2, 2, 8, 2, 2):\n                T_batch_matmul_NN_1[b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5 * 256 + b_outer_inner_init * 128 + b_inner_init * 64 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 5 * 32 + i_outer_inner_init * 16 + i_inner_init * 8 + j_outer_inner_init] = T.float32(0)\n            for k_outer, b_outer_inner, i_outer_inner, j_outer_inner, k_inner, b_inner, i_inner in T.grid(4, 2, 2, 8, 2, 2, 2):\n                cse_var_3: T.int32 = b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5 * 256\n                cse_var_4: T.int32 = cse_var_3 + b_outer_inner * 128 + b_inner * 64 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 5 * 32 + i_outer_inner * 16 + i_inner * 8\n                cse_var_2: T.int32 = cse_var_4 + j_outer_inner\n                T_batch_matmul_NN_1[cse_var_2] = T_batch_matmul_NN_1[cse_var_2] + ph_0_1[cse_var_4 + k_outer * 2 + k_inner] * auto_scheduler_layout_transform_1[cse_var_3 + k_outer * 64 + b_outer_inner * 32 + j_outer_inner * 4 + k_inner * 2 + b_inner]",
        "op_args": [
            [
                "ceil",
                "mod",
                "asinh",
                "atan",
                "batch_matmul"
            ]
        ],
        "input_shape": "[[20, 8, 8]]",
        "output_shape": "[[20, 8, 8], [20, 8, 8]]",
        "deepseek_c": "void default_function_kernel(float* T_batch_matmul_NN, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1280; ++ax0_ax1_fused_ax2_fused) {\n    compute[ax0_ax1_fused_ax2_fused] = asinhf(fmodf(ph_0[ax0_ax1_fused_ax2_fused], ceilf(ph_0[ax0_ax1_fused_ax2_fused])));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1280; ++ax0_ax1_fused_ax2_fused_1) {\n    compute_1[ax0_ax1_fused_ax2_fused_1] = atanf(ph_0[ax0_ax1_fused_ax2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t b_outer_outer_outer = 0; b_outer_outer_outer < 20; ++b_outer_outer_outer) {\n    for (int32_t k_outer_outer_outer = 0; k_outer_outer_outer < 8; ++k_outer_outer_outer) {\n      for (int32_t b_inner_init = 0; b_inner_init < 2; ++b_inner_init) {\n        T_batch_matmul_NN[((((b_outer_outer_outer * 160) + (b_inner_init * 80)) + (k_outer_outer_outer * 10)) + (((int)threadIdx.x) % 5))] = 0.000000e+00f;\n      }\n      for (int32_t k_inner = 0; k_inner < 5; ++k_inner) {\n        for (int32_t b_inner = 0; b_inner < 2; ++b_inner) {\n          T_batch_matmul_NN[((((b_outer_outer_outer * 160) + (b_inner * 80)) + (k_outer_outer_outer * 10)) + (((int)threadIdx.x) % 5))] = (T_batch_matmul_NN[((((b_outer_outer_outer * 160) + (b_inner * 80)) + (k_outer_outer_outer * 10)) + (((int)threadIdx.x) % 5))] + (ph_0[((((b_outer_outer_outer * 128) + (b_inner * 64)) + (k_outer_outer_outer * 8)) + ((((int)threadIdx.x) / 5) * 5)) + k_inner)] * ph_0[((((b_outer_outer_outer * 128) + (b_inner * 64)) + (k_outer_outer_outer * 8)) + ((((int)threadIdx.x) / 5) * 5)) + k_inner]));\n        }\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_batch_matmul_NN, float* compute, float* compute_1, float* ph_0, float* ph_6) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 20; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 8; ++i2) {\n        compute[(((i0 * 64) + (i1 * 8)) + i2)] = asinhf(fmodf(ph_0[(((i0 * 64) + (i1 * 8)) + i2)], ceilf(ph_0[(((i0 * 64) + (i1 * 8)) + i2)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 160; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 8; ++i2_1) {\n      compute_1[((i0_i1_fused * 8) + i2_1)] = atanf(ph_0[((i0_i1_fused * 8) + i2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 160; ++ax0_ax1_fused_ax2_fused) {\n    float T_batch_matmul_NN_local[2];\n    for (int32_t b_c_inner_init = 0; b_c_inner_init < 2; ++b_c_inner_init) {\n      T_batch_matmul_NN_local[b_c_inner_init] = 0.000000e+00f;\n    }\n    for (int32_t k_inner = 0; k_inner < 5; ++k_inner) {\n      for (int32_t b_c_inner = 0; b_c_inner < 2; ++b_c_inner) {\n        T_batch_matmul_NN_local[b_c_inner] = (T_batch_matmul_NN_local[b_c_inner] + (ph_0[((ax0_ax1_fused_ax2_fused * 5) + (b_c_inner * 25)) + k_inner] * ph_6[((b_c_inner * 40) + (k_inner * 8)) + (ax0_ax1_fused_ax2_fused % 8)]));\n      }\n    }\n    for (int32_t b = 0; b < 2; ++b) {\n      T_batch_matmul_NN[((ax0_ax1_fused_ax2_fused * 2) + b)] = T_batch_matmul_NN_local[b];\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_batch_matmul_NN, float* compute, float* compute_1, float* ph_0, float* ph_6) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 160; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(fmodf(ph_0[i0_i1_fused_i2_fused], ceilf(ph_0[i0_i1_fused_i2_fused])));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 160; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = atanf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 160; ++ax0_ax1_fused_ax2_fused) {\n    float T_batch_matmul_NN_local[2];\n    for (int32_t b_c_inner = 0; b_c_inner < 2; ++b_c_inner) {\n      T_batch_matmul_NN_local[b_c_inner] = 0.000000e+00f;\n    }\n    for (int32_t k_inner = 0; k_inner < 5; ++k_inner) {\n      for (int32_t b_c_inner_1 = 0; b_c_inner_1 < 2; ++b_c_inner_1) {\n        T_batch_matmul_NN_local[b_c_inner_1] = (T_batch_matmul_NN_local[b_c_inner_1] + (ph_0[((((b_c_inner_1 * 40) + (ax0_ax1_fused_ax2_fused / 5)) * 5) + k_inner)] * ph_6[(((b_c_inner_1 * 25) + (k_inner * 5)) + (ax0_ax1_fused_ax2_fused % 5))]));\n      }\n    }\n    for (int32_t b_inner = 0; b_inner < 2; ++b_inner) {\n      T_batch_matmul_NN[(((b_inner * 160) + (ax0_ax1_fused_ax2_fused / 5)) * 5) + (ax0_ax1_fused_ax2_fused % 5)] = T_batch_matmul_NN_local[b_inner];\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel_2(float* T_batch_matmul_NN, float* ph_0, float* ph_6) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1280; ++i0_i1_fused_i2_fused) {\n    float T_batch_matmul_NN_local[2] = {0.0f, 0.0f};\n    for (int32_t k_inner = 0; k_inner < 5; ++k_inner) {\n      for (int32_t b_c_inner = 0; b_c_inner < 2; ++b_c_inner) {\n        T_batch_matmul_NN_local[b_c_inner] += ph_0[((i0_i1_fused_i2_fused + (b_c_inner * 40)) + (k_inner * 5))] * ph_6[((i0_i1_fused_i2_fused % 40) + (b_c_inner * 25) + (k_inner * 5))];\n      }\n    }\n    T_batch_matmul_NN[i0_i1_fused_i2_fused] = T_batch_matmul_NN_local[0];\n    T_batch_matmul_NN[i0_i1_fused_i2_fused + 40] = T_batch_matmul_NN_local[1];\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_divide, float* T_subtract, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 117; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      T_divide[((ax0_ax1_fused * 10) + ax2)] = (ph_0[((ax0_ax1_fused * 10) + ax2)] / ph_3[((ax0_ax1_fused * 10) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 117; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      compute[((i0_i1_fused * 10) + i2)] = atanf(ph_0[((i0_i1_fused * 10) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1170; ++ax0_ax1_fused_ax2_fused) {\n    T_subtract[ax0_ax1_fused_ax2_fused] = (cosf(ph_0[ax0_ax1_fused_ax2_fused]) - ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_divide[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] / ph_3[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel_2(float* __restrict__ T_subtract, float* __restrict__ ph_0) {\n  T_subtract[((((int)blockIdx.x) * 18) + ((int)threadIdx.x))] = (__cosf(ph_0[((((int)blockIdx.x) * 18) + ((int)threadIdx.x))]) - ph_0[((((int)blockIdx.x) * 18) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((9, 13, 10), \"float32\"), ph_3: T.Buffer((9, 13, 10), \"float32\"), T_divide: T.Buffer((9, 13, 10), \"float32\"), compute: T.Buffer((9, 13, 10), \"float32\"), T_subtract: T.Buffer((9, 13, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((1170,), data=ph_0.data)\n        for ax0_ax1_fused in T.parallel(117):\n            for ax2 in range(10):\n                cse_var_1: T.int32 = ax0_ax1_fused * 10 + ax2\n                T_divide_1 = T.Buffer((1170,), data=T_divide.data)\n                ph_3_1 = T.Buffer((1170,), data=ph_3.data)\n                T_divide_1[cse_var_1] = ph_0_1[cse_var_1] / ph_3_1[cse_var_1]\n        for i0_i1_fused in T.parallel(117):\n            for i2 in range(10):\n                cse_var_2: T.int32 = i0_i1_fused * 10 + i2\n                compute_1 = T.Buffer((1170,), data=compute.data)\n                compute_1[cse_var_2] = T.atan(ph_0_1[cse_var_2])\n        for ax0_ax1_fused_ax2_fused in T.parallel(1170):\n            T_subtract_1 = T.Buffer((1170,), data=T_subtract.data)\n            T_subtract_1[ax0_ax1_fused_ax2_fused] = T.cos(ph_0_1[ax0_ax1_fused_ax2_fused]) - ph_0_1[ax0_ax1_fused_ax2_fused]",
        "op_args": [
            [
                "divide",
                "atan",
                "cos",
                "subtract"
            ]
        ],
        "input_shape": "[[9, 13, 10], [17, 7, 20], [9, 13, 10]]",
        "output_shape": "[[9, 13, 10], [17, 7, 20], [9, 13, 10], [9, 13, 10]]",
        "deepseek_c": "void default_function_kernel(float* T_divide, float* T_subtract, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1170; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] / ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 13; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 130) + (i1 * 10)) + i2)] = atanf(ph_0[(((i0 * 130) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 9; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 13; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 10; ++i2_1) {\n        T_subtract[(((i0_1 * 130) + (i1_1 * 10)) + i2_1)] = (cosf(ph_0[(((i0_1 * 130) + (i1_1 * 10)) + i2_1)]) - ph_0[(((i0_1 * 130) + (i1_1 * 10)) + i2_1)]);\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_divide, float* T_subtract, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 117; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      T_divide[((ax0_ax1_fused * 10) + ax2)] = (ph_0[((ax0_ax1_fused * 10) + ax2)] / ph_3[((ax0_ax1_fused * 10) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 117; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      compute[((i0_i1_fused * 10) + i2)] = atanf(ph_0[((i0_i1_fused * 10) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1170; ++ax0_ax1_fused_ax2_fused) {\n    T_subtract[ax0_ax1_fused_ax2_fused] = (cosf(ph_0[ax0_ax1_fused_ax2_fused]) - ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_divide, float* T_subtract, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1170; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] / ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1170; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 117; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      T_subtract[((ax0_ax1_fused * 10) + ax2)] = (cosf(ph_0[((ax0_ax1_fused * 10) + ax2)]) - ph_0[((ax0_ax1_fused * 10) + ax2)]);\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* T_divide, float* compute, float* T_subtract, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1170; ++i0_i1_fused_i2_fused) {\n    T_divide[i0_i1_fused_i2_fused] = (ph_0[i0_i1_fused_i2_fused] / ph_3[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1170; ++i0_i1_fused_i2_fused_1) {\n    compute[i0_i1_fused_i2_fused_1] = atanf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 1170; ++i0_i1_fused_i2_fused_2) {\n    T_subtract[i0_i1_fused_i2_fused_2] = (cosf(ph_0[i0_i1_fused_i2_fused_2]) - ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_batch_matmul_NN, float* T_subtract, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3, float* ph_8) {\n  float auto_scheduler_layout_transform[50];\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 750; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 750; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = ceilf(acoshf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax4 = 0; ax4 < 5; ++ax4) {\n      for (int32_t ax8 = 0; ax8 < 5; ++ax8) {\n        auto_scheduler_layout_transform[(((ax0_ax1_fused_ax2_fused * 25) + (ax4 * 5)) + ax8)] = ph_8[(((ax0_ax1_fused_ax2_fused * 25) + (ax8 * 5)) + ax4)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused = 0; b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused < 2; ++b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused) {\n    for (int32_t i_outer_inner_init = 0; i_outer_inner_init < 3; ++i_outer_inner_init) {\n      for (int32_t b_inner_init = 0; b_inner_init < 5; ++b_inner_init) {\n        for (int32_t i_inner_init = 0; i_inner_init < 5; ++i_inner_init) {\n          T_batch_matmul_NN[((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 75) + (b_inner_init * 15)) + (i_outer_inner_init * 5)) + i_inner_init)] = 0.000000e+00f;\n        }\n      }\n    }\n    for (int32_t k_outer = 0; k_outer < 5; ++k_outer) {\n      for (int32_t i_outer_inner = 0; i_outer_inner < 3; ++i_outer_inner) {\n        for (int32_t b_inner = 0; b_inner < 5; ++b_inner) {\n          for (int32_t i_inner = 0; i_inner < 5; ++i_inner) {\n            T_batch_matmul_NN[((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 75) + (b_inner * 15)) + (i_outer_inner * 5)) + i_inner)] = (T_batch_matmul_NN[((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 75) + (b_inner * 15)) + (i_outer_inner * 5)) + i_inner)] + (acoshf(ph_0[(((((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 375) + (b_inner * 75)) + (i_outer_inner * 25)) + (i_inner * 5)) + k_outer)]) * auto_scheduler_layout_transform[(((b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 25) + (k_outer * 5)) + b_inner)]));\n          }\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 750; ++ax0_ax1_fused_ax2_fused_1) {\n    T_subtract[ax0_ax1_fused_ax2_fused_1] = (fmodf(ph_0[ax0_ax1_fused_ax2_fused_1], ph_3[ax0_ax1_fused_ax2_fused_1]) - ph_0[ax0_ax1_fused_ax2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 750; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = acosf(fmodf(ph_0[i0_i1_fused_i2_fused_2], ph_3[i0_i1_fused_i2_fused_2]));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_4(float* __restrict__ compute, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = acosf(fmodf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))], ph_3[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void default_function_kernel_3(float* __restrict__ T_subtract, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_subtract[((int)blockIdx.x)] = (fmodf(ph_0[((int)blockIdx.x)], ph_3[((int)blockIdx.x)]) - ph_0[((int)blockIdx.x)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = ceilf(acoshf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = acoshf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(18) default_function_kernel_2(float* __restrict__ T_batch_matmul_NN, float* __restrict__ ph_0) {\n  float T_batch_matmul_NN_local[32];\n  for (int i_c_outer_inner_init = 0; i_c_outer_inner_init < 4; ++i_c_outer_inner_init) {\n    for (int j_c_outer_inner_init = 0; j_c_outer_inner_init < 4; ++j_c_outer_inner_init) {\n      for (int j_c_inner_init = 0; j_c_inner_init < 2; ++j_c_inner_init) {\n        T_batch_matmul_NN_local[(((i_c_outer_inner_init * 8) + (j_c_outer_inner_init * 2)) + j_c_inner_init)] = 0.000000e+00f;\n      }\n    }\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 2; ++k_outer_outer) {\n    for (int i_c_outer_inner = 0; i_c_outer_inner < 4; ++i_c_outer_inner) {\n      for (int j_c_outer_inner = 0; j_c_outer_inner < 4; ++j_c_outer_inner) {\n        for (int k_inner = 0; k_inner < 4; ++k_inner) {\n          for (int j_c_inner = 0; j_c_inner < 2; ++j_c_inner) {\n            T_batch_matmul_NN_local[(((i_c_outer_inner * 8) + (j_c_outer_inner * 2)) + j_c_inner)] = (T_batch_matmul_NN_local[(((i_c_outer_inner * 8) + (j_c_outer_inner * 2)) + j_c_inner)] + (acoshf(ph_0[((((((int)threadIdx.x) * 32) + (i_c_outer_inner * 8)) + (k_outer_outer * 4)) + k_inner)]) * ph_0[((((((((int)threadIdx.x) >> 1) * 64) + (k_outer_outer * 32)) + (k_inner * 8)) + (j_c_outer_inner * 2)) + j_c_inner)]));\n          }\n        }\n      }\n    }\n  }\n  for (int i_inner = 0; i_inner < 4; ++i_inner) {\n    for (int j_inner = 0; j_inner < 8; ++j_inner) {\n      T_batch_matmul_NN[(((((int)threadIdx.x) * 32) + (i_inner * 8)) + j_inner)] = T_batch_matmul_NN_local[((i_inner * 8) + j_inner)];\n    }\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((10, 15, 5), \"float32\"), ph_3: T.Buffer((10, 15, 5), \"float32\"), ph_8: T.Buffer((10, 5, 1), \"float32\"), compute: T.Buffer((10, 15, 5), \"float32\"), compute_1: T.Buffer((10, 15, 5), \"float32\"), T_batch_matmul_NN: T.Buffer((10, 15, 1), \"float32\"), T_subtract: T.Buffer((10, 15, 5), \"float32\"), compute_2: T.Buffer((10, 15, 5), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        auto_scheduler_layout_transform = T.allocate([50], \"float32\", \"global\")\n        ph_0_1 = T.Buffer((750,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(750):\n            compute_3 = T.Buffer((750,), data=compute.data)\n            compute_3[i0_i1_fused_i2_fused] = T.acosh(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(750):\n            compute_3 = T.Buffer((750,), data=compute_1.data)\n            compute_3[i0_i1_fused_i2_fused] = T.ceil(T.acosh(ph_0_1[i0_i1_fused_i2_fused]))\n        auto_scheduler_layout_transform_1 = T.Buffer((50,), data=auto_scheduler_layout_transform)\n        for ax0_ax1_fused_ax2_fused in T.parallel(2):\n            for ax4, ax8 in T.grid(5, 5):\n                cse_var_1: T.int32 = ax0_ax1_fused_ax2_fused * 25\n                ph_8_1 = T.Buffer((50,), data=ph_8.data)\n                auto_scheduler_layout_transform_1[cse_var_1 + ax4 * 5 + ax8] = ph_8_1[cse_var_1 + ax8 * 5 + ax4]\n        for b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(2):\n            T_batch_matmul_NN_1 = T.Buffer((150,), data=T_batch_matmul_NN.data)\n            for i_outer_inner_init, b_inner_init, i_inner_init in T.grid(3, 5, 5):\n                T_batch_matmul_NN_1[b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 75 + b_inner_init * 15 + i_outer_inner_init * 5 + i_inner_init] = T.float32(0)\n            for k_outer, i_outer_inner, b_inner, i_inner in T.grid(5, 3, 5, 5):\n                cse_var_2: T.int32 = b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 75 + b_inner * 15 + i_outer_inner * 5 + i_inner\n                T_batch_matmul_NN_1[cse_var_2] = T_batch_matmul_NN_1[cse_var_2] + T.acosh(ph_0_1[b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 375 + b_inner * 75 + i_outer_inner * 25 + i_inner * 5 + k_outer]) * auto_scheduler_layout_transform_1[b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 25 + k_outer * 5 + b_inner]\n        ph_3_1 = T.Buffer((750,), data=ph_3.data)\n        for ax0_ax1_fused_ax2_fused in T.parallel(750):\n            T_subtract_1 = T.Buffer((750,), data=T_subtract.data)\n            T_subtract_1[ax0_ax1_fused_ax2_fused] = T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], ph_3_1[ax0_ax1_fused_ax2_fused]) - ph_0_1[ax0_ax1_fused_ax2_fused]\n        for i0_i1_fused_i2_fused in T.parallel(750):\n            compute_3 = T.Buffer((750,), data=compute_2.data)\n            compute_3[i0_i1_fused_i2_fused] = T.acos(T.truncmod(ph_0_1[i0_i1_fused_i2_fused], ph_3_1[i0_i1_fused_i2_fused]))",
        "op_args": [
            [
                "mod",
                "acosh",
                "acosh",
                "ceil",
                "batch_matmul",
                "subtract",
                "acos"
            ]
        ],
        "input_shape": "[[10, 15, 5], [10, 20, 3], [10, 15, 5], [10, 5, 1]]",
        "output_shape": "[[10, 20, 3], [10, 15, 5], [10, 15, 5], [10, 15, 1], [10, 15, 5], [10, 15, 5]]",
        "deepseek_c": "void default_function_kernel_3(float* __restrict__ T_subtract, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_subtract[((int)blockIdx.x)] = (fmodf(ph_0[((int)blockIdx.x)], ph_3[((int)blockIdx.x)]) - ph_0[((int)blockIdx.x)]);\n}",
        "starcoder_c": "void default_function_kernel_3(float* __restrict__ T_subtract, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_subtract[((int)blockIdx.x)] = (fmodf(ph_0[((int)blockIdx.x)], ph_3[((int)blockIdx.x)]) - ph_0[((int)blockIdx.x)]);\n}",
        "codellama_c": "void default_function_kernel_3(float* __restrict__ T_subtract, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_subtract[((int)blockIdx.x)] = (fmodf(ph_0[((int)blockIdx.x)], ph_3[((int)blockIdx.x)]) - ph_0[((int)blockIdx.x)]);\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* compute_4, float* T_subtract, float* ph_0, float* ph_3, float* T_batch_matmul_NN) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 750; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(fmodf(ph_0[i0_i1_fused_i2_fused], ph_3[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    T_subtract[i0] = (fmodf(ph_0[i0], ph_3[i0]) - ph_0[i0]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 750; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = ceilf(acoshf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 750; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = acoshf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 15; ++i1) {\n      for (int32_t i2 = 0; i2 < 5; ++i2) {\n        float T_batch_matmul_NN_local[32] = {0.0f};\n        for (int k_outer_outer = 0; k_outer_outer < 2; ++k_outer_outer) {\n          for (int i_c_outer_inner = 0; i_c_outer_inner < 4; ++i_c_outer_inner) {\n            for (int j_c_outer_inner = 0; j_c_outer_inner < 4; ++j_c_outer_inner) {\n              for (int k_inner = 0; k_inner < 4; ++k_inner) {\n                for (int j_c_inner = 0; j_c_inner < 2; ++j_c_inner) {\n                  T_batch_matmul_NN_local[(((i_c_outer_inner * 8) + (j_c_outer_inner * 2)) + j_c_inner)] = (T_batch_matmul_NN_local[(((i_c_outer_inner * 8) + (j_c_outer_inner * 2)) + j_c_inner)] + (acoshf(ph_0[((((((i0 * 150) + (i1 * 5)) + i2) * 32) + (i_c_outer_inner * 8)) + (k_outer_outer * 4)) + k_inner)]) * ph_0[((((((((i0 * 150) + (i1 * 5)) + i2) >> 1) * 64) + (k_outer_outer * 32)) + (k_inner * 8)) + (j_c_outer_inner * 2)) + j_c_inner)]));\n                }\n              }\n            }\n          }\n        }\n        for (int i_inner = 0; i_inner < 4; ++i_inner) {\n          for (int j_inner = 0; j_inner < 8; ++j_inner) {\n            T_batch_matmul_NN[(((((i0 * 150) + (i1 * 5)) + i2) * 32) + (i_inner * 8)) + j_inner)] = T_batch_matmul_NN_local[((i_inner * 8) + j_inner)];\n          }\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 750; ++i0_i1_fused_i2_fused_3) {\n    compute_3[i0_i1_fused_i2_fused_3] = acoshf(ph_0[i0_i1_fused_i2_fused_3]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_4 = 0; i0_i1_fused_i2_fused_4 < 750; ++i0_i1_fused_i2_fused_4) {\n    compute_4[i0_i1_fused_i2_fused_4] = acoshf(ph_0[i0_i1_fused_i2_fused_4]);\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 88; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      compute[((i0_i1_fused * 3) + i2)] = expf((ph_0[((i0_i1_fused * 3) + i2)] * asinhf(ph_0[((i0_i1_fused * 3) + i2)])));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(9) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))] = __expf((ph_0[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))] * asinhf(ph_0[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))])));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((11, 8, 3), \"float32\"), compute: T.Buffer((11, 8, 3), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(88):\n            for i2 in range(3):\n                cse_var_1: T.int32 = i0_i1_fused * 3 + i2\n                compute_1 = T.Buffer((264,), data=compute.data)\n                ph_0_1 = T.Buffer((264,), data=ph_0.data)\n                compute_1[cse_var_1] = T.exp(ph_0_1[cse_var_1] * T.asinh(ph_0_1[cse_var_1]))",
        "op_args": [
            [
                "asinh",
                "multiply",
                "exp"
            ]
        ],
        "input_shape": "[[11, 8, 3]]",
        "output_shape": "[[11, 8, 3]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* ph_0) {\n  for (int32_t i = 0; i < 11; ++i) {\n    for (int32_t j = 0; j < 8; ++j) {\n      for (int32_t k = 0; k < 3; ++k) {\n        compute[(((i * 24) + (j * 3)) + k)] = expf((ph_0[(((i * 24) + (j * 3)) + k)] * asinhf(ph_0[(((i * 24) + (j * 3)) + k)])));\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 264; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = expf((ph_0[i0_i1_fused_i2_fused] * asinhf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 264; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = expf((ph_0[i0_i1_fused_i2_fused] * asinhf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 264; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused] * asinhf(ph_0[i0_i1_fused_i2_fused]));\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 27; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      compute[((i0_i1_fused * 3) + i2)] = acoshf(ph_0[((i0_i1_fused * 3) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0 = 0; ax0 < 3; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n        T_add[(((ax0 * 27) + (ax1 * 3)) + ax2)] = (ceilf(ph_0[(((ax0 * 27) + (ax1 * 3)) + ax2)]) + ph_0[(((ax0 * 27) + (ax1 * 3)) + ax2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 81; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = cosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = acoshf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ T_add, float* __restrict__ ph_0) {\n  T_add[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = (ceilf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]) + ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = __cosf(ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((3, 9, 3), \"float32\"), compute: T.Buffer((3, 9, 3), \"float32\"), T_add: T.Buffer((3, 9, 3), \"float32\"), compute_1: T.Buffer((3, 9, 3), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((81,), data=ph_0.data)\n        for i0_i1_fused in T.parallel(27):\n            for i2 in range(3):\n                cse_var_1: T.int32 = i0_i1_fused * 3 + i2\n                compute_2 = T.Buffer((81,), data=compute.data)\n                compute_2[cse_var_1] = T.acosh(ph_0_1[cse_var_1])\n        for ax0 in T.parallel(3):\n            for ax1, ax2 in T.grid(9, 3):\n                cse_var_2: T.int32 = ax0 * 27 + ax1 * 3 + ax2\n                T_add_1 = T.Buffer((81,), data=T_add.data)\n                T_add_1[cse_var_2] = T.ceil(ph_0_1[cse_var_2]) + ph_0_1[cse_var_2]\n        for i0_i1_fused_i2_fused in T.parallel(81):\n            compute_2 = T.Buffer((81,), data=compute_1.data)\n            compute_2[i0_i1_fused_i2_fused] = T.cos(ph_0_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "acosh",
                "ceil",
                "add",
                "cos"
            ]
        ],
        "input_shape": "[[3, 9, 3]]",
        "output_shape": "[[3, 9, 3], [3, 9, 3], [3, 9, 3]]",
        "deepseek_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        compute[(((i0 * 27) + (i1 * 3)) + i2)] = acoshf(ph_0[(((i0 * 27) + (i1 * 3)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 81; ++i0_i1_fused_i2_fused) {\n    T_add[i0_i1_fused_i2_fused] = (ceilf(ph_0[i0_i1_fused_i2_fused]) + ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 81; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = cosf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 81; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 81; ++ax0_ax1_fused_ax2_fused) {\n    T_add[ax0_ax1_fused_ax2_fused] = (ceilf(ph_0[ax0_ax1_fused_ax2_fused]) + ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 27; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 3; ++i2) {\n      compute_1[((i0_i1_fused * 3) + i2)] = cosf(ph_0[((i0_i1_fused * 3) + i2)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 27; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 27; ++ax0_ax1_fused) {\n    T_add[ax0_ax1_fused] = (ceilf(ph_0[ax0_ax1_fused]) + ph_0[ax0_ax1_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 27; ++i0_i1_fused) {\n    compute_1[i0_i1_fused] = cosf(ph_0[i0_i1_fused]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 81; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 81; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = (ceilf(ph_0[i0_i1_fused_i2_fused_1]) + ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      for (int32_t i2 = 0; i2 < 3; ++i2) {\n        compute_2[(((i0 * 27) + (i1 * 3)) + i2)] = cosf(ph_0[(((i0 * 27) + (i1 * 3)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 4845; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 4845; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = asinhf(cosf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 4845; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = sinf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 19; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 15; ++i2) {\n        compute_3[(((i0 * 255) + (i1 * 15)) + i2)] = atanf(ph_0[(((i0 * 255) + (i1 * 15)) + i2)]);\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = acosf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = asinhf(__cosf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = __sinf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((19, 17, 15), \"float32\"), compute: T.Buffer((19, 17, 15), \"float32\"), compute_1: T.Buffer((19, 17, 15), \"float32\"), compute_2: T.Buffer((19, 17, 15), \"float32\"), compute_3: T.Buffer((19, 17, 15), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((4845,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(4845):\n            compute_4 = T.Buffer((4845,), data=compute.data)\n            compute_4[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(4845):\n            compute_4 = T.Buffer((4845,), data=compute_1.data)\n            compute_4[i0_i1_fused_i2_fused] = T.asinh(T.cos(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused_i2_fused in T.parallel(4845):\n            compute_4 = T.Buffer((4845,), data=compute_2.data)\n            compute_4[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])\n        for i0 in T.parallel(19):\n            for i1, i2 in T.grid(17, 15):\n                cse_var_1: T.int32 = i0 * 255 + i1 * 15 + i2\n                compute_4 = T.Buffer((4845,), data=compute_3.data)\n                compute_4[cse_var_1] = T.atan(ph_0_1[cse_var_1])",
        "op_args": [
            [
                "acos",
                "cos",
                "asinh",
                "sin",
                "atan"
            ]
        ],
        "input_shape": "[[19, 17, 15]]",
        "output_shape": "[[19, 17, 15], [19, 17, 15], [19, 17, 15], [19, 17, 15]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  for (int k0 = 0; k0 < 19; ++k0) {\n    for (int k1 = 0; k1 < 17; ++k1) {\n      for (int k2 = 0; k2 < 15; ++k2) {\n        compute[(((k0 * 255) + (k1 * 15)) + k2)] = acosf(ph_0[(((k0 * 255) + (k1 * 15)) + k2)]);\n      }\n    }\n  }\n  for (int k0_1 = 0; k0_1 < 19; ++k0_1) {\n    for (int k1_1 = 0; k1_1 < 17; ++k1_1) {\n      for (int k2_1 = 0; k2_1 < 15; ++k2_1) {\n        compute_1[(((k0_1 * 255) + (k1_1 * 15)) + k2_1)] = asinhf(cosf(ph_0[(((k0_1 * 255) + (k1_1 * 15)) + k2_1)]));\n      }\n    }\n  }\n  for (int k0_2 = 0; k0_2 < 19; ++k0_2) {\n    for (int k1_2 = 0; k1_2 < 17; ++k1_2) {\n      for (int k2_2 = 0; k2_2 < 15; ++k2_2) {\n        compute_2[(((k0_2 * 255) + (k1_2 * 15)) + k2_2)] = sinf(ph_0[(((k0_2 * 255) + (k1_2 * 15)) + k2_2)]);\n      }\n    }\n  }\n  for (int k0_3 = 0; k0_3 < 19; ++k0_3) {\n    for (int k1_3 = 0; k1_3 < 17; ++k1_3) {\n      for (int k2_3 = 0; k2_3 < 15; ++k2_3) {\n        compute_3[(((k0_3 * 255) + (k1_3 * 15)) + k2_3)] = atanf(ph_0[(((k0_3 * 255) + (k1_3 * 15)) + k2_3)]);\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 19; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 15; ++i2) {\n        compute[(((i0 * 255) + (i1 * 15)) + i2)] = acosf(ph_0[(((i0 * 255) + (i1 * 15)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 4653; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = asinhf(cosf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 4653; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = sinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 323; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 15; ++i2_1) {\n      compute_3[((i0_i1_fused * 15) + i2_1)] = atanf(ph_0[((i0_i1_fused * 15) + i2_1)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 3855; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 323; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 15; ++i2) {\n      compute_1[((i0_i1_fused * 15) + i2)] = asinhf(cosf(ph_0[((i0_i1_fused * 15) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 3855; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = sinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 3855; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = atanf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 4845; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 4845; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = asinhf(cosf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 4845; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = sinf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 19; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 15; ++i2) {\n        compute_3[(((i0 * 255) + (i1 * 15)) + i2)] = atanf(ph_0[(((i0 * 255) + (i1 * 15)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2142; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 238; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute_1[((i0_i1_fused * 9) + i2)] = ceilf(acosf(ph_0[((i0_i1_fused * 9) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 14; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2_1 = 0; i2_1 < 9; ++i2_1) {\n        compute_2[(((i0 * 153) + (i1 * 9)) + i2_1)] = sinf(ph_0[(((i0 * 153) + (i1 * 9)) + i2_1)]);\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = __sinf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(9) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))] = ceilf(acosf(ph_0[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = asinhf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((14, 17, 9), \"float32\"), compute: T.Buffer((14, 17, 9), \"float32\"), compute_1: T.Buffer((14, 17, 9), \"float32\"), compute_2: T.Buffer((14, 17, 9), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((2142,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(2142):\n            compute_3 = T.Buffer((2142,), data=compute.data)\n            compute_3[i0_i1_fused_i2_fused] = T.asinh(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused in T.parallel(238):\n            for i2 in range(9):\n                cse_var_1: T.int32 = i0_i1_fused * 9 + i2\n                compute_3 = T.Buffer((2142,), data=compute_1.data)\n                compute_3[cse_var_1] = T.ceil(T.acos(ph_0_1[cse_var_1]))\n        for i0 in T.parallel(14):\n            for i1, i2 in T.grid(17, 9):\n                cse_var_2: T.int32 = i0 * 153 + i1 * 9 + i2\n                compute_3 = T.Buffer((2142,), data=compute_2.data)\n                compute_3[cse_var_2] = T.sin(ph_0_1[cse_var_2])",
        "op_args": [
            [
                "asinh",
                "acos",
                "ceil",
                "sin"
            ]
        ],
        "input_shape": "[[14, 17, 9]]",
        "output_shape": "[[14, 17, 9], [14, 17, 9], [14, 17, 9]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 14; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 153) + (i1 * 9)) + i2)] = asinhf(ph_0[(((i0 * 153) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 238; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute_1[((i0_i1_fused * 9) + i2)] = ceilf(acosf(ph_0[((i0_i1_fused * 9) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2142; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = sinf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2142; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 238; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute_1[((i0_i1_fused * 9) + i2)] = ceilf(acosf(ph_0[((i0_i1_fused * 9) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2142; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = sinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2438; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2438; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = ceilf(acosf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 252; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute_2[((i0_i1_fused * 9) + i2)] = sinf(ph_0[((i0_i1_fused * 9) + i2)]);\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2142; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = sinf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2142; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = ceilf(acosf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 14; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 153) + (i1 * 9)) + i2)] = asinhf(ph_0[(((i0 * 153) + (i1 * 9)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2565; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] / ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 285; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute[((i0_i1_fused * 9) + i2)] = asinhf((ph_0[((i0_i1_fused * 9) + i2)] * (ph_0[((i0_i1_fused * 9) + i2)] - ph_3[((i0_i1_fused * 9) + i2)])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2565; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] * (ph_0[i0_i1_fused_i2_fused] - ph_3[i0_i1_fused_i2_fused])));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) < 9) {\n    T_divide[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] / ph_3[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = asinhf((ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] * (ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] - ph_3[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))])));\n}\n\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  compute[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))] = atanhf((ph_0[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))] * (ph_0[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))] - ph_3[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))])));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((19, 15, 9), \"float32\"), ph_3: T.Buffer((19, 15, 9), \"float32\"), T_divide: T.Buffer((19, 15, 9), \"float32\"), compute: T.Buffer((19, 15, 9), \"float32\"), compute_1: T.Buffer((19, 15, 9), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((2565,), data=ph_0.data)\n        ph_3_1 = T.Buffer((2565,), data=ph_3.data)\n        for ax0_ax1_fused_ax2_fused in T.parallel(2565):\n            T_divide_1 = T.Buffer((2565,), data=T_divide.data)\n            T_divide_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / ph_3_1[ax0_ax1_fused_ax2_fused]\n        for i0_i1_fused in T.parallel(285):\n            for i2 in range(9):\n                cse_var_1: T.int32 = i0_i1_fused * 9 + i2\n                compute_2 = T.Buffer((2565,), data=compute.data)\n                compute_2[cse_var_1] = T.asinh(ph_0_1[cse_var_1] * (ph_0_1[cse_var_1] - ph_3_1[cse_var_1]))\n        for i0_i1_fused_i2_fused in T.parallel(2565):\n            compute_2 = T.Buffer((2565,), data=compute_1.data)\n            compute_2[i0_i1_fused_i2_fused] = T.atanh(ph_0_1[i0_i1_fused_i2_fused] * (ph_0_1[i0_i1_fused_i2_fused] - ph_3_1[i0_i1_fused_i2_fused]))",
        "op_args": [
            [
                "divide",
                "subtract",
                "multiply",
                "asinh",
                "atanh"
            ]
        ],
        "input_shape": "[[19, 15, 9], [19, 12, 17], [19, 15, 9]]",
        "output_shape": "[[19, 15, 9], [19, 12, 17], [19, 15, 9], [19, 15, 9]]",
        "deepseek_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2565; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] / ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  for (int32_t i0 = 0; i0 < 19; ++i0) {\n    for (int32_t i1 = 0; i1 < 15; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute[(((i0 * 135) + (i1 * 9)) + i2)] = asinhf((ph_0[(((i0 * 135) + (i1 * 9)) + i2)] * (ph_0[(((i0 * 135) + (i1 * 9)) + i2)] - ph_3[(((i0 * 135) + (i1 * 9)) + i2)])));\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 19; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 15; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 9; ++i2_1) {\n        compute_1[(((i0_1 * 135) + (i1_1 * 9)) + i2_1)] = atanhf((ph_0[(((i0_1 * 135) + (i1_1 * 9)) + i2_1)] * (ph_0[(((i0_1 * 135) + (i1_1 * 9)) + i2_1)] - ph_3[(((i0_1 * 135) + (i1_1 * 9)) + i2_1)])));\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 285; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n      T_divide[((ax0_ax1_fused * 9) + ax2)] = (ph_0[((ax0_ax1_fused * 9) + ax2)] / ph_3[((ax0_ax1_fused * 9) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 285; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      compute[((i0_i1_fused * 9) + i2)] = asinhf((ph_0[((i0_i1_fused * 9) + i2)] * (ph_0[((i0_i1_fused * 9) + i2)] - ph_3[((i0_i1_fused * 9) + i2)])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2565; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] * (ph_0[i0_i1_fused_i2_fused] - ph_3[i0_i1_fused_i2_fused])));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 285; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] / ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 285; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf((ph_0[i0_i1_fused_i2_fused] * (ph_0[i0_i1_fused_i2_fused] - ph_3[i0_i1_fused_i2_fused])));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 285; ++i0_i1_fused) {\n    compute_1[i0_i1_fused] = atanhf((ph_0[i0_i1_fused] * (ph_0[i0_i1_fused] - ph_3[i0_i1_fused])));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2565; ++i0_i1_fused_i2_fused) {\n    if (i0_i1_fused_i2_fused < 9) {\n      T_divide[i0_i1_fused_i2_fused] = (ph_0[i0_i1_fused_i2_fused] / ph_3[i0_i1_fused_i2_fused]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2565; ++i0_i1_fused_i2_fused_1) {\n    compute[i0_i1_fused_i2_fused_1] = asinhf((ph_0[i0_i1_fused_i2_fused_1] * (ph_0[i0_i1_fused_i2_fused_1] - ph_3[i0_i1_fused_i2_fused_1])));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 19; ++i0) {\n    for (int32_t i1 = 0; i1 < 15; ++i1) {\n      for (int32_t i2 = 0; i2 < 9; ++i2) {\n        compute_1[(((i0 * 255) + (i1 * 9)) + i2)] = atanhf((ph_0[(((i0 * 255) + (i1 * 9)) + i2)] * (ph_0[(((i0 * 255) + (i1 * 9)) + i2)] - ph_3[(((i0 * 255) + (i1 * 9)) + i2)])));\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 18; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 180) + (i1 * 10)) + i2)] = asinhf(ph_0[(((i0 * 180) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2880; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = cosf(atanf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2880; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 288; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 10; ++i2_1) {\n      compute_3[((i0_i1_fused * 10) + i2_1)] = acoshf(ph_0[((i0_i1_fused * 10) + i2_1)]);\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = acoshf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = asinhf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = __cosf(atanf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = asinhf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((16, 18, 10), \"float32\"), compute: T.Buffer((16, 18, 10), \"float32\"), compute_1: T.Buffer((16, 18, 10), \"float32\"), compute_2: T.Buffer((16, 18, 10), \"float32\"), compute_3: T.Buffer((16, 18, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((2880,), data=ph_0.data)\n        for i0 in T.parallel(16):\n            for i1, i2 in T.grid(18, 10):\n                cse_var_1: T.int32 = i0 * 180 + i1 * 10 + i2\n                compute_4 = T.Buffer((2880,), data=compute.data)\n                compute_4[cse_var_1] = T.asinh(ph_0_1[cse_var_1])\n        for i0_i1_fused_i2_fused in T.parallel(2880):\n            compute_4 = T.Buffer((2880,), data=compute_1.data)\n            compute_4[i0_i1_fused_i2_fused] = T.cos(T.atan(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused_i2_fused in T.parallel(2880):\n            compute_4 = T.Buffer((2880,), data=compute_2.data)\n            compute_4[i0_i1_fused_i2_fused] = T.asinh(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused in T.parallel(288):\n            for i2 in range(10):\n                cse_var_2: T.int32 = i0_i1_fused * 10 + i2\n                compute_4 = T.Buffer((2880,), data=compute_3.data)\n                compute_4[cse_var_2] = T.acosh(ph_0_1[cse_var_2])",
        "op_args": [
            [
                "asinh",
                "atan",
                "cos",
                "asinh",
                "acosh"
            ]
        ],
        "input_shape": "[[16, 18, 10]]",
        "output_shape": "[[16, 18, 10], [16, 18, 10], [16, 18, 10], [16, 18, 10]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 18; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        compute[(((i0 * 180) + (i1 * 10)) + i2)] = asinhf(ph_0[(((i0 * 180) + (i1 * 10)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 288; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      compute_1[((i0_i1_fused * 10) + i2)] = cosf(atanf(ph_0[((i0_i1_fused * 10) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2880; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2880; ++i0_i1_fused_i2_fused_1) {\n    compute_3[i0_i1_fused_i2_fused_1] = acoshf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2880; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 288; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      compute_1[((i0_i1_fused * 10) + i2)] = cosf(atanf(ph_0[((i0_i1_fused * 10) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2880; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2880; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = acoshf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2880; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 288; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      compute_1[((i0_i1_fused * 10) + i2)] = cosf(atanf(ph_0[((i0_i1_fused * 10) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2880; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2880; ++i0_i1_fused_i2_fused_2) {\n    compute_3[i0_i1_fused_i2_fused_2] = acoshf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2880; ++i0_i1_fused_i2_fused) {\n    compute_3[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2880; ++i0_i1_fused_i2_fused_1) {\n    compute[i0_i1_fused_i2_fused_1] = asinhf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2880; ++i0_i1_fused_i2_fused_2) {\n    compute_1[i0_i1_fused_i2_fused_2] = cosf(atanf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 2880; ++i0_i1_fused_i2_fused_3) {\n    compute_2[i0_i1_fused_i2_fused_3] = asinhf(ph_0[i0_i1_fused_i2_fused_3]);\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 176; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] / cosf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 6) + ((int)threadIdx.x))] = atanhf((ph_0[((((int)blockIdx.x) * 6) + ((int)threadIdx.x))] / __cosf(ph_0[((((int)blockIdx.x) * 6) + ((int)threadIdx.x))])));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((11, 2, 8), \"float32\"), compute: T.Buffer((11, 2, 8), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused_i2_fused in T.parallel(176):\n            compute_1 = T.Buffer((176,), data=compute.data)\n            ph_0_1 = T.Buffer((176,), data=ph_0.data)\n            compute_1[i0_i1_fused_i2_fused] = T.atanh(ph_0_1[i0_i1_fused_i2_fused] / T.cos(ph_0_1[i0_i1_fused_i2_fused]))",
        "op_args": [
            [
                "cos",
                "divide",
                "atanh"
            ]
        ],
        "input_shape": "[[11, 2, 8]]",
        "output_shape": "[[11, 2, 8]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* ph_0) {\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 176; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] / cosf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 176; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] / cosf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 176; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] / cosf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 176; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] / cosf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 4; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 19; ++i2) {\n      compute[((i0_i1_fused * 19) + i2)] = sinf(ph_0[((i0_i1_fused * 19) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i2_1 = 0; i2_1 < 19; ++i2_1) {\n      compute_1[((i0 * 19) + i2_1)] = atanf(asinhf(ph_0[((i0 * 19) + i2_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 76; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = asinhf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = __sinf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = atanf(asinhf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((4, 1, 19), \"float32\"), compute: T.Buffer((4, 1, 19), \"float32\"), compute_1: T.Buffer((4, 1, 19), \"float32\"), compute_2: T.Buffer((4, 1, 19), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((76,), data=ph_0.data)\n        for i0_i1_fused in T.parallel(4):\n            for i2 in range(19):\n                cse_var_1: T.int32 = i0_i1_fused * 19 + i2\n                compute_3 = T.Buffer((76,), data=compute.data)\n                compute_3[cse_var_1] = T.sin(ph_0_1[cse_var_1])\n        for i0 in T.parallel(4):\n            for i2 in range(19):\n                cse_var_2: T.int32 = i0 * 19 + i2\n                compute_3 = T.Buffer((76,), data=compute_1.data)\n                compute_3[cse_var_2] = T.atan(T.asinh(ph_0_1[cse_var_2]))\n        for i0_i1_fused_i2_fused in T.parallel(76):\n            compute_3 = T.Buffer((76,), data=compute_2.data)\n            compute_3[i0_i1_fused_i2_fused] = T.asinh(ph_0_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "sin",
                "asinh",
                "atan",
                "asinh"
            ]
        ],
        "input_shape": "[[4, 1, 19]]",
        "output_shape": "[[4, 1, 19], [4, 1, 19], [4, 1, 19]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 1; ++i1) {\n      for (int32_t i2 = 0; i2 < 19; ++i2) {\n        compute[(((i0 * 19) + i1) + i2)] = sinf(ph_0[(((i0 * 19) + i1) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 4; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 19; ++i2_1) {\n      compute_1[((i0_i1_fused * 19) + i2_1)] = atanf(asinhf(ph_0[((i0_i1_fused * 19) + i2_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 76; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 76; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = sinf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 4; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 19; ++i2) {\n      compute_1[((i0_i1_fused * 19) + i2)] = atanf(asinhf(ph_0[((i0_i1_fused * 19) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 76; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 76; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = sinf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 4; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 19; ++i2) {\n      compute_1[((i0_i1_fused * 19) + i2)] = atanf(asinhf(ph_0[((i0_i1_fused * 19) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 76; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 76; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 76; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = sinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i2 = 0; i2 < 19; ++i2) {\n      compute_2[((i0 * 19) + i2)] = atanf(asinhf(ph_0[((i0 * 19) + i2)]));\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_mod, float* T_subtract, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0 = 0; ax0 < 20; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 14; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n        T_subtract[(((ax0 * 56) + (ax1 * 4)) + ax2)] = (ph_0[(((ax0 * 56) + (ax1 * 4)) + ax2)] - ph_3[(((ax0 * 56) + (ax1 * 4)) + ax2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1120; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1120; ++ax0_ax1_fused_ax2_fused) {\n    T_mod[ax0_ax1_fused_ax2_fused] = fmodf(ceilf(ph_0[ax0_ax1_fused_ax2_fused]), ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 20; ++i0) {\n    for (int32_t i1 = 0; i1 < 14; ++i1) {\n      for (int32_t i2 = 0; i2 < 4; ++i2) {\n        compute_1[(((i0 * 56) + (i1 * 4)) + i2)] = ceilf(ceilf(ph_0[(((i0 * 56) + (i1 * 4)) + i2)]));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ T_mod, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    T_mod[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fmodf(ceilf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]), ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = ceilf(ceilf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel(float* __restrict__ T_subtract, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_subtract[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] - ph_3[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = acosf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((20, 14, 4), \"float32\"), ph_3: T.Buffer((20, 14, 4), \"float32\"), T_subtract: T.Buffer((20, 14, 4), \"float32\"), compute: T.Buffer((20, 14, 4), \"float32\"), T_mod: T.Buffer((20, 14, 4), \"float32\"), compute_1: T.Buffer((20, 14, 4), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((1120,), data=ph_0.data)\n        for ax0 in T.parallel(20):\n            for ax1, ax2 in T.grid(14, 4):\n                cse_var_1: T.int32 = ax0 * 56 + ax1 * 4 + ax2\n                T_subtract_1 = T.Buffer((1120,), data=T_subtract.data)\n                ph_3_1 = T.Buffer((1120,), data=ph_3.data)\n                T_subtract_1[cse_var_1] = ph_0_1[cse_var_1] - ph_3_1[cse_var_1]\n        for i0_i1_fused_i2_fused in T.parallel(1120):\n            compute_2 = T.Buffer((1120,), data=compute.data)\n            compute_2[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused])\n        for ax0_ax1_fused_ax2_fused in T.parallel(1120):\n            T_mod_1 = T.Buffer((1120,), data=T_mod.data)\n            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(T.ceil(ph_0_1[ax0_ax1_fused_ax2_fused]), ph_0_1[ax0_ax1_fused_ax2_fused])\n        for i0 in T.parallel(20):\n            for i1, i2 in T.grid(14, 4):\n                cse_var_2: T.int32 = i0 * 56 + i1 * 4 + i2\n                compute_2 = T.Buffer((1120,), data=compute_1.data)\n                compute_2[cse_var_2] = T.ceil(T.ceil(ph_0_1[cse_var_2]))",
        "op_args": [
            [
                "subtract",
                "acos",
                "ceil",
                "mod",
                "ceil"
            ]
        ],
        "input_shape": "[[20, 14, 4], [12, 10, 16], [20, 14, 4]]",
        "output_shape": "[[20, 14, 4], [12, 10, 16], [20, 14, 4], [20, 14, 4], [20, 14, 4]]",
        "deepseek_c": "void default_function_kernel(float* T_subtract, float* T_mod, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1120; ++ax0_ax1_fused_ax2_fused) {\n    T_subtract[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] - ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1120; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1120; ++i0_i1_fused_i2_fused_1) {\n    T_mod[i0_i1_fused_i2_fused_1] = fmodf(ceilf(ph_0[i0_i1_fused_i2_fused_1]), ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 1120; ++i0_i1_fused_i2_fused_2) {\n    compute_1[i0_i1_fused_i2_fused_2] = ceilf(ceilf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_mod, float* T_subtract, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 280; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n      T_subtract[((ax0_ax1_fused * 4) + ax2)] = (ph_0[((ax0_ax1_fused * 4) + ax2)] - ph_3[((ax0_ax1_fused * 4) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 280; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 4; ++i2) {\n      compute[((i0_i1_fused * 4) + i2)] = acosf(ph_0[((i0_i1_fused * 4) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 280; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 4; ++ax2_1) {\n      T_mod[((ax0_ax1_fused_1 * 4) + ax2_1)] = fmodf(ceilf(ph_0[((ax0_ax1_fused_1 * 4) + ax2_1)]), ph_0[((ax0_ax1_fused_1 * 4) + ax2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1120; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = ceilf(ceilf(ph_0[i0_i1_fused_i2_fused]));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_mod, float* T_subtract, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 880; ++ax0_ax1_fused_ax2_fused) {\n    T_subtract[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] - ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 880; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 880; ++ax0_ax1_fused_ax2_fused_1) {\n    T_mod[ax0_ax1_fused_ax2_fused_1] = fmodf(ceilf(ph_0[ax0_ax1_fused_ax2_fused_1]), ph_0[ax0_ax1_fused_ax2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 280; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 4; ++i2) {\n      compute_1[((i0_i1_fused * 4) + i2)] = ceilf(ceilf(ph_0[((i0_i1_fused * 4) + i2)]));\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* T_subtract, float* T_mod, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1120; ++i0_i1_fused_i2_fused) {\n    T_subtract[i0_i1_fused_i2_fused] = (ph_0[i0_i1_fused_i2_fused] - ph_3[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1120; ++i0_i1_fused_i2_fused_1) {\n    if ((i0_i1_fused_i2_fused_1 < 32) || (i0_i1_fused_i2_fused_1 >= 1088)) {\n      T_mod[i0_i1_fused_i2_fused_1] = fmodf(ceilf(ph_0[i0_i1_fused_i2_fused_1]), ph_0[i0_i1_fused_i2_fused_1]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 1120; ++i0_i1_fused_i2_fused_2) {\n    if ((i0_i1_fused_i2_fused_2 < 32) || (i0_i1_fused_i2_fused_2 >= 1088)) {\n      compute[i0_i1_fused_i2_fused_2] = ceilf(ceilf(ph_0[i0_i1_fused_i2_fused_2]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 1120; ++i0_i1_fused_i2_fused_3) {\n    if ((i0_i1_fused_i2_fused_3 < 32) || (i0_i1_fused_i2_fused_3 >= 1088)) {\n      compute_1[i0_i1_fused_i2_fused_3] = acosf(ph_0[i0_i1_fused_i2_fused_3]);\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_mod, float* T_subtract, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 304; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      T_subtract[((ax0_ax1_fused * 8) + ax2)] = (ph_0[((ax0_ax1_fused * 8) + ax2)] - ph_3[((ax0_ax1_fused * 8) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 304; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 8; ++ax2_1) {\n      T_mod[((ax0_ax1_fused_1 * 8) + ax2_1)] = fmodf((ph_0[((ax0_ax1_fused_1 * 8) + ax2_1)] * (ph_0[((ax0_ax1_fused_1 * 8) + ax2_1)] * ph_3[((ax0_ax1_fused_1 * 8) + ax2_1)])), ph_0[((ax0_ax1_fused_1 * 8) + ax2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2432; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf((ph_0[i0_i1_fused_i2_fused] * (ph_0[i0_i1_fused_i2_fused] * ph_3[i0_i1_fused_i2_fused])));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = ceilf((ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] * (ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] * ph_3[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))])));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_subtract, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  if (((((int)blockIdx.x) * 2) + (((int)threadIdx.x) >> 3)) < 9) {\n    T_subtract[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] - ph_3[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_1(float* __restrict__ T_mod, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_mod[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = fmodf((ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] * (ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] * ph_3[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))])), ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((16, 19, 8), \"float32\"), ph_3: T.Buffer((16, 19, 8), \"float32\"), T_subtract: T.Buffer((16, 19, 8), \"float32\"), T_mod: T.Buffer((16, 19, 8), \"float32\"), compute: T.Buffer((16, 19, 8), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((2432,), data=ph_0.data)\n        ph_3_1 = T.Buffer((2432,), data=ph_3.data)\n        for ax0_ax1_fused in T.parallel(304):\n            for ax2 in range(8):\n                cse_var_1: T.int32 = ax0_ax1_fused * 8 + ax2\n                T_subtract_1 = T.Buffer((2432,), data=T_subtract.data)\n                T_subtract_1[cse_var_1] = ph_0_1[cse_var_1] - ph_3_1[cse_var_1]\n        for ax0_ax1_fused in T.parallel(304):\n            for ax2 in range(8):\n                cse_var_2: T.int32 = ax0_ax1_fused * 8 + ax2\n                T_mod_1 = T.Buffer((2432,), data=T_mod.data)\n                T_mod_1[cse_var_2] = T.truncmod(ph_0_1[cse_var_2] * (ph_0_1[cse_var_2] * ph_3_1[cse_var_2]), ph_0_1[cse_var_2])\n        for i0_i1_fused_i2_fused in T.parallel(2432):\n            compute_1 = T.Buffer((2432,), data=compute.data)\n            compute_1[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused] * (ph_0_1[i0_i1_fused_i2_fused] * ph_3_1[i0_i1_fused_i2_fused]))",
        "op_args": [
            [
                "subtract",
                "multiply",
                "multiply",
                "mod",
                "ceil"
            ]
        ],
        "input_shape": "[[16, 19, 8], [18, 11, 11], [16, 19, 8]]",
        "output_shape": "[[16, 19, 8], [18, 11, 11], [16, 19, 8], [16, 19, 8]]",
        "deepseek_c": "void default_function_kernel(float* T_mod, float* T_subtract, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2176; ++ax0_ax1_fused_ax2_fused) {\n    T_subtract[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] - ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2176; ++i0_i1_fused_i2_fused) {\n    T_mod[i0_i1_fused_i2_fused] = fmodf((ph_0[i0_i1_fused_i2_fused] * (ph_0[i0_i1_fused_i2_fused] * ph_3[i0_i1_fused_i2_fused]))), ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2176; ++i0_i1_fused_i2_fused_1) {\n    compute[i0_i1_fused_i2_fused_1] = ceilf((ph_0[i0_i1_fused_i2_fused_1] * (ph_0[i0_i1_fused_i2_fused_1] * ph_3[i0_i1_fused_i2_fused_1])));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_mod, float* T_subtract, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 304; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 8; ++ax2) {\n      T_subtract[((ax0_ax1_fused * 8) + ax2)] = (ph_0[((ax0_ax1_fused * 8) + ax2)] - ph_3[((ax0_ax1_fused * 8) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 304; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 8; ++ax2_1) {\n      T_mod[((ax0_ax1_fused_1 * 8) + ax2_1)] = fmodf((ph_0[((ax0_ax1_fused_1 * 8) + ax2_1)] * (ph_0[((ax0_ax1_fused_1 * 8) + ax2_1)] * ph_3[((ax0_ax1_fused_1 * 8) + ax2_1)])), ph_0[((ax0_ax1_fused_1 * 8) + ax2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 304; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 8; ++i2) {\n      compute[((i0_i1_fused * 8) + i2)] = ceilf((ph_0[((i0_i1_fused * 8) + i2)] * (ph_0[((i0_i1_fused * 8) + i2)] * ph_3[((i0_i1_fused * 8) + i2)])));\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_mod, float* T_subtract, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1536; ++ax0_ax1_fused_ax2_fused) {\n    T_subtract[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] - ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1536; ++ax0_ax1_fused_ax2_fused_1) {\n    T_mod[ax0_ax1_fused_ax2_fused_1] = fmodf((ph_0[ax0_ax1_fused_ax2_fused_1] * (ph_0[ax0_ax1_fused_ax2_fused_1] * ph_3[ax0_ax1_fused_ax2_fused_1])), ph_0[ax0_ax1_fused_ax2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1536; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf((ph_0[i0_i1_fused_i2_fused] * (ph_0[i0_i1_fused_i2_fused] * ph_3[i0_i1_fused_i2_fused])));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* T_subtract, float* T_mod, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2880; ++i0_i1_fused_i2_fused) {\n    if ((i0_i1_fused_i2_fused < 144) || (i0_i1_fused_i2_fused >= 2736)) {\n      T_subtract[i0_i1_fused_i2_fused] = (ph_0[i0_i1_fused_i2_fused] - ph_3[i0_i1_fused_i2_fused]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2880; ++i0_i1_fused_i2_fused_1) {\n    if ((i0_i1_fused_i2_fused_1 < 144) || (i0_i1_fused_i2_fused_1 >= 2736)) {\n      T_mod[i0_i1_fused_i2_fused_1] = fmodf((ph_0[i0_i1_fused_i2_fused_1] * (ph_0[i0_i1_fused_i2_fused_1] * ph_3[i0_i1_fused_i2_fused_1])), ph_0[i0_i1_fused_i2_fused_1]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 2880; ++i0_i1_fused_i2_fused_2) {\n    if ((i0_i1_fused_i2_fused_2 < 144) || (i0_i1_fused_i2_fused_2 >= 2736)) {\n      compute[i0_i1_fused_i2_fused_2] = ceilf((ph_0[i0_i1_fused_i2_fused_2] * (ph_0[i0_i1_fused_i2_fused_2] * ph_3[i0_i1_fused_i2_fused_2])));\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 77; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = cosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 77; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = ceilf(acoshf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 7; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 11; ++i2) {\n      compute_2[((i0_i1_fused * 11) + i2)] = sinf(ph_0[((i0_i1_fused * 11) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 77; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (fabsf(ph_0[ax0_ax1_fused_ax2_fused]) / ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_3(float* __restrict__ T_divide, float* __restrict__ ph_0) {\n  T_divide[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = (fabsf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]) / ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = __sinf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = __cosf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = ceilf(acoshf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((1, 7, 11), \"float32\"), compute: T.Buffer((1, 7, 11), \"float32\"), compute_1: T.Buffer((1, 7, 11), \"float32\"), compute_2: T.Buffer((1, 7, 11), \"float32\"), T_divide: T.Buffer((1, 7, 11), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((77,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(77):\n            compute_3 = T.Buffer((77,), data=compute.data)\n            compute_3[i0_i1_fused_i2_fused] = T.cos(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(77):\n            compute_3 = T.Buffer((77,), data=compute_1.data)\n            compute_3[i0_i1_fused_i2_fused] = T.ceil(T.acosh(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused in T.parallel(7):\n            for i2 in range(11):\n                cse_var_1: T.int32 = i0_i1_fused * 11 + i2\n                compute_3 = T.Buffer((77,), data=compute_2.data)\n                compute_3[cse_var_1] = T.sin(ph_0_1[cse_var_1])\n        for ax0_ax1_fused_ax2_fused in T.parallel(77):\n            T_divide_1 = T.Buffer((77,), data=T_divide.data)\n            T_divide_1[ax0_ax1_fused_ax2_fused] = T.fabs(ph_0_1[ax0_ax1_fused_ax2_fused]) / ph_0_1[ax0_ax1_fused_ax2_fused]",
        "op_args": [
            [
                "cos",
                "acosh",
                "ceil",
                "sin",
                "abs",
                "divide"
            ]
        ],
        "input_shape": "[[1, 7, 11]]",
        "output_shape": "[[1, 7, 11], [1, 7, 11], [1, 7, 11], [1, 7, 11]]",
        "deepseek_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 7; ++i0) {\n    for (int32_t i1 = 0; i1 < 11; ++i1) {\n      compute[((i0 * 11) + i1)] = cosf(ph_0[((i0 * 11) + i1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 7; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 11; ++i1_1) {\n      compute_1[((i0_1 * 11) + i1_1)] = ceilf(acoshf(ph_0[((i0_1 * 11) + i1_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_2 = 0; i0_2 < 7; ++i0_2) {\n    for (int32_t i1_2 = 0; i1_2 < 11; ++i1_2) {\n      compute_2[((i0_2 * 11) + i1_2)] = sinf(ph_0[((i0_2 * 11) + i1_2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 77; ++i0_i1_fused_i2_fused) {\n    T_divide[i0_i1_fused_i2_fused] = (fabsf(ph_0[i0_i1_fused_i2_fused]) / ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 7; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 11; ++i2) {\n      compute[((i0_i1_fused * 11) + i2)] = cosf(ph_0[((i0_i1_fused * 11) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 77; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = ceilf(acoshf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 77; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = sinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 77; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (fabsf(ph_0[ax0_ax1_fused_ax2_fused]) / ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 77; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = cosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 77; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = ceilf(acoshf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 7; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 11; ++i2) {\n      compute_2[((i0_i1_fused * 11) + i2)] = sinf(ph_0[((i0_i1_fused * 11) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 7; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 11; ++ax2) {\n      T_divide[((ax0_ax1_fused * 11) + ax2)] = (fabsf(ph_0[((ax0_ax1_fused * 11) + ax2)]) / ph_0[((ax0_ax1_fused * 11) + ax2)]);\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* T_divide, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 77; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = cosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 77; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = ceilf(acoshf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 77; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = sinf(ph_0[i0_i1_fused_i2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 77; ++i0_i1_fused_i2_fused_3) {\n    T_divide[i0_i1_fused_i2_fused_3] = (fabsf(ph_0[i0_i1_fused_i2_fused_3]) / ph_0[i0_i1_fused_i2_fused_3]);\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 20; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] * ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = atanhf(ph_0[((i0 * 2) + i1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 10; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 2; ++i1_1) {\n      compute_1[((i0_1 * 2) + i1_1)] = ceilf(ph_0[((i0_1 * 2) + i1_1)]);\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(9) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))] = atanhf(ph_0[((((int)blockIdx.x) * 9) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ T_multiply, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_multiply[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] * ph_3[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = ceilf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((10, 2, 1), \"float32\"), ph_3: T.Buffer((10, 2, 1), \"float32\"), T_multiply: T.Buffer((10, 2, 1), \"float32\"), compute: T.Buffer((10, 2, 1), \"float32\"), compute_1: T.Buffer((10, 2, 1), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((20,), data=ph_0.data)\n        for ax0_ax1_fused_ax2_fused in T.parallel(20):\n            T_multiply_1 = T.Buffer((20,), data=T_multiply.data)\n            ph_3_1 = T.Buffer((20,), data=ph_3.data)\n            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * ph_3_1[ax0_ax1_fused_ax2_fused]\n        for i0 in T.parallel(10):\n            for i1 in range(2):\n                cse_var_1: T.int32 = i0 * 2 + i1\n                compute_2 = T.Buffer((20,), data=compute.data)\n                compute_2[cse_var_1] = T.atanh(ph_0_1[cse_var_1])\n        for i0 in T.parallel(10):\n            for i1 in range(2):\n                cse_var_2: T.int32 = i0 * 2 + i1\n                compute_2 = T.Buffer((20,), data=compute_1.data)\n                compute_2[cse_var_2] = T.ceil(ph_0_1[cse_var_2])",
        "op_args": [
            [
                "multiply",
                "atanh",
                "ceil"
            ]
        ],
        "input_shape": "[[10, 2, 1], [4, 2, 7], [10, 2, 1]]",
        "output_shape": "[[10, 2, 1], [4, 2, 7], [10, 2, 1], [10, 2, 1]]",
        "deepseek_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 20; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] * ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 20; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 20; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = ceilf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 20; ++ax0_ax1_fused) {\n    T_multiply[ax0_ax1_fused] = (ph_0[ax0_ax1_fused] * ph_3[ax0_ax1_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = atanhf(ph_0[((i0 * 2) + i1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 20; ++i0_i1_fused) {\n    compute_1[i0_i1_fused] = ceilf(ph_0[i0_i1_fused]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 20; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] * ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 20; ++i0_i1_fused) {\n    compute[i0_i1_fused] = atanhf(ph_0[i0_i1_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 20; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 20; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 56; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = (ph_0[i0_i1_fused_i2_fused_1] * ph_3[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 1; ++i2) {\n        compute_2[(((i0 * 2) + i1) + i2)] = ceilf(ph_0[(((i0 * 2) + i1) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i2 = 0; i2 < 18; ++i2) {\n      compute[((i0 * 18) + i2)] = atanhf((ph_0[((i0 * 18) + i2)] + cosf(ph_0[((i0 * 18) + i2)])));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(24) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 24) + ((int)threadIdx.x))] = atanhf((ph_0[((((int)blockIdx.x) * 24) + ((int)threadIdx.x))] + __cosf(ph_0[((((int)blockIdx.x) * 24) + ((int)threadIdx.x))])));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((8, 1, 18), \"float32\"), compute: T.Buffer((8, 1, 18), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0 in T.parallel(8):\n            for i2 in range(18):\n                cse_var_1: T.int32 = i0 * 18 + i2\n                compute_1 = T.Buffer((144,), data=compute.data)\n                ph_0_1 = T.Buffer((144,), data=ph_0.data)\n                compute_1[cse_var_1] = T.atanh(ph_0_1[cse_var_1] + T.cos(ph_0_1[cse_var_1]))",
        "op_args": [
            [
                "cos",
                "add",
                "atanh"
            ]
        ],
        "input_shape": "[[8, 1, 18]]",
        "output_shape": "[[8, 1, 18]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* ph_0) {\n  for (int32_t i = 0; i < 8; ++i) {\n    for (int32_t j = 0; j < 18; ++j) {\n      compute[((i * 18) + j)] = atanhf((ph_0[((i * 18) + j)] + cosf(ph_0[((i * 18) + j)])));\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 144; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] + cosf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 144; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] + cosf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 144; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf((ph_0[i0_i1_fused_i2_fused] + cosf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 3400; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(36) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))] = ceilf(ph_0[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((10, 17, 20), \"float32\"), compute: T.Buffer((10, 17, 20), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused_i2_fused in T.parallel(3400):\n            compute_1 = T.Buffer((3400,), data=compute.data)\n            ph_0_1 = T.Buffer((3400,), data=ph_0.data)\n            compute_1[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "ceil"
            ]
        ],
        "input_shape": "[[10, 17, 20]]",
        "output_shape": "[[10, 17, 20]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* ph_0) {\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 17; ++i1) {\n      for (int32_t i2 = 0; i2 < 20; ++i2) {\n        compute[(((i0 * 340) + (i1 * 20)) + i2)] = ceilf(ph_0[(((i0 * 340) + (i1 * 20)) + i2)]);\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* ph_0) {\n  float compute_1[170];\n  for (int32_t i1 = 0; i1 < 17; ++i1) {\n    for (int32_t i2 = 0; i2 < 20; ++i2) {\n      compute_1[((i1 * 20) + i2)] = ceilf(ph_0[((i1 * 20) + i2)]);\n    }\n  }\n  for (int32_t i1_1 = 0; i1_1 < 17; ++i1_1) {\n    for (int32_t i2_1 = 0; i2_1 < 20; ++i2_1) {\n      compute[((i1_1 * 20) + i2_1)] = compute_1[((i1_1 * 20) + i2_1)];\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 3400; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 3400; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_mod, float* T_mod_1, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 480; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0 = 0; ax0 < 2; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 12; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 20; ++ax2) {\n        T_mod[(((ax0 * 240) + (ax1 * 20)) + ax2)] = fmodf(asinhf(ph_0[(((ax0 * 240) + (ax1 * 20)) + ax2)]), ph_0[(((ax0 * 240) + (ax1 * 20)) + ax2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n    for (int32_t ax1_1 = 0; ax1_1 < 12; ++ax1_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 20; ++ax2_1) {\n        T_mod_1[(((ax0_1 * 240) + (ax1_1 * 20)) + ax2_1)] = fmodf(ph_0[(((ax0_1 * 240) + (ax1_1 * 20)) + ax2_1)], cosf(ph_0[(((ax0_1 * 240) + (ax1_1 * 20)) + ax2_1)]));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = acoshf(ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel_1(float* __restrict__ T_mod, float* __restrict__ ph_0) {\n  T_mod[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = fmodf(asinhf(ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]), ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ T_mod, float* __restrict__ ph_0) {\n  T_mod[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fmodf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))], __cosf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((2, 12, 20), \"float32\"), compute: T.Buffer((2, 12, 20), \"float32\"), T_mod: T.Buffer((2, 12, 20), \"float32\"), T_mod_1: T.Buffer((2, 12, 20), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((480,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(480):\n            compute_1 = T.Buffer((480,), data=compute.data)\n            compute_1[i0_i1_fused_i2_fused] = T.acosh(ph_0_1[i0_i1_fused_i2_fused])\n        for ax0 in T.parallel(2):\n            for ax1, ax2 in T.grid(12, 20):\n                cse_var_1: T.int32 = ax0 * 240 + ax1 * 20 + ax2\n                T_mod_2 = T.Buffer((480,), data=T_mod.data)\n                T_mod_2[cse_var_1] = T.truncmod(T.asinh(ph_0_1[cse_var_1]), ph_0_1[cse_var_1])\n        for ax0 in T.parallel(2):\n            for ax1, ax2 in T.grid(12, 20):\n                cse_var_2: T.int32 = ax0 * 240 + ax1 * 20 + ax2\n                T_mod_2 = T.Buffer((480,), data=T_mod_1.data)\n                T_mod_2[cse_var_2] = T.truncmod(ph_0_1[cse_var_2], T.cos(ph_0_1[cse_var_2]))",
        "op_args": [
            [
                "acosh",
                "asinh",
                "mod",
                "cos",
                "mod"
            ]
        ],
        "input_shape": "[[2, 12, 20]]",
        "output_shape": "[[2, 12, 20], [2, 12, 20], [2, 12, 20]]",
        "deepseek_c": "void default_function_kernel(float* T_mod, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 12; ++i1) {\n      for (int32_t i2 = 0; i2 < 20; ++i2) {\n        compute[(((i0 * 240) + (i1 * 20)) + i2)] = acoshf(ph_0[(((i0 * 240) + (i1 * 20)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 480; ++ax0_ax1_fused_ax2_fused) {\n    T_mod[ax0_ax1_fused_ax2_fused] = fmodf(asinhf(ph_0[ax0_ax1_fused_ax2_fused]), ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 2; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 12; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 20; ++i2_1) {\n        T_mod[(((i0_1 * 240) + (i1_1 * 20)) + i2_1)] = fmodf(ph_0[(((i0_1 * 240) + (i1_1 * 20)) + i2_1)], cosf(ph_0[(((i0_1 * 240) + (i1_1 * 20)) + i2_1)]));\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_mod, float* T_mod_1, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 480; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 480; ++ax0_ax1_fused_ax2_fused) {\n    T_mod[ax0_ax1_fused_ax2_fused] = fmodf(asinhf(ph_0[ax0_ax1_fused_ax2_fused]), ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 24; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 20; ++ax2) {\n      T_mod_1[((ax0_ax1_fused * 20) + ax2)] = fmodf(ph_0[((ax0_ax1_fused * 20) + ax2)], cosf(ph_0[((ax0_ax1_fused * 20) + ax2)]));\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_mod, float* T_mod_1, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 480; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 24; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 20; ++ax2) {\n      T_mod[((ax0_ax1_fused * 20) + ax2)] = fmodf(asinhf(ph_0[((ax0_ax1_fused * 20) + ax2)]), ph_0[((ax0_ax1_fused * 20) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 480; ++ax0_ax1_fused_ax2_fused) {\n    T_mod_1[ax0_ax1_fused_ax2_fused] = fmodf(ph_0[ax0_ax1_fused_ax2_fused], cosf(ph_0[ax0_ax1_fused_ax2_fused]));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* T_mod, float* T_mod_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 480; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acoshf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 480; ++i0_i1_fused_i2_fused_1) {\n    T_mod[i0_i1_fused_i2_fused_1] = fmodf(asinhf(ph_0[i0_i1_fused_i2_fused_1]), ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 2; ++i0) {\n    for (int32_t i1 = 0; i1 < 12; ++i1) {\n      for (int32_t i2 = 0; i2 < 20; ++i2) {\n        T_mod_1[(((i0 * 240) + (i1 * 20)) + i2)] = fmodf(ph_0[(((i0 * 240) + (i1 * 20)) + i2)], cosf(ph_0[(((i0 * 240) + (i1 * 20)) + i2)]));\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 450; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 450; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = fabsf(asinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 90; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 5; ++i2) {\n      compute_2[((i0_i1_fused * 5) + i2)] = asinhf((ph_0[((i0_i1_fused * 5) + i2)] * asinf(ph_0[((i0_i1_fused * 5) + i2)])));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = ceilf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(2) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))] = asinhf((ph_0[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))] * asinf(ph_0[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))])));\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = fabsf(asinf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((9, 10, 5), \"float32\"), compute: T.Buffer((9, 10, 5), \"float32\"), compute_1: T.Buffer((9, 10, 5), \"float32\"), compute_2: T.Buffer((9, 10, 5), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((450,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(450):\n            compute_3 = T.Buffer((450,), data=compute.data)\n            compute_3[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(450):\n            compute_3 = T.Buffer((450,), data=compute_1.data)\n            compute_3[i0_i1_fused_i2_fused] = T.fabs(T.asin(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused in T.parallel(90):\n            for i2 in range(5):\n                cse_var_1: T.int32 = i0_i1_fused * 5 + i2\n                compute_3 = T.Buffer((450,), data=compute_2.data)\n                compute_3[cse_var_1] = T.asinh(ph_0_1[cse_var_1] * T.asin(ph_0_1[cse_var_1]))",
        "op_args": [
            [
                "ceil",
                "asin",
                "abs",
                "asin",
                "multiply",
                "asinh"
            ]
        ],
        "input_shape": "[[9, 10, 5]]",
        "output_shape": "[[9, 10, 5], [9, 10, 5], [9, 10, 5]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 5; ++i2) {\n        compute[(((i0 * 50) + (i1 * 5)) + i2)] = ceilf(ph_0[(((i0 * 50) + (i1 * 5)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 90; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 5; ++i2) {\n      compute_1[((i0_i1_fused * 5) + i2)] = fabsf(asinf(ph_0[((i0_i1_fused * 5) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 450; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = asinhf((ph_0[i0_i1_fused_i2_fused] * asinf(ph_0[i0_i1_fused_i2_fused])));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 450; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 90; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 5; ++i2) {\n      compute_1[((i0_i1_fused * 5) + i2)] = fabsf(asinf(ph_0[((i0_i1_fused * 5) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 450; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf((ph_0[i0_i1_fused_i2_fused_1] * asinf(ph_0[i0_i1_fused_i2_fused_1])));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 450; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 90; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 5; ++i2) {\n      compute_1[((i0_i1_fused * 5) + i2)] = fabsf(asinf(ph_0[((i0_i1_fused * 5) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 450; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf((ph_0[i0_i1_fused_i2_fused_1] * asinf(ph_0[i0_i1_fused_i2_fused_1])));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 450; ++i0_i1_fused_i2_fused) {\n    if ((i0_i1_fused_i2_fused / 64) < 9) {\n      compute[i0_i1_fused_i2_fused] = ceilf(ph_0[i0_i1_fused_i2_fused]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 450; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = asinhf((ph_0[i0_i1_fused_i2_fused_1] * asinf(ph_0[i0_i1_fused_i2_fused_1])));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 450; ++i0_i1_fused_i2_fused_2) {\n    if ((i0_i1_fused_i2_fused_2 / 64) < 9) {\n      compute_2[i0_i1_fused_i2_fused_2] = fabsf(asinf(ph_0[i0_i1_fused_i2_fused_2]));\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 16) + (i1 * 2)) + i2)] = fabsf(ph_0[(((i0 * 16) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 128; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      T_add[((ax0_ax1_fused * 2) + ax2)] = (acoshf(ph_0[((ax0_ax1_fused * 2) + ax2)]) + ph_0[((ax0_ax1_fused * 2) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 256; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 256; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = acosf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fabsf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 12) + ((int)threadIdx.x))] = acosf(__sinf(ph_0[((((int)blockIdx.x) * 12) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 2) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = __expf(ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ T_add, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    T_add[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = (acoshf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]) + ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((16, 8, 2), \"float32\"), compute: T.Buffer((16, 8, 2), \"float32\"), T_add: T.Buffer((16, 8, 2), \"float32\"), compute_1: T.Buffer((16, 8, 2), \"float32\"), compute_2: T.Buffer((16, 8, 2), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((256,), data=ph_0.data)\n        for i0 in T.parallel(16):\n            for i1, i2 in T.grid(8, 2):\n                cse_var_1: T.int32 = i0 * 16 + i1 * 2 + i2\n                compute_3 = T.Buffer((256,), data=compute.data)\n                compute_3[cse_var_1] = T.fabs(ph_0_1[cse_var_1])\n        for ax0_ax1_fused in T.parallel(128):\n            for ax2 in range(2):\n                cse_var_2: T.int32 = ax0_ax1_fused * 2 + ax2\n                T_add_1 = T.Buffer((256,), data=T_add.data)\n                T_add_1[cse_var_2] = T.acosh(ph_0_1[cse_var_2]) + ph_0_1[cse_var_2]\n        for i0_i1_fused_i2_fused in T.parallel(256):\n            compute_3 = T.Buffer((256,), data=compute_1.data)\n            compute_3[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(256):\n            compute_3 = T.Buffer((256,), data=compute_2.data)\n            compute_3[i0_i1_fused_i2_fused] = T.acos(T.sin(ph_0_1[i0_i1_fused_i2_fused]))",
        "op_args": [
            [
                "abs",
                "acosh",
                "add",
                "exp",
                "sin",
                "acos"
            ]
        ],
        "input_shape": "[[16, 8, 2]]",
        "output_shape": "[[16, 8, 2], [16, 8, 2], [16, 8, 2], [16, 8, 2]]",
        "deepseek_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute[(((i0 * 16) + (i1 * 2)) + i2)] = fabsf(ph_0[(((i0 * 16) + (i1 * 2)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 128; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 2; ++i2_1) {\n      T_add[((i0_i1_fused * 2) + i2_1)] = (acoshf(ph_0[((i0_i1_fused * 2) + i2_1)]) + ph_0[((i0_i1_fused * 2) + i2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 256; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = expf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 256; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = acosf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 256; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 256; ++ax0_ax1_fused_ax2_fused) {\n    T_add[ax0_ax1_fused_ax2_fused] = (acoshf(ph_0[ax0_ax1_fused_ax2_fused]) + ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 128; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 2; ++i2) {\n      compute_1[((i0_i1_fused * 2) + i2)] = expf(ph_0[((i0_i1_fused * 2) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 256; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = acosf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_add, float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 384; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 128; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      T_add[((ax0_ax1_fused * 2) + ax2)] = (acoshf(ph_0[((ax0_ax1_fused * 2) + ax2)]) + ph_0[((ax0_ax1_fused * 2) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 384; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = expf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 384; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = acosf(sinf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 256; ++i0_i1_fused_i2_fused) {\n    if ((i0_i1_fused_i2_fused / 32) < 9) {\n      compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 256; ++i0_i1_fused_i2_fused_1) {\n    if ((i0_i1_fused_i2_fused_1 / 32) < 9) {\n      compute_1[i0_i1_fused_i2_fused_1] = acoshf(ph_0[i0_i1_fused_i2_fused_1]) + ph_0[i0_i1_fused_i2_fused_1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 256; ++i0_i1_fused_i2_fused_2) {\n    if ((i0_i1_fused_i2_fused_2 / 16) < 9) {\n      compute_2[i0_i1_fused_i2_fused_2] = expf(ph_0[i0_i1_fused_i2_fused_2]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    for (int32_t i1 = 0; i1 < 8; ++i1) {\n      for (int32_t i2 = 0; i2 < 2; ++i2) {\n        compute_3[(((i0 * 16) + (i1 * 2)) + i2)] = acosf(sinf(ph_0[(((i0 * 16) + (i1 * 2)) + i2)]));\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_subtract, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 15; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 2; ++i2) {\n      compute[((i0_i1_fused * 2) + i2)] = fabsf(ph_0[((i0_i1_fused * 2) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 30; ++ax0_ax1_fused_ax2_fused) {\n    T_subtract[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] - asinhf(cosf(ph_0[ax0_ax1_fused_ax2_fused])));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 15; ++i0_i1_fused_1) {\n    for (int32_t i2_1 = 0; i2_1 < 2; ++i2_1) {\n      compute_1[((i0_i1_fused_1 * 2) + i2_1)] = asinf(atanhf(ph_0[((i0_i1_fused_1 * 2) + i2_1)]));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ T_subtract, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    T_subtract[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] - asinhf(__cosf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))])));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = asinf(atanhf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(6) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 6) + ((int)threadIdx.x))] = fabsf(ph_0[((((int)blockIdx.x) * 6) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((1, 15, 2), \"float32\"), compute: T.Buffer((1, 15, 2), \"float32\"), T_subtract: T.Buffer((1, 15, 2), \"float32\"), compute_1: T.Buffer((1, 15, 2), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((30,), data=ph_0.data)\n        for i0_i1_fused in T.parallel(15):\n            for i2 in range(2):\n                cse_var_1: T.int32 = i0_i1_fused * 2 + i2\n                compute_2 = T.Buffer((30,), data=compute.data)\n                compute_2[cse_var_1] = T.fabs(ph_0_1[cse_var_1])\n        for ax0_ax1_fused_ax2_fused in T.parallel(30):\n            T_subtract_1 = T.Buffer((30,), data=T_subtract.data)\n            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - T.asinh(T.cos(ph_0_1[ax0_ax1_fused_ax2_fused]))\n        for i0_i1_fused in T.parallel(15):\n            for i2 in range(2):\n                cse_var_2: T.int32 = i0_i1_fused * 2 + i2\n                compute_2 = T.Buffer((30,), data=compute_1.data)\n                compute_2[cse_var_2] = T.asin(T.atanh(ph_0_1[cse_var_2]))",
        "op_args": [
            [
                "abs",
                "cos",
                "asinh",
                "subtract",
                "atanh",
                "asin"
            ]
        ],
        "input_shape": "[[1, 15, 2]]",
        "output_shape": "[[1, 15, 2], [1, 15, 2], [1, 15, 2]]",
        "deepseek_c": "void default_function_kernel(float* T_subtract, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 15; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      compute[((i0 * 2) + i1)] = fabsf(ph_0[((i0 * 2) + i1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 15; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 2; ++i1_1) {\n      T_subtract[((i0_1 * 2) + i1_1)] = (ph_0[((i0_1 * 2) + i1_1)] - asinhf(cosf(ph_0[((i0_1 * 2) + i1_1)])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_2 = 0; i0_2 < 15; ++i0_2) {\n    for (int32_t i1_2 = 0; i1_2 < 2; ++i1_2) {\n      compute[((i0_2 * 2) + i1_2)] = asinf(atanhf(ph_0[((i0_2 * 2) + i1_2)]));\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_subtract, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 15; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 2; ++i2) {\n      compute[((i0_i1_fused * 2) + i2)] = fabsf(ph_0[((i0_i1_fused * 2) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 15; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      T_subtract[((ax0_ax1_fused * 2) + ax2)] = (ph_0[((ax0_ax1_fused * 2) + ax2)] - asinhf(cosf(ph_0[((ax0_ax1_fused * 2) + ax2)])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 30; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = asinf(atanhf(ph_0[i0_i1_fused_i2_fused]));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_subtract, float* compute, float* compute_1, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 30; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 15; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 2; ++ax2) {\n      T_subtract[((ax0_ax1_fused * 2) + ax2)] = (ph_0[((ax0_ax1_fused * 2) + ax2)] - asinhf(cosf(ph_0[((ax0_ax1_fused * 2) + ax2)])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 30; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = asinf(atanhf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* T_subtract, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 30; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 30; ++i0_i1_fused_i2_fused_1) {\n    if ((i0_i1_fused_i2_fused_1 < 9)) {\n      T_subtract[i0_i1_fused_i2_fused_1] = (ph_0[i0_i1_fused_i2_fused_1] - asinhf(cosf(ph_0[i0_i1_fused_i2_fused_1])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 30; ++i0_i1_fused_i2_fused_2) {\n    if ((i0_i1_fused_i2_fused_2 < 9)) {\n      compute[i0_i1_fused_i2_fused_2] = asinf(atanhf(ph_0[i0_i1_fused_i2_fused_2]));\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 12; ++i1) {\n      for (int32_t i2 = 0; i2 < 16; ++i2) {\n        compute[(((i0 * 192) + (i1 * 16)) + i2)] = atanhf(ph_0[(((i0 * 192) + (i1 * 16)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 9; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 12; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 16; ++i2_1) {\n        compute_1[(((i0_1 * 192) + (i1_1 * 16)) + i2_1)] = cosf(atanf(ph_0[(((i0_1 * 192) + (i1_1 * 16)) + i2_1)]));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1728; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(4) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = __cosf(atanf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = atanhf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((9, 12, 16), \"float32\"), compute: T.Buffer((9, 12, 16), \"float32\"), compute_1: T.Buffer((9, 12, 16), \"float32\"), compute_2: T.Buffer((9, 12, 16), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((1728,), data=ph_0.data)\n        for i0 in T.parallel(9):\n            for i1, i2 in T.grid(12, 16):\n                cse_var_1: T.int32 = i0 * 192 + i1 * 16 + i2\n                compute_3 = T.Buffer((1728,), data=compute.data)\n                compute_3[cse_var_1] = T.atanh(ph_0_1[cse_var_1])\n        for i0 in T.parallel(9):\n            for i1, i2 in T.grid(12, 16):\n                cse_var_2: T.int32 = i0 * 192 + i1 * 16 + i2\n                compute_3 = T.Buffer((1728,), data=compute_1.data)\n                compute_3[cse_var_2] = T.cos(T.atan(ph_0_1[cse_var_2]))\n        for i0_i1_fused_i2_fused in T.parallel(1728):\n            compute_3 = T.Buffer((1728,), data=compute_2.data)\n            compute_3[i0_i1_fused_i2_fused] = T.atan(ph_0_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "atanh",
                "atan",
                "cos",
                "atan"
            ]
        ],
        "input_shape": "[[9, 12, 16]]",
        "output_shape": "[[9, 12, 16], [9, 12, 16], [9, 12, 16]]",
        "deepseek_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 12; ++i1) {\n      for (int32_t i2 = 0; i2 < 16; ++i2) {\n        compute[(((i0 * 192) + (i1 * 16)) + i2)] = atanhf(ph_0[(((i0 * 192) + (i1 * 16)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 108; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 16; ++i2_1) {\n      compute_1[((i0_i1_fused * 16) + i2_1)] = cosf(atanf(ph_0[((i0_i1_fused * 16) + i2_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1728; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1728; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 108; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 16; ++i2) {\n      compute_1[((i0_i1_fused * 16) + i2)] = cosf(atanf(ph_0[((i0_i1_fused * 16) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1728; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = atanf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1680; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 108; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 16; ++i2) {\n      compute_1[((i0_i1_fused * 16) + i2)] = cosf(atanf(ph_0[((i0_i1_fused * 16) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1680; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = atanf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1728; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1728; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = cosf(atanf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 9; ++i0) {\n    for (int32_t i1 = 0; i1 < 12; ++i1) {\n      for (int32_t i2 = 0; i2 < 16; ++i2) {\n        compute[(((i0 * 192) + (i1 * 16)) + i2)] = atanhf(ph_0[(((i0 * 192) + (i1 * 16)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_add, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 14; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n      T_add[((ax0_ax1_fused * 4) + ax2)] = (ph_0[((ax0_ax1_fused * 4) + ax2)] + ph_3[((ax0_ax1_fused * 4) + ax2)]);\n    }\n  }\n  for (int32_t i1 = 0; i1 < 14; ++i1) {\n    for (int32_t i2 = 0; i2 < 4; ++i2) {\n      compute[((i1 * 4) + i2)] = atanf(ph_0[((i1 * 4) + i2)]);\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(36) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))] = atanf(ph_0[((((int)blockIdx.x) * 36) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ T_add, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_add[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] + ph_3[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((1, 14, 4), \"float32\"), ph_3: T.Buffer((1, 14, 4), \"float32\"), T_add: T.Buffer((1, 14, 4), \"float32\"), compute: T.Buffer((1, 14, 4), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((56,), data=ph_0.data)\n        for ax0_ax1_fused in T.parallel(14):\n            for ax2 in range(4):\n                cse_var_1: T.int32 = ax0_ax1_fused * 4 + ax2\n                T_add_1 = T.Buffer((56,), data=T_add.data)\n                ph_3_1 = T.Buffer((56,), data=ph_3.data)\n                T_add_1[cse_var_1] = ph_0_1[cse_var_1] + ph_3_1[cse_var_1]\n        for i1, i2 in T.grid(14, 4):\n            cse_var_2: T.int32 = i1 * 4 + i2\n            compute_1 = T.Buffer((56,), data=compute.data)\n            compute_1[cse_var_2] = T.atan(ph_0_1[cse_var_2])",
        "op_args": [
            [
                "add",
                "atan"
            ]
        ],
        "input_shape": "[[1, 14, 4], [14, 17, 6], [1, 14, 4]]",
        "output_shape": "[[1, 14, 4], [14, 17, 6], [1, 14, 4]]",
        "deepseek_c": "void default_function_kernel(float* T_add, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 56; ++ax0_ax1_fused_ax2_fused) {\n    T_add[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] + ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 56; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_add, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 14; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 4; ++ax2) {\n      T_add[((ax0_ax1_fused * 4) + ax2)] = (ph_0[((ax0_ax1_fused * 4) + ax2)] + ph_3[((ax0_ax1_fused * 4) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 14; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 4; ++i2) {\n      compute[((i0_i1_fused * 4) + i2)] = atanf(ph_0[((i0_i1_fused * 4) + i2)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_add, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 56; ++ax0_ax1_fused_ax2_fused) {\n    T_add[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] + ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 56; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* T_add, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 56; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = atanf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 56; ++i0_i1_fused_i2_fused_1) {\n    T_add[i0_i1_fused_i2_fused_1] = (ph_0[i0_i1_fused_i2_fused_1] + ph_3[i0_i1_fused_i2_fused_1]);\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 18; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      T_divide[((ax0_ax1_fused * 10) + ax2)] = (ph_0[((ax0_ax1_fused * 10) + ax2)] / ph_3[((ax0_ax1_fused * 10) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 180; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = fabsf((ph_0[i0_i1_fused_i2_fused] - asinhf(ph_0[i0_i1_fused_i2_fused])));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 180; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = expf((ph_0[i0_i1_fused_i2_fused_1] - asinhf(ph_0[i0_i1_fused_i2_fused_1])));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_divide, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  if (((((int)blockIdx.x) * 2) + (((int)threadIdx.x) >> 3)) < 9) {\n    T_divide[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] / ph_3[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((int)blockIdx.x)] = __expf((ph_0[((int)blockIdx.x)] - asinhf(ph_0[((int)blockIdx.x)])));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 3)) < 9) {\n    compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fabsf((ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] - asinhf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))])));\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((18, 1, 10), \"float32\"), ph_3: T.Buffer((18, 1, 10), \"float32\"), T_divide: T.Buffer((18, 1, 10), \"float32\"), compute: T.Buffer((18, 1, 10), \"float32\"), compute_1: T.Buffer((18, 1, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((180,), data=ph_0.data)\n        for ax0_ax1_fused in T.parallel(18):\n            for ax2 in range(10):\n                cse_var_1: T.int32 = ax0_ax1_fused * 10 + ax2\n                T_divide_1 = T.Buffer((180,), data=T_divide.data)\n                ph_3_1 = T.Buffer((180,), data=ph_3.data)\n                T_divide_1[cse_var_1] = ph_0_1[cse_var_1] / ph_3_1[cse_var_1]\n        for i0_i1_fused_i2_fused in T.parallel(180):\n            compute_2 = T.Buffer((180,), data=compute.data)\n            compute_2[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused] - T.asinh(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused_i2_fused in T.parallel(180):\n            compute_2 = T.Buffer((180,), data=compute_1.data)\n            compute_2[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused] - T.asinh(ph_0_1[i0_i1_fused_i2_fused]))",
        "op_args": [
            [
                "divide",
                "asinh",
                "subtract",
                "abs",
                "exp"
            ]
        ],
        "input_shape": "[[18, 1, 10], [16, 1, 3], [18, 1, 10]]",
        "output_shape": "[[18, 1, 10], [16, 1, 3], [18, 1, 10], [18, 1, 10]]",
        "deepseek_c": "void default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((int)blockIdx.x)] = __expf((ph_0[((int)blockIdx.x)] - asinhf(ph_0[((int)blockIdx.x)])));\n}",
        "starcoder_c": "void default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((int)blockIdx.x)] = __expf((ph_0[((int)blockIdx.x)] - asinhf(ph_0[((int)blockIdx.x)])));\n}",
        "codellama_c": "void default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((int)blockIdx.x)] = __expf((ph_0[((int)blockIdx.x)] - asinhf(ph_0[((int)blockIdx.x)])));\n}",
        "gemini3_c": "void default_function_kernel(float* T_divide, float* compute, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 18; ++i0) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      if (i0 < 9) {\n        T_divide[(((i0 * 10) + i2))] = (ph_0[(((i0 * 10) + i2))] / ph_3[(((i0 * 10) + i2))]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 16; ++i0) {\n    compute[i0] = expf((ph_0[i0] - asinhf(ph_0[i0])));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 18; ++i0) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      if (i0 < 9) {\n        compute[(((i0 * 10) + i2))] = fabsf((ph_0[(((i0 * 10) + i2))] - asinhf(ph_0[(((i0 * 10) + i2))])));\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 270; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 5; ++i2) {\n      compute[((i0_i1_fused * 5) + i2)] = asinhf(cosf(ph_0[((i0_i1_fused * 5) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1350; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = acosf(cosf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0 = 0; ax0 < 15; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 18; ++ax1) {\n      for (int32_t ax2 = 0; ax2 < 5; ++ax2) {\n        T_divide[(((ax0 * 90) + (ax1 * 5)) + ax2)] = (ph_0[(((ax0 * 90) + (ax1 * 5)) + ax2)] / ph_3[(((ax0 * 90) + (ax1 * 5)) + ax2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1350; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf((ph_0[i0_i1_fused_i2_fused_1] / ph_3[i0_i1_fused_i2_fused_1]));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(16) default_function_kernel_2(float* __restrict__ T_divide, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_divide[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = (ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] / ph_3[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_3(float* __restrict__ compute, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = asinhf((ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] / ph_3[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = asinhf(__cosf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(48) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 48) + ((int)threadIdx.x))] = acosf(__cosf(ph_0[((((int)blockIdx.x) * 48) + ((int)threadIdx.x))]));\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((15, 18, 5), \"float32\"), ph_3: T.Buffer((15, 18, 5), \"float32\"), T_divide: T.Buffer((15, 18, 5), \"float32\"), compute: T.Buffer((15, 18, 5), \"float32\"), compute_1: T.Buffer((15, 18, 5), \"float32\"), compute_2: T.Buffer((15, 18, 5), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((1350,), data=ph_0.data)\n        for i0_i1_fused in T.parallel(270):\n            for i2 in range(5):\n                cse_var_1: T.int32 = i0_i1_fused * 5 + i2\n                compute_3 = T.Buffer((1350,), data=compute.data)\n                compute_3[cse_var_1] = T.asinh(T.cos(ph_0_1[cse_var_1]))\n        for i0_i1_fused_i2_fused in T.parallel(1350):\n            compute_3 = T.Buffer((1350,), data=compute_1.data)\n            compute_3[i0_i1_fused_i2_fused] = T.acos(T.cos(ph_0_1[i0_i1_fused_i2_fused]))\n        ph_3_1 = T.Buffer((1350,), data=ph_3.data)\n        for ax0 in T.parallel(15):\n            for ax1, ax2 in T.grid(18, 5):\n                cse_var_2: T.int32 = ax0 * 90 + ax1 * 5 + ax2\n                T_divide_1 = T.Buffer((1350,), data=T_divide.data)\n                T_divide_1[cse_var_2] = ph_0_1[cse_var_2] / ph_3_1[cse_var_2]\n        for i0_i1_fused_i2_fused in T.parallel(1350):\n            compute_3 = T.Buffer((1350,), data=compute_2.data)\n            compute_3[i0_i1_fused_i2_fused] = T.asinh(ph_0_1[i0_i1_fused_i2_fused] / ph_3_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "divide",
                "divide",
                "cos",
                "asinh",
                "acos",
                "asinh"
            ]
        ],
        "input_shape": "[[15, 18, 5], [8, 9, 2], [15, 18, 5]]",
        "output_shape": "[[8, 9, 2], [15, 18, 5], [15, 18, 5], [15, 18, 5], [15, 18, 5]]",
        "deepseek_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 15; ++i0) {\n    for (int32_t i1 = 0; i1 < 18; ++i1) {\n      for (int32_t i2 = 0; i2 < 5; ++i2) {\n        compute[(((i0 * 90) + (i1 * 5)) + i2)] = asinhf(cosf(ph_0[(((i0 * 90) + (i1 * 5)) + i2)]));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1350; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] / ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 15; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 18; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 5; ++i2_1) {\n        compute_1[(((i0_1 * 90) + (i1_1 * 5)) + i2_1)] = acosf(cosf(ph_0[(((i0_1 * 90) + (i1_1 * 5)) + i2_1)]));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_2 = 0; i0_2 < 15; ++i0_2) {\n    for (int32_t i1_2 = 0; i1_2 < 18; ++i1_2) {\n      for (int32_t i2_2 = 0; i2_2 < 5; ++i2_2) {\n        compute_2[(((i0_2 * 90) + (i1_2 * 5)) + i2_2)] = asinhf((ph_0[(((i0_2 * 90) + (i1_2 * 5)) + i2_2)] / ph_3[(((i0_2 * 90) + (i1_2 * 5)) + i2_2)]));\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 270; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 5; ++i2) {\n      compute[((i0_i1_fused * 5) + i2)] = asinhf(cosf(ph_0[((i0_i1_fused * 5) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1350; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = acosf(cosf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1350; ++ax0_ax1_fused_ax2_fused) {\n    T_divide[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] / ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1350; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = asinhf((ph_0[i0_i1_fused_i2_fused_1] / ph_3[i0_i1_fused_i2_fused_1]));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 750; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(cosf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 750; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = acosf(cosf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 270; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 5; ++ax2) {\n      T_divide[((ax0_ax1_fused * 5) + ax2)] = (ph_0[((ax0_ax1_fused * 5) + ax2)] / ph_3[((ax0_ax1_fused * 5) + ax2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 750; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = asinhf((ph_0[i0_i1_fused_i2_fused_2] / ph_3[i0_i1_fused_i2_fused_2]));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* T_divide, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1350; ++i0_i1_fused_i2_fused) {\n    T_divide[i0_i1_fused_i2_fused] = (ph_0[i0_i1_fused_i2_fused] / ph_3[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1350; ++i0_i1_fused_i2_fused_1) {\n    compute[i0_i1_fused_i2_fused_1] = asinhf((ph_0[i0_i1_fused_i2_fused_1] / ph_3[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 1350; ++i0_i1_fused_i2_fused_2) {\n    compute_1[i0_i1_fused_i2_fused_2] = asinhf(cosf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 15; ++i0) {\n    for (int32_t i1 = 0; i1 < 18; ++i1) {\n      for (int32_t i2 = 0; i2 < 5; ++i2) {\n        compute_2[(((i0 * 90) + (i1 * 5)) + i2)] = acosf(cosf(ph_0[(((i0 * 90) + (i1 * 5)) + i2)]));\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_mod, float* T_multiply, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 12; ++i2) {\n        compute[(((i0 * 60) + (i1 * 12)) + i2)] = acosf(ph_0[(((i0 * 60) + (i1 * 12)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 600; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = (atanf(ph_0[ax0_ax1_fused_ax2_fused]) * ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 600; ++ax0_ax1_fused_ax2_fused_1) {\n    T_mod[ax0_ax1_fused_ax2_fused_1] = fmodf(ph_0[ax0_ax1_fused_ax2_fused_1], ceilf(ph_0[ax0_ax1_fused_ax2_fused_1]));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(4) default_function_kernel_2(float* __restrict__ T_mod, float* __restrict__ ph_0) {\n  T_mod[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = fmodf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))], ceilf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void default_function_kernel_1(float* __restrict__ T_multiply, float* __restrict__ ph_0) {\n  T_multiply[((int)blockIdx.x)] = (atanf(ph_0[((int)blockIdx.x)]) * ph_0[((int)blockIdx.x)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = acosf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((10, 5, 12), \"float32\"), compute: T.Buffer((10, 5, 12), \"float32\"), T_multiply: T.Buffer((10, 5, 12), \"float32\"), T_mod: T.Buffer((10, 5, 12), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((600,), data=ph_0.data)\n        for i0 in T.parallel(10):\n            for i1, i2 in T.grid(5, 12):\n                cse_var_1: T.int32 = i0 * 60 + i1 * 12 + i2\n                compute_1 = T.Buffer((600,), data=compute.data)\n                compute_1[cse_var_1] = T.acos(ph_0_1[cse_var_1])\n        for ax0_ax1_fused_ax2_fused in T.parallel(600):\n            T_multiply_1 = T.Buffer((600,), data=T_multiply.data)\n            T_multiply_1[ax0_ax1_fused_ax2_fused] = T.atan(ph_0_1[ax0_ax1_fused_ax2_fused]) * ph_0_1[ax0_ax1_fused_ax2_fused]\n        for ax0_ax1_fused_ax2_fused in T.parallel(600):\n            T_mod_1 = T.Buffer((600,), data=T_mod.data)\n            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], T.ceil(ph_0_1[ax0_ax1_fused_ax2_fused]))",
        "op_args": [
            [
                "acos",
                "atan",
                "multiply",
                "ceil",
                "mod"
            ]
        ],
        "input_shape": "[[10, 5, 12]]",
        "output_shape": "[[10, 5, 12], [10, 5, 12], [10, 5, 12]]",
        "deepseek_c": "void default_function_kernel_1(float* __restrict__ T_multiply, float* __restrict__ ph_0) {\n  T_multiply[((int)blockIdx.x)] = (atanf(ph_0[((int)blockIdx.x)]) * ph_0[((int)blockIdx.x)]);\n}",
        "starcoder_c": "void default_function_kernel_1(float* __restrict__ T_multiply, float* __restrict__ ph_0) {\n  T_multiply[((int)blockIdx.x)] = (atanf(ph_0[((int)blockIdx.x)]) * ph_0[((int)blockIdx.x)]);\n}",
        "codellama_c": "void default_function_kernel_1(float* __restrict__ T_multiply, float* __restrict__ ph_0) {\n  T_multiply[((int)blockIdx.x)] = (atanf(ph_0[((int)blockIdx.x)]) * ph_0[((int)blockIdx.x)]);\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* T_multiply, float* T_mod, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 600; ++i0_i1_fused_i2_fused) {\n    T_mod[i0_i1_fused_i2_fused] = fmodf(ph_0[i0_i1_fused_i2_fused], ceilf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 12; ++i2) {\n        compute[(((i0 * 60) + (i1 * 12)) + i2)] = acosf(ph_0[(((i0 * 60) + (i1 * 12)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      T_multiply[(((i0 * 5) + i1))] = (atanf(ph_0[(((i0 * 5) + i1))]) * ph_0[(((i0 * 5) + i1))]);\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1536; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1536; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = cosf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 96; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 16; ++i2) {\n      compute_2[((i0_i1_fused * 16) + i2)] = fabsf(sinf(ph_0[((i0_i1_fused * 16) + i2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1536; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = ((ph_0[ax0_ax1_fused_ax2_fused] + ph_3[ax0_ax1_fused_ax2_fused]) * ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = __cosf(__sinf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_3(float* __restrict__ T_multiply, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  T_multiply[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = ((ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] + ph_3[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]) * ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = fabsf(__sinf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = acosf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((8, 12, 16), \"float32\"), ph_3: T.Buffer((8, 12, 16), \"float32\"), compute: T.Buffer((8, 12, 16), \"float32\"), compute_1: T.Buffer((8, 12, 16), \"float32\"), compute_2: T.Buffer((8, 12, 16), \"float32\"), T_multiply: T.Buffer((8, 12, 16), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((1536,), data=ph_0.data)\n        for i0_i1_fused_i2_fused in T.parallel(1536):\n            compute_3 = T.Buffer((1536,), data=compute.data)\n            compute_3[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(1536):\n            compute_3 = T.Buffer((1536,), data=compute_1.data)\n            compute_3[i0_i1_fused_i2_fused] = T.cos(T.sin(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused in T.parallel(96):\n            for i2 in range(16):\n                cse_var_1: T.int32 = i0_i1_fused * 16 + i2\n                compute_3 = T.Buffer((1536,), data=compute_2.data)\n                compute_3[cse_var_1] = T.fabs(T.sin(ph_0_1[cse_var_1]))\n        for ax0_ax1_fused_ax2_fused in T.parallel(1536):\n            T_multiply_1 = T.Buffer((1536,), data=T_multiply.data)\n            ph_3_1 = T.Buffer((1536,), data=ph_3.data)\n            T_multiply_1[ax0_ax1_fused_ax2_fused] = (ph_0_1[ax0_ax1_fused_ax2_fused] + ph_3_1[ax0_ax1_fused_ax2_fused]) * ph_0_1[ax0_ax1_fused_ax2_fused]",
        "op_args": [
            [
                "add",
                "acos",
                "sin",
                "cos",
                "abs",
                "multiply"
            ]
        ],
        "input_shape": "[[8, 12, 16], [2, 9, 7], [8, 12, 16]]",
        "output_shape": "[[2, 9, 7], [8, 12, 16], [8, 12, 16], [8, 12, 16], [8, 12, 16]]",
        "deepseek_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    for (int32_t i1 = 0; i1 < 12; ++i1) {\n      for (int32_t i2 = 0; i2 < 16; ++i2) {\n        compute[(((i0 * 192) + (i1 * 16)) + i2)] = acosf(ph_0[(((i0 * 192) + (i1 * 16)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 96; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 16; ++i2_1) {\n      compute_1[((i0_i1_fused * 16) + i2_1)] = cosf(sinf(ph_0[((i0_i1_fused * 16) + i2_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1536; ++i0_i1_fused_i2_fused) {\n    compute_2[i0_i1_fused_i2_fused] = fabsf(sinf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1536; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = ((ph_0[ax0_ax1_fused_ax2_fused] + ph_3[ax0_ax1_fused_ax2_fused]) * ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 96; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 16; ++i2) {\n      compute[((i0_i1_fused * 16) + i2)] = acosf(ph_0[((i0_i1_fused * 16) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1536; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = cosf(sinf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1536; ++i0_i1_fused_i2_fused_1) {\n    compute_2[i0_i1_fused_i2_fused_1] = fabsf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1536; ++ax0_ax1_fused_ax2_fused) {\n    T_multiply[ax0_ax1_fused_ax2_fused] = ((ph_0[ax0_ax1_fused_ax2_fused] + ph_3[ax0_ax1_fused_ax2_fused]) * ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_multiply, float* compute, float* compute_1, float* compute_2, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1280; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1280; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = cosf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 1280; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = fabsf(sinf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 96; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 16; ++ax2) {\n      T_multiply[((ax0_ax1_fused * 16) + ax2)] = ((ph_0[((ax0_ax1_fused * 16) + ax2)] + ph_3[((ax0_ax1_fused * 16) + ax2)]) * ph_0[((ax0_ax1_fused * 16) + ax2)]);\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* compute_2, float* compute_3, float* T_multiply, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1536; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = acosf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1536; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = cosf(sinf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 1536; ++i0_i1_fused_i2_fused_2) {\n    compute_2[i0_i1_fused_i2_fused_2] = fabsf(sinf(ph_0[i0_i1_fused_i2_fused_2]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_3 = 0; i0_i1_fused_i2_fused_3 < 1536; ++i0_i1_fused_i2_fused_3) {\n    T_multiply[i0_i1_fused_i2_fused_3] = ((ph_0[i0_i1_fused_i2_fused_3] + ph_3[i0_i1_fused_i2_fused_3]) * ph_0[i0_i1_fused_i2_fused_3]);\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0 = 0; ax0 < 14; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 2; ++ax1) {\n      T_mod[((ax0 * 2) + ax1)] = fmodf(ph_0[((ax0 * 2) + ax1)], ph_3[((ax0 * 2) + ax1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 28; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = sinf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 28; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = asinhf(ceilf(ph_0[i0_i1_fused_i2_fused_1]));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_2(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = asinhf(ceilf(ph_0[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(4) default_function_kernel_1(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))] = __sinf(ph_0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(16) default_function_kernel(float* __restrict__ T_mod, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  if (((((int)blockIdx.x) * 2) + (((int)threadIdx.x) >> 3)) < 9) {\n    T_mod[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))] = fmodf(ph_0[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))], ph_3[((((int)blockIdx.x) * 16) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((14, 2, 1), \"float32\"), ph_3: T.Buffer((14, 2, 1), \"float32\"), T_mod: T.Buffer((14, 2, 1), \"float32\"), compute: T.Buffer((14, 2, 1), \"float32\"), compute_1: T.Buffer((14, 2, 1), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((28,), data=ph_0.data)\n        for ax0 in T.parallel(14):\n            for ax1 in range(2):\n                cse_var_1: T.int32 = ax0 * 2 + ax1\n                T_mod_1 = T.Buffer((28,), data=T_mod.data)\n                ph_3_1 = T.Buffer((28,), data=ph_3.data)\n                T_mod_1[cse_var_1] = T.truncmod(ph_0_1[cse_var_1], ph_3_1[cse_var_1])\n        for i0_i1_fused_i2_fused in T.parallel(28):\n            compute_2 = T.Buffer((28,), data=compute.data)\n            compute_2[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])\n        for i0_i1_fused_i2_fused in T.parallel(28):\n            compute_2 = T.Buffer((28,), data=compute_1.data)\n            compute_2[i0_i1_fused_i2_fused] = T.asinh(T.ceil(ph_0_1[i0_i1_fused_i2_fused]))",
        "op_args": [
            [
                "mod",
                "sin",
                "ceil",
                "asinh"
            ]
        ],
        "input_shape": "[[14, 2, 1], [20, 9, 19], [14, 2, 1]]",
        "output_shape": "[[14, 2, 1], [20, 9, 19], [14, 2, 1], [14, 2, 1]]",
        "deepseek_c": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 28; ++i0_i1_fused_i2_fused) {\n    T_mod[i0_i1_fused_i2_fused] = fmodf(ph_0[i0_i1_fused_i2_fused], ph_3[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 28; ++i0_i1_fused) {\n    compute[i0_i1_fused] = sinf(ph_0[i0_i1_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 28; ++i0_i1_fused_1) {\n    compute_1[i0_i1_fused_1] = asinhf(ceilf(ph_0[i0_i1_fused_1]));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 28; ++ax0_ax1_fused) {\n    T_mod[ax0_ax1_fused] = fmodf(ph_0[ax0_ax1_fused], ph_3[ax0_ax1_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 28; ++i0_i1_fused) {\n    compute[i0_i1_fused] = sinf(ph_0[i0_i1_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 28; ++i0_i1_fused_1) {\n    compute_1[i0_i1_fused_1] = asinhf(ceilf(ph_0[i0_i1_fused_1]));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 28; ++ax0_ax1_fused_ax2_fused) {\n    T_mod[ax0_ax1_fused_ax2_fused] = fmodf(ph_0[ax0_ax1_fused_ax2_fused], ph_3[ax0_ax1_fused_ax2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 28; ++i0_i1_fused) {\n    compute[i0_i1_fused] = sinf(ph_0[i0_i1_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 28; ++i0_i1_fused_i2_fused) {\n    compute_1[i0_i1_fused_i2_fused] = asinhf(ceilf(ph_0[i0_i1_fused_i2_fused]));\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* compute_1, float* T_mod, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 28; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ceilf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 360; ++i0_i1_fused_i2_fused_1) {\n    compute_1[i0_i1_fused_i2_fused_1] = sinf(ph_0[i0_i1_fused_i2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 14; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      for (int32_t i2 = 0; i2 < 1; ++i2) {\n        if (((i0 * 2) + (i1 >> 3)) < 9) {\n          T_mod[(((i0 * 2) + i1) + i2)] = fmodf(ph_0[(((i0 * 2) + i1) + i2)], ph_3[(((i0 * 2) + i1) + i2)]);\n        }\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* T_mod, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 12; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 17; ++i2) {\n      compute[((i0_i1_fused * 17) + i2)] = asinhf(ph_0[((i0_i1_fused * 17) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 12; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 17; ++ax2) {\n      T_mod[((ax0_ax1_fused * 17) + ax2)] = fmodf(sinf(ph_0[((ax0_ax1_fused * 17) + ax2)]), ph_0[((ax0_ax1_fused * 17) + ax2)]);\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ T_mod, float* __restrict__ ph_0) {\n  T_mod[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = fmodf(__sinf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]), ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(12) default_function_kernel(float* __restrict__ compute, float* __restrict__ ph_0) {\n  compute[((((int)blockIdx.x) * 12) + ((int)threadIdx.x))] = asinhf(ph_0[((((int)blockIdx.x) * 12) + ((int)threadIdx.x))]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((4, 3, 17), \"float32\"), compute: T.Buffer((4, 3, 17), \"float32\"), T_mod: T.Buffer((4, 3, 17), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((204,), data=ph_0.data)\n        for i0_i1_fused in T.parallel(12):\n            for i2 in range(17):\n                cse_var_1: T.int32 = i0_i1_fused * 17 + i2\n                compute_1 = T.Buffer((204,), data=compute.data)\n                compute_1[cse_var_1] = T.asinh(ph_0_1[cse_var_1])\n        for ax0_ax1_fused in T.parallel(12):\n            for ax2 in range(17):\n                cse_var_2: T.int32 = ax0_ax1_fused * 17 + ax2\n                T_mod_1 = T.Buffer((204,), data=T_mod.data)\n                T_mod_1[cse_var_2] = T.truncmod(T.sin(ph_0_1[cse_var_2]), ph_0_1[cse_var_2])",
        "op_args": [
            [
                "asinh",
                "sin",
                "mod"
            ]
        ],
        "input_shape": "[[4, 3, 17]]",
        "output_shape": "[[4, 3, 17], [4, 3, 17]]",
        "deepseek_c": "void default_function_kernel(float* T_mod, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 17; ++i2) {\n        compute[(((i0 * 51) + (i1 * 17)) + i2)] = asinhf(ph_0[(((i0 * 51) + (i1 * 17)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 12; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 17; ++i2_1) {\n      T_mod[((i0_i1_fused * 17) + i2_1)] = fmodf(sinf(ph_0[((i0_i1_fused * 17) + i2_1)]), ph_0[((i0_i1_fused * 17) + i2_1)]);\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_mod, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 204; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 204; ++ax0_ax1_fused_ax2_fused) {\n    T_mod[ax0_ax1_fused_ax2_fused] = fmodf(sinf(ph_0[ax0_ax1_fused_ax2_fused]), ph_0[ax0_ax1_fused_ax2_fused]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_mod, float* compute, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 108; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = asinhf(ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 12; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 17; ++ax2) {\n      T_mod[((ax0_ax1_fused * 17) + ax2)] = fmodf(sinf(ph_0[((ax0_ax1_fused * 17) + ax2)]), ph_0[((ax0_ax1_fused * 17) + ax2)]);\n    }\n  }\n}",
        "gemini3_c": "void default_function_kernel(float* compute, float* T_mod, float* ph_0) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 204; ++i0_i1_fused_i2_fused) {\n    T_mod[i0_i1_fused_i2_fused] = fmodf(sinf(ph_0[i0_i1_fused_i2_fused]), ph_0[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 3; ++i1) {\n      for (int32_t i2 = 0; i2 < 17; ++i2) {\n        compute[(((i0 * 51) + (i1 * 17)) + i2)] = asinhf(ph_0[(((i0 * 51) + (i1 * 17)) + i2)]);\n      }\n    }\n  }\n}\n//|End-of-Code|"
    },
    {
        "op_name": "graph_1",
        "c_code": "void default_function_kernel(float* T_transpose, float* ph, float* ph_1) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 363; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 22; ++ax2) {\n      for (int32_t ax3_outer = 0; ax3_outer < 3; ++ax3_outer) {\n        for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {\n          if (((ax3_outer * 4) + (ax3_inner >> 2)) < 11) {\n            T_transpose[((((ax0_ax1_fused * 968) + (ax2 * 44)) + (ax3_outer * 16)) + ax3_inner)] = (ph[((((((ax0_ax1_fused % 11) * 31944) + ((((ax3_outer * 8) + (ax3_inner >> 1)) % 22) * 1452)) + ((ax0_ax1_fused / 11) * 44)) + ((ax3_inner & 1) * 22)) + ax2)] + ph_1[(((((((ax0_ax1_fused % 121) / 11) * 31944) + (ax2 * 1452)) + ((((ax3_outer * 16) + ax3_inner) % 44) * 33)) + ((ax0_ax1_fused % 11) * 3)) + (ax0_ax1_fused / 121))]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_transpose, float* __restrict__ T_transpose_1) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {\n    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) < 43923) {\n      T_transpose[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = T_transpose_1[(((((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) % 1331) / 121) * 31944) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) / 1331) * 968)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 44) * 22)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + (((int)threadIdx.x) >> 2)) % 242) / 11))];\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_transpose, float* __restrict__ ph) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {\n    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) < 43923) {\n      T_transpose[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = ph[((((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 11) * 31944) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 7986) / 363) * 1452)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 131072) + (((int)blockIdx.x) * 512)) + (((int)threadIdx.x) >> 1)) / 3993) * 33)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 363) / 11))];\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_transpose, float* __restrict__ T_transpose_1) {\n  for (int ax0_ax1_fused_outer = 0; ax0_ax1_fused_outer < 2; ++ax0_ax1_fused_outer) {\n    if ((((ax0_ax1_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) < 43923) {\n      T_transpose[(((ax0_ax1_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = T_transpose_1[((((((ax0_ax1_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 968) * 363) + ((((ax0_ax1_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) / 121))];\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_transpose, float* __restrict__ ph) {\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {\n    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) < 43923) {\n      T_transpose[(((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = ph[((((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) / 3993) * 31944) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + (((int)threadIdx.x) >> 2)) % 242) / 11) * 1452)) + ((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) % 3993) / 121) * 44)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 44))];\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_transpose, float* __restrict__ T_transpose_1) {\n  for (int ax0_ax1_fused_outer = 0; ax0_ax1_fused_outer < 2; ++ax0_ax1_fused_outer) {\n    if ((((ax0_ax1_fused_outer * 32768) + (((int)blockIdx.x) * 128)) + (((int)threadIdx.x) >> 3)) < 43923) {\n      T_transpose[(((ax0_ax1_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] = (T_transpose[(((ax0_ax1_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))] + T_transpose_1[(((ax0_ax1_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))]);\n    }\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), ph_1: T.Buffer((11, 22, 44, 33), \"float32\"), T_transpose: T.Buffer((33, 11, 22, 44), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(363):\n            for ax2, ax3_outer, ax3_inner in T.grid(22, 3, 16):\n                if T.likely(ax3_outer * 4 + ax3_inner // 4 < 11):\n                    cse_var_2: T.int32 = ax0_ax1_fused % 11\n                    cse_var_1: T.int32 = ax3_outer * 16\n                    T_transpose_1 = T.Buffer((351384,), data=T_transpose.data)\n                    ph_2 = T.Buffer((351384,), data=ph.data)\n                    ph_3 = T.Buffer((351384,), data=ph_1.data)\n                    T_transpose_1[ax0_ax1_fused * 968 + ax2 * 44 + cse_var_1 + ax3_inner] = ph_2[cse_var_2 * 31944 + (ax3_outer * 8 + ax3_inner // 2) % 22 * 1452 + ax0_ax1_fused // 11 * 44 + ax3_inner % 2 * 22 + ax2] + ph_3[ax0_ax1_fused % 121 // 11 * 31944 + ax2 * 1452 + (cse_var_1 + ax3_inner) % 44 * 33 + cse_var_2 * 3 + ax0_ax1_fused // 121]",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44], [11, 22, 44, 33]]",
        "output_shape": "[[33, 11, 22, 44]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "T_transpose"
        ],
        "deepseek_c": "void default_function_kernel(float* T_transpose, float* T_transpose_1) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {\n    for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n      for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n        for (int32_t ax1 = 0; ax1 < 22; ++ax1) {\n          T_transpose[((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (ax1 * 1452)) + (ax2 * 44)) + ax3) + (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 131072) + (ax1 * 512)) + ((ax3 / 11) * 22))) + (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (ax1 * 256)) + ((ax2 / 11) * 11)))] = T_transpose_1[((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 32768) + (ax1 * 1452)) + (ax2 * 44)) + ax3) + (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 131072) + (ax1 * 512)) + ((ax3 / 11) * 22))) + (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (ax1 * 256)) + ((ax2 / 11) * 11))))];\n        }\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_transpose, float* T_transpose_1, float* T_transpose_2, float* T_transpose_3, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 22; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n        T_transpose[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3)] = ph[((((ax0_ax1_fused * 31944) + (ax2 * 1452)) + (ax3 * 33)) + (ax0_ax1_fused / 11))];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    for (int32_t ax4 = 0; ax4 < 33; ++ax4) {\n      for (int32_t ax5 = 0; ax5 < 44; ++ax5) {\n        T_transpose_1[(((ax0_ax1_fused_ax2_fused_ax3_fused * 1452) + (ax4 * 44)) + ax5)] = ph[(((((ax0_ax1_fused_ax2_fused_ax3_fused * 31944) + (ax4 * 1452)) + (ax5 * 33)) + (ax0_ax1_fused_ax2_fused_ax3_fused / 11)) + 11)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 22; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 33; ++ax2_1) {\n      for (int32_t ax3_1 = 0; ax3_1 < 44; ++ax3_1) {\n        T_transpose_2[(((ax0_ax1_fused_1 * 1452) + (ax2_1 * 44)) + ax3_1)] = T_transpose[(((((ax0_ax1_fused_1 * 31944) + (ax2_1 * 1452)) + (ax3_1 * 33)) + (ax0_ax1_fused_1 / 11)) + 11)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    for (int32_t ax4_1 = 0; ax4_1 < 33; ++ax4_1) {\n      for (int32_t ax5_1 = 0; ax5_1 < 44; ++ax5_1) {\n        T_transpose_3[(((ax0_ax1_fused_ax2_fused_ax3_fused_1 * 1452) + (ax4_1 * 44)) + ax5_1)] = T_transpose_1[(((((ax0_ax1_fused_ax2_fused_ax3_fused_1 * 31944) + (ax4_1 * 1452)) + (ax5_1 * 33)) + (ax0_ax1_fused_ax2_fused_ax3_fused_1 / 11)) + 11)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    for (int32_t ax4_2 = 0; ax4_2 < 33; ++ax4_2) {\n      for (int32_t ax5_2 = 0; ax5_2 < 44; ++ax5_2) {\n        T_transpose[(((ax0_ax1_fused_ax2_fused_ax3_fused_2 * 1452) + (ax4_2 * 44)) + ax5_2)] = (T_transpose[(((ax0_ax1_fused_ax2_fused_ax3_fused_2 * 1452) + (ax4_2 * 44)) + ax5_2)] + T_transpose_3[(((ax0_ax1_fused_ax2_fused_ax3_fused_2 * 1452) + (ax4_2 * 44)) + ax5_2)]);\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_transpose, float* T_transpose_1, float* T_transpose_2, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {\n    for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner < 31944; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner) {\n      T_transpose[((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 31944) + ax0_ax1_fused_ax2_fused_ax3_fused_inner)] = ph[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 31944) + ax0_ax1_fused_ax2_fused_ax3_fused_inner) % 33) * 1452) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 31944) + ax0_ax1_fused_ax2_fused_ax3_fused_inner) / 33) / 11) * 44) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 31944) + ax0_ax1_fused_ax2_fused_ax3_fused_inner) / 33) % 22))];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_outer = 0; ax0_ax1_fused_outer < 2; ++ax0_ax1_fused_outer) {\n    for (int32_t ax0_ax1_fused_inner = 0; ax0_ax1_fused_inner < 31944; ++ax0_ax1_fused_inner) {\n      T_transpose_1[ax0_ax1_fused_inner] = ph[(((((ax0_ax1_fused_outer * 31944) + ax0_ax1_fused_inner) % 44) * 31944) + ((((ax0_ax1_fused_outer * 31944) + ax0_ax1_fused_inner) / 44) / 11) * 1452) + ((((ax0_ax1_fused_outer * 31944) + ax0_ax1_fused_inner) / 44) % 22))];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_outer_1 = 0; ax0_ax1_fused_outer_1 < 2; ++ax0_ax1_fused_outer_1) {\n    for (int32_t ax0_ax1_fused_inner_1 = 0; ax0_ax1_fused_inner_1 < 31944; ++ax0_ax1_fused_inner_1) {\n      T_transpose_2[ax0_ax1_fused_inner_1] = T_transpose_1[(((((ax0_ax1_fused_outer_1 * 31944) + ax0_ax1_fused_inner_1) % 968) * 363) + ((((ax0_ax1_fused_outer_1 * 31944) + ax0_ax1_fused_inner_1) / 121) / 11))];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_outer_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_1 < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_1) {\n    for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_inner_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_1 < 31944; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_1) {\n      T_transpose[((ax0_ax1_fused_ax2_fused_ax3_fused_outer_1 * 31944) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_1)] = (T_transpose[((ax0_ax1_fused_ax2_fused_ax3_fused_outer_1 * 31944) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_1)] + T_transpose_2[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_1 * 31944) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_1) % 968) * 363) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_1 * 31944) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_1) / 121) / 11))]);\n    }\n  }\n}"
    },
    {
        "op_name": "graph_2",
        "c_code": "void default_function_kernel(float* T_softmax_norm, float* ph, float* ph_1) {\n  float T_softmax_maxelem[20];\n  float T_softmax_expsum[20];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 2; ++i1) {\n      T_softmax_maxelem[((i0 * 2) + i1)] = -3.402823e+38f;\n      for (int32_t k = 0; k < 6; ++k) {\n        T_softmax_maxelem[((i0 * 2) + i1)] = max(T_softmax_maxelem[((i0 * 2) + i1)], max((ph[(((i0 * 12) + (i1 * 6)) + k)] - ph_1[(((i0 * 12) + (i1 * 6)) + k)]), 0.000000e+00f));\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 10; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 2; ++i1_1) {\n      T_softmax_expsum[((i0_1 * 2) + i1_1)] = 0.000000e+00f;\n      for (int32_t k_1 = 0; k_1 < 6; ++k_1) {\n          int32_t v_ = ((int32_t)(floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_softmax_expsum[((i0_1 * 2) + i1_1)] = (T_softmax_expsum[((i0_1 * 2) + i1_1)] + max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (max((ph[(((i0_1 * 12) + (i1_1 * 6)) + k_1)] - ph_1[(((i0_1 * 12) + (i1_1 * 6)) + k_1)]), 0.000000e+00f) - T_softmax_maxelem[((i0_1 * 2) + i1_1)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 20; ++i0_i1_fused) {\n    for (int32_t i2_inner = 0; i2_inner < 6; ++i2_inner) {\n        int32_t v__1 = ((int32_t)(floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      T_softmax_norm[((i0_i1_fused * 6) + i2_inner)] = (max(((*(float *)(&(v__1))) * ((((((((((((((1.987569e-04f * (max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (max((ph[((i0_i1_fused * 6) + i2_inner)] - ph_1[((i0_i1_fused * 6) + i2_inner)]), 0.000000e+00f) - T_softmax_maxelem[i0_i1_fused])) / T_softmax_expsum[i0_i1_fused]);\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(120) default_function_kernel_7(float* __restrict__ T_reshape, float* __restrict__ T_softmax_maxelem, float* __restrict__ T_softmax_norm) {\n  T_softmax_norm[((int)threadIdx.x)] = (T_reshape[((int)threadIdx.x)] / T_softmax_maxelem[(((int)threadIdx.x) / 6)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(20) default_function_kernel_3(float* __restrict__ T_reshape, float* __restrict__ T_softmax_maxelem) {\n  T_softmax_maxelem[((int)threadIdx.x)] = -3.402823e+38f;\n  for (int k = 0; k < 6; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = max(T_softmax_maxelem[((int)threadIdx.x)], T_reshape[((((int)threadIdx.x) * 6) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(120) default_function_kernel_2(float* __restrict__ T_reshape) {\n  T_reshape[((int)threadIdx.x)] = max(T_reshape[((int)threadIdx.x)], 0.000000e+00f);\n}\n\nextern \"C\" __global__ void __launch_bounds__(120) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ ph) {\n  T_reshape[((int)threadIdx.x)] = ph[((int)threadIdx.x)];\n}\n\nextern \"C\" __global__ void __launch_bounds__(20) default_function_kernel_6(float* __restrict__ T_reshape, float* __restrict__ T_softmax_maxelem) {\n  T_softmax_maxelem[((int)threadIdx.x)] = 0.000000e+00f;\n  for (int k = 0; k < 6; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = (T_softmax_maxelem[((int)threadIdx.x)] + T_reshape[((((int)threadIdx.x) * 6) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(120) default_function_kernel_1(float* __restrict__ T_reshape, float* __restrict__ ph) {\n  T_reshape[((int)threadIdx.x)] = (T_reshape[((int)threadIdx.x)] - ph[((int)threadIdx.x)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(120) default_function_kernel_4(float* __restrict__ T_reshape, float* __restrict__ T_softmax_maxelem) {\n  T_reshape[((int)threadIdx.x)] = (T_reshape[((int)threadIdx.x)] - T_softmax_maxelem[(((int)threadIdx.x) / 6)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(120) default_function_kernel_5(float* __restrict__ T_reshape) {\n    int v_ = ((int)(floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_reshape[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reshape[((int)threadIdx.x)]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((4, 5, 6), \"float32\"), ph_1: T.Buffer((20, 6), \"float32\"), T_softmax_norm: T.Buffer((10, 2, 6), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([20], \"float32\", \"global\")\n        T_softmax_expsum = T.allocate([20], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((20,), data=T_softmax_maxelem)\n        ph_2 = T.Buffer((120,), data=ph.data)\n        ph_3 = T.Buffer((120,), data=ph_1.data)\n        for i0, i1 in T.grid(10, 2):\n            T_softmax_maxelem_1[i0 * 2 + i1] = T.float32(-3.4028234663852886e+38)\n            for k in range(6):\n                cse_var_2: T.int32 = i0 * 2 + i1\n                cse_var_1: T.int32 = i0 * 12 + i1 * 6 + k\n                T_softmax_maxelem_1[cse_var_2] = T.max(T_softmax_maxelem_1[cse_var_2], T.max(ph_2[cse_var_1] - ph_3[cse_var_1], T.float32(0)))\n        T_softmax_expsum_1 = T.Buffer((20,), data=T_softmax_expsum)\n        for i0, i1 in T.grid(10, 2):\n            T_softmax_expsum_1[i0 * 2 + i1] = T.float32(0)\n            for k in range(6):\n                cse_var_4: T.int32 = i0 * 2 + i1\n                cse_var_3: T.int32 = i0 * 12 + i1 * 6 + k\n                T_softmax_expsum_1[cse_var_4] = T_softmax_expsum_1[cse_var_4] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.max(ph_2[cse_var_3] - ph_3[cse_var_3], T.float32(0)) - T_softmax_maxelem_1[cse_var_4])\n        for i0_i1_fused in T.parallel(20):\n            for i2_inner in range(6):\n                cse_var_5: T.int32 = i0_i1_fused * 6 + i2_inner\n                T_softmax_norm_1 = T.Buffer((120,), data=T_softmax_norm.data)\n                T_softmax_norm_1[cse_var_5] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.max(ph_2[cse_var_5] - ph_3[cse_var_5], T.float32(0)) - T_softmax_maxelem_1[i0_i1_fused]) / T_softmax_expsum_1[i0_i1_fused]",
        "op_args": "None",
        "input_shape": "[[4, 5, 6], [20, 6]]",
        "output_shape": "[[10, 2, 6]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "T_softmax_norm"
        ],
        "deepseek_c": "",
        "starcoder_c": "void default_function_kernel(float* T_reshape, float* T_softmax_maxelem, float* T_softmax_norm, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 20; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      T_reshape[((ax0_ax1_fused * 6) + ax2)] = ph[((ax0_ax1_fused * 6) + ax2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 20; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 6; ++ax2_1) {\n      T_reshape[((ax0_ax1_fused_1 * 6) + ax2_1)] = (T_reshape[((ax0_ax1_fused_1 * 6) + ax2_1)] - ph[((ax0_ax1_fused_1 * 6) + ax2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 20; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 6; ++ax2_2) {\n      T_reshape[((ax0_ax1_fused_2 * 6) + ax2_2)] = max(T_reshape[((ax0_ax1_fused_2 * 6) + ax2_2)], 0.000000e+00f);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_3 = 0; ax0_ax1_fused_3 < 20; ++ax0_ax1_fused_3) {\n    for (int32_t ax2_3 = 0; ax2_3 < 6; ++ax2_3) {\n      T_softmax_maxelem[ax0_ax1_fused_3] = -3.402823e+38f;\n      for (int32_t k = 0; k < 6; ++k) {\n        T_softmax_maxelem[ax0_ax1_fused_3] = max(T_softmax_maxelem[ax0_ax1_fused_3], T_reshape[((ax0_ax1_fused_3 * 6) + k)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_4 = 0; ax0_ax1_fused_4 < 20; ++ax0_ax1_fused_4) {\n    for (int32_t ax2_4 = 0; ax2_4 < 6; ++ax2_4) {\n      T_reshape[((ax0_ax1_fused_4 * 6) + ax2_4)] = (T_reshape[((ax0_ax1_fused_4 * 6) + ax2_4)] / T_softmax_maxelem[ax0_ax1_fused_4]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_5 = 0; ax0_ax1_fused_5 < 20; ++ax0_ax1_fused_5) {\n    for (int32_t ax2_5 = 0; ax2_5 < 6; ++ax2_5) {\n      T_softmax_maxelem[ax0_ax1_fused_5] = 0.000000e+00f;\n      for (int32_t k_1 = 0; k_1 < 6; ++k_1) {\n        T_softmax_maxelem[ax0_ax1_fused_5] = (T_softmax_maxelem[ax0_ax1_fused_5] + T_reshape[((ax0_ax1_fused_5 * 6) + k_1)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_6 = 0; ax0_ax1_fused_6 < 20; ++ax0_ax1_fused_6) {\n    for (int32_t ax2_6 = 0; ax2_6 < 6; ++ax2_6) {\n      T_reshape[((ax0_ax1_fused_6 * 6) + ax2_6)] = (T_reshape[((ax0_ax1_fused_6 * 6) + ax2_6)] - T_softmax_maxelem[ax0_ax1_fused_6]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_7 = 0; ax0_ax1_fused_7 < 20; ++ax0_ax1_fused_7) {\n    for (int32_t ax2_7 = 0; ax2_7 < 6; ++ax2_7) {\n      T_softmax_norm[((ax0_ax1_fused_7 * 6) + ax2_7)] = (T_reshape[((ax0_ax1_fused_7 * 6) + ax2_7)] / T_softmax_maxelem[ax0_ax1_fused_7]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_reshape, float* T_reshape_1, float* T_reshape_2, float* T_reshape_3, float* T_reshape_4, float* T_reshape_5, float* T_reshape_6, float* T_softmax_maxelem, float* T_softmax_maxelem_1, float* T_softmax_norm, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 120; ++ax0_ax1_fused_ax2_fused) {\n    T_reshape[ax0_ax1_fused_ax2_fused] = ph[ax0_ax1_fused_ax2_fused];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 120; ++ax0_ax1_fused_ax2_fused_1) {\n    T_reshape_1[ax0_ax1_fused_ax2_fused_1] = (T_reshape[ax0_ax1_fused_ax2_fused_1] - ph[ax0_ax1_fused_ax2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 120; ++ax0_ax1_fused_ax2_fused_2) {\n    T_reshape_2[ax0_ax1_fused_ax2_fused_2] = max(T_reshape_1[ax0_ax1_fused_ax2_fused_2], 0.000000e+00f);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 20; ++ax0_ax1_fused_ax2_fused_3) {\n    T_softmax_maxelem[ax0_ax1_fused_ax2_fused_3] = -3.402823e+38f;\n    for (int32_t k = 0; k < 6; ++k) {\n      T_softmax_maxelem[ax0_ax1_fused_ax2_fused_3] = max(T_softmax_maxelem[ax0_ax1_fused_ax2_fused_3], T_reshape_2[((ax0_ax1_fused_ax2_fused_3 * 6) + k)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 20; ++ax0_ax1_fused_ax2_fused_4) {\n    T_reshape_3[ax0_ax1_fused_ax2_fused_4] = (T_reshape_2[((ax0_ax1_fused_ax2_fused_4 * 6) + 0)] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_4]);\n    T_reshape_3[((ax0_ax1_fused_ax2_fused_4 * 6) + 1)] = (T_reshape_2[((ax0_ax1_fused_ax2_fused_4 * 6) + 1)] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_4]);\n    T_reshape_3[((ax0_ax1_fused_ax2_fused_4 * 6) + 2)] = (T_reshape_2[((ax0_ax1_fused_ax2_fused_4 * 6) + 2)] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_4]);\n    T_reshape_3[((ax0_ax1_fused_ax2_fused_4 * 6) + 3)] = (T_reshape_2[((ax0_ax1_fused_ax2_fused_4 * 6) + 3)] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_4]);\n    T_reshape_3[((ax0_ax1_fused_ax2_fused_4 * 6) + 4)] = (T_reshape_2[((ax0_ax1_fused_ax2_fused_4 * 6) + 4)] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_4]);\n    T_reshape_3[((ax0_ax1_fused_ax2_fused_4 * 6) + 5)] = (T_reshape_2[((ax0_ax1_fused_ax2_fused_4 * 6) + 5)] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_4]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_5 = 0; ax0_ax1_fused_ax2_fused_5 < 20; ++ax0_ax1_fused_ax2_fused_5) {\n    T_softmax_maxelem_1[ax0_ax1_fused_ax2_fused_5] = 0.000000e+00f;\n    for (int32_t k_1 = 0; k_1 < 6; ++k_1) {\n      T_softmax_maxelem_1[ax0_ax1_fused_ax2_fused_5] = (T_softmax_maxelem_1[ax0_ax1_fused_ax2_fused_5] + T_reshape_3[((ax0_ax1_fused_ax2_fused_5 * 6) + k_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_6 = 0; ax0_ax1_fused_ax2_fused_6 < 120; ++ax0_ax1_fused_ax2_fused_6) {\n    T_reshape_4[ax0_ax1_fused_ax2_fused_6] = T_reshape_3[ax0_ax1_fused_ax2_fused_6];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_7 = 0; ax0_ax1_fused_ax2_fused_7 < 120; ++ax0_ax1_fused_ax2_fused_7) {\n    T_reshape_5[ax0_ax1_fused_ax2_fused_7] = (T_reshape_4[ax0_ax1_fused_ax2_fused_7] - T_softmax_maxelem_1[((ax0_ax1_fused_ax2_fused_7 / 6) / 5)]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_8 = 0; ax0_ax1_fused_ax2_fused_8 < 120; ++ax0_ax1_fused_ax2_fused_8) {\n    T_reshape_6[ax0_ax1_fused_ax2_fused_8] = (T_reshape_5[ax0_ax1_fused_ax2_fused_8] - T_softmax_maxelem_1[((ax0_ax1_fused_ax2_fused_8 / 6) / 5)]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_9 = 0; ax0_ax1_fused_ax2_fused_9 < 120; ++ax0_ax1_fused_ax2_fused_9) {\n    T_reshape_6[ax0_ax1_fused_ax2_fused_9] = max(T_reshape_6[ax0_ax1_fused_ax2_fused_9], 0.000000e+00f);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_10 = 0; ax0_ax1_fused_ax2_fused_10 < 120; ++ax0_ax1_fused_ax2_fused_10) {\n    T_softmax_norm[ax0_ax1_fused_ax2_fused_10] = 0.000000e+00f;\n    for (int32_t k_2 = 0; k_2 < 6; ++k_2) {\n      T_softmax_norm[ax0_ax1_fused_ax2_fused_10] = (T_softmax_norm[ax0_ax1_fused_ax2_fused_10] + T_reshape_6[((ax0_ax1_fused_ax2_fused_10 * 6) + k_2)]);\n    }\n    T_softmax_norm[ax0_ax1_fused_ax2_fused_10] = (T_reshape_6[ax0_ax1_fused_ax2_fused_10] / T_softmax_norm[ax0_ax1_fused_ax2_fused_10]);\n  }\n}"
    },
    {
        "op_name": "graph_3",
        "c_code": "void default_function_kernel(float* T_fast_exp, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 64; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 50; ++ax2) {\n      for (int32_t ax3_outer = 0; ax3_outer < 4; ++ax3_outer) {\n        for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {\n          if (((ax3_outer * 8) + (ax3_inner >> 1)) < 25) {\n            float cse_var_2 = (((((float)ax2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n            float cse_var_1 = (((((float)((ax3_outer * 16) + ax3_inner)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n              int32_t v_ = ((int32_t)(floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            T_fast_exp[((((ax0_ax1_fused * 2500) + (ax2 * 50)) + (ax3_outer * 16)) + ax3_inner)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), ((0.000000e+00f < (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f)) ? (((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) : ((((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) * 1.000000e-01f) * 5.000000e-01f)));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_fast_exp, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n      int v_ = ((int)(floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ ph, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((((ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min(((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min(((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0))] * (1.000000e+00f - ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min(((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min((((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0))] * ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * (1.000000e+00f - ((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (((ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min((((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min(((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0))] * (1.000000e+00f - ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min((((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min((((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0))] * ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * 1.000000e-01f);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] : (resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * 5.000000e-01f));\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((4, 16, 32, 32), \"float32\"), T_fast_exp: T.Buffer((4, 16, 50, 50), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(64):\n            for ax2, ax3_outer, ax3_inner in T.grid(50, 4, 16):\n                if T.likely(ax3_outer * 8 + ax3_inner // 2 < 25):\n                    cse_var_4: T.int32 = ax3_outer * 16\n                    cse_var_3: T.int32 = ax0_ax1_fused * 1024\n                    cse_var_2: T.float32 = (T.Cast(\"float32\", ax2) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                    cse_var_1: T.float32 = (T.Cast(\"float32\", cse_var_4 + ax3_inner) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                    T_fast_exp_1 = T.Buffer((160000,), data=T_fast_exp.data)\n                    ph_1 = T.Buffer((65536,), data=ph.data)\n                    T_fast_exp_1[ax0_ax1_fused * 2500 + ax2 * 50 + cse_var_4 + ax3_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.if_then_else(T.float32(0) < ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001), ((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) * T.float32(0.10000000000000001) * T.float32(0.5)))",
        "op_args": "None",
        "input_shape": "[[4, 16, 32, 32]]",
        "output_shape": "[[4, 16, 50, 50]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_fast_exp"
        ],
        "deepseek_c": "void default_function_kernel(float* __restrict__ ph, float* __restrict__ resize) {\n  for (int32_t ax0_ax1_fused_ax2_fused_outer_outer = 0; ax0_ax1_fused_ax2_fused_outer_outer < 1000; ++ax0_ax1_fused_ax2_fused_outer_outer) {\n    for (int32_t ax0_inner = 0; ax0_inner < 16; ++ax0_inner) {\n      for (int32_t ax1_inner = 0; ax1_inner < 32; ++ax1_inner) {\n        for (int32_t ax2_inner = 0; ax2_inner < 32; ++ax2_inner) {\n          resize[((((ax0_ax1_fused_ax2_fused_outer_outer * 1024) + (ax0_inner * 64)) + (ax1_inner * 32)) + ax2_inner)] = ((((ph[((((((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner / 4)) / 625) * 1024) + (max(min(((int32_t)floorf((((((float)(((((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min(((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0)))] * (1.000000e+00f - ((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner / 4)) / 625) * 1024) + (max(min(((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min((((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0)))] * ((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner / 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int32_t)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner / 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (((ph[((((((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner / 4)) / 625) * 1024) + (max(min((((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0)))] * (1.000000e+00f - ((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner / 4)) / 625) * 1024) + (max(min((((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0)))] * ((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int32_t)floorf((((((float)(((ax1_inner * 8) + (ax2_inner % 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner / 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int32_t)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer_outer * 256) + (ax0_inner * 16)) + (ax1_inner * 8)) + (ax2_inner / 4))) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))));\n        }\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_fast_exp, float* ph, float* resize) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 64; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 32; ++i2) {\n      for (int32_t i3 = 0; i3 < 32; ++i3) {\n        resize[(((i0_i1_fused * 1024) + (i2 * 32)) + i3)] = ((((ph[(((i0_i1_fused * 1024) + (i2 * 32)) + i3)] * (1.000000e+00f - ((((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)floorf((((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))) + (ph[(((i0_i1_fused * 1024) + (i2 * 32)) + i3)] * (((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)floorf((((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))) * (1.000000e+00f - ((((((float)i3) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)floorf((((((float)i3) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (((ph[(((i0_i1_fused * 1024) + (i2 * 32)) + i3)] * (1.000000e+00f - ((((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)floorf((((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))) + (ph[(((i0_i1_fused * 1024) + (i2 * 32)) + i3)] * (((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)floorf((((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))) * (((((float)i3) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)floorf((((((float)i3) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2048; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3_1 = 0; i3_1 < 32; ++i3_1) {\n      resize[((i0_i1_fused_i2_fused * 32) + i3_1)] = (resize[((i0_i1_fused_i2_fused * 32) + i3_1)] * 1.000000e-01f);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2048; ++i0_i1_fused_i2_fused_1) {\n    for (int32_t i3_2 = 0; i3_2 < 32; ++i3_2) {\n      resize[((i0_i1_fused_i2_fused_1 * 32) + i3_2)] = ((0.000000e+00f < resize[((i0_i1_fused_i2_fused_1 * 32) + i3_2)])? resize[((i0_i1_fused_i2_fused_1 * 32) + i3_2)] : (resize[((i0_i1_fused_i2_fused_1 * 32) + i3_2)] * 5.000000e-01f));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 65536; ++i0_i1_fused_i2_fused_i3_fused) {\n    int32_t v_ = ((int32_t)(floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[i0_i1_fused_i2_fused_i3_fused] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), resize[i0_i1_fused_i2_fused_i3_fused]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* ph, float* resize) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 2048; ++i0_i1_fused_i2_fused_i3_fused) {\n    resize[i0_i1_fused_i2_fused_i3_fused] = (ph[i0_i1_fused_i2_fused_i3_fused] * 1.000000e-01f);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_1 = 0; i0_i1_fused_i2_fused_i3_fused_1 < 2048; ++i0_i1_fused_i2_fused_i3_fused_1) {\n    resize[i0_i1_fused_i2_fused_i3_fused_1] = (resize[i0_i1_fused_i2_fused_i3_fused_1] * 1.000000e-01f);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_2 = 0; i0_i1_fused_i2_fused_i3_fused_2 < 2048; ++i0_i1_fused_i2_fused_i3_fused_2) {\n    resize[i0_i1_fused_i2_fused_i3_fused_2] = ((0.000000e+00f < resize[i0_i1_fused_i2_fused_i3_fused_2]) ? resize[i0_i1_fused_i2_fused_i3_fused_2] : (resize[i0_i1_fused_i2_fused_i3_fused_2] * 5.000000e-01f));\n  }\n}"
    },
    {
        "op_name": "graph_4",
        "c_code": "void default_function_kernel(float* T_transpose_red, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 10; ++ax0_ax1_fused) {\n    for (int32_t ax2_inner = 0; ax2_inner < 6; ++ax2_inner) {\n      T_transpose_red[((ax0_ax1_fused * 6) + ax2_inner)] = 0.000000e+00f;\n      for (int32_t k1 = 0; k1 < 24; ++k1) {\n          int32_t v_ = ((int32_t)(floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_transpose_red[((ax0_ax1_fused * 6) + ax2_inner)] = (T_transpose_red[((ax0_ax1_fused * 6) + ax2_inner)] + max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), ph[((((k1 * 60) + ((ax0_ax1_fused >> 1) * 12)) + (ax2_inner * 2)) + (ax0_ax1_fused & 1))]));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_reshape) {\n  if (((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) < 45) {\n      int v_ = ((int)(floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_reshape, float* __restrict__ T_reshape_1) {\n  if (((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) < 45) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_reshape_1[((((((((((int)blockIdx.x) * 40) + (((int)threadIdx.x) >> 2)) % 72) / 3) * 60) + ((((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) / 9) * 12)) + ((((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 6) * 2)) + ((((((int)blockIdx.x) * 2) + (((int)threadIdx.x) >> 1)) % 6) / 3))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(60) default_function_kernel_4(float* __restrict__ T_reshape, float* __restrict__ T_transpose_red) {\n  T_transpose_red[((int)threadIdx.x)] = 0.000000e+00f;\n  for (int k1 = 0; k1 < 24; ++k1) {\n    T_transpose_red[((int)threadIdx.x)] = (T_transpose_red[((int)threadIdx.x)] + T_reshape[((((((int)threadIdx.x) / 12) * 288) + (k1 * 12)) + (((int)threadIdx.x) % 12))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_reshape, float* __restrict__ T_reshape_1) {\n  if (((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) < 45) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_reshape_1[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 15) * 60) + ((((((int)blockIdx.x) * 2) + (((int)threadIdx.x) >> 1)) % 30) * 2)) + (((int)threadIdx.x) & 1))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 5)) < 45) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[(((((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) / 15) * 240) + (((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 2)) % 60) / 3) * 12)) + ((((((int)threadIdx.x) >> 2) + ((int)blockIdx.x)) % 3) * 4)) + (((int)threadIdx.x) & 3))];\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((10, 20, 3, 4), \"float32\"), T_transpose_red: T.Buffer((5, 2, 6), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(10):\n            for ax2_inner in range(6):\n                T_transpose_red_1 = T.Buffer((60,), data=T_transpose_red.data)\n                T_transpose_red_1[ax0_ax1_fused * 6 + ax2_inner] = T.float32(0)\n                for k1 in range(24):\n                    cse_var_2: T.int32 = ax0_ax1_fused * 6 + ax2_inner\n                    cse_var_1: T.int32 = k1 * 60 + ax0_ax1_fused // 2 * 12 + ax2_inner * 2 + ax0_ax1_fused % 2\n                    ph_1 = T.Buffer((2400,), data=ph.data)\n                    T_transpose_red_1[cse_var_2] = T_transpose_red_1[cse_var_2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_1[cse_var_1])",
        "op_args": "None",
        "input_shape": "[[10, 20, 3, 4]]",
        "output_shape": "[[5, 2, 6]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_transpose_red"
        ],
        "deepseek_c": "void default_function_kernel(float* T_reshape, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 2400; ++i0_i1_fused_i2_fused_i3_fused) {\n    T_reshape[i0_i1_fused_i2_fused_i3_fused] = ph[((((((i0_i1_fused_i2_fused_i3_fused / 120) * 240) + (((i0_i1_fused_i2_fused_i3_fused % 120) / 3) * 12)) + (((i0_i1_fused_i2_fused_i3_fused % 3) * 4) + (i0_i1_fused_i2_fused_i3_fused / 360))))];\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_reshape, float* T_reshape_1, float* T_reshape_2, float* T_transpose_red) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 200; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n        T_reshape[(((ax0_ax1_fused * 12) + (ax2 * 4)) + ax3)] = ((((((((1.987569e-04f * (max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((((((ax0_ax1_fused / 20) * 240) + (ax2 * 40)) + (ax3 * 2)) + (ax0_ax1_fused % 20))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 600; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3_1 = 0; ax3_1 < 4; ++ax3_1) {\n      T_reshape_1[((ax0_ax1_fused_ax2_fused * 4) + ax3_1)] = T_reshape[((((((ax0_ax1_fused_ax2_fused / 30) * 240) + (((ax0_ax1_fused_ax2_fused % 30) / 3) * 12)) + ((ax0_ax1_fused_ax2_fused % 3) * 4)) + ax3_1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 200; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 3; ++ax2_1) {\n      for (int32_t ax3_2 = 0; ax3_2 < 4; ++ax3_2) {\n        T_reshape_2[(((ax0_ax1_fused_1 * 12) + (ax2_1 * 4)) + ax3_2)] = T_reshape_1[((((((ax0_ax1_fused_1 / 20) * 240) + (ax2_1 * 40)) + (ax3_2 * 2)) + (ax0_ax1_fused_1 % 20))];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 600; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t k1 = 0; k1 < 24; ++k1) {\n      T_transpose_red[ax0_ax1_fused_ax2_fused_1] = (T_transpose_red[ax0_ax1_fused_ax2_fused_1] + T_reshape_2[((((ax0_ax1_fused_ax2_fused_1 / 30) * 288) + (k1 * 12)) + (ax0_ax1_fused_ax2_fused_1 % 12))]);\n    }\n  }\n}",
        "codellama_c": "#pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 600; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n      T_reshape[((ax0_ax1_fused_ax2_fused * 4) + ax3)] = ph[((((ax0_ax1_fused_ax2_fused / 12) * 240) + (((ax0_ax1_fused_ax2_fused % 12) / 3) * 12)) + ax3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 600; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t ax3_1 = 0; ax3_1 < 2; ++ax3_1) {\n      T_reshape_1[((ax0_ax1_fused_ax2_fused_1 * 2) + ax3_1)] = T_reshape[(((ax0_ax1_fused_ax2_fused_1 * 2) + ax3_1) * 4)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 600; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t ax3_2 = 0; ax3_2 < 2; ++ax3_2) {\n      T_reshape_2[((ax0_ax1_fused_ax2_fused_2 * 2) + ax3_2)] = T_reshape[((((ax0_ax1_fused_ax2_fused_2 * 2) + ax3_2) * 4) + 1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 600; ++ax0_ax1_fused_ax2_fused_3) {\n    for (int32_t ax3_3 = 0; ax3_3 < 2; ++ax3_3) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_3 * 2) + ax3_3) + 200)] = T_reshape[((((ax0_ax1_fused_ax2_fused_3 * 2) + ax3_3) * 4) + 2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 600; ++ax0_ax1_fused_ax2_fused_4) {\n    for (int32_t ax3_4 = 0; ax3_4 < 2; ++ax3_4) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_4 * 2) + ax3_4) + 400)] = T_reshape[((((ax0_ax1_fused_ax2_fused_4 * 2) + ax3_4) * 4) + 3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_5 = 0; ax0_ax1_fused_ax2_fused_5 < 600; ++ax0_ax1_fused_ax2_fused_5) {\n    for (int32_t ax3_5 = 0; ax3_5 < 2; ++ax3_5) {\n      T_reshape_1[(((ax0_ax1_fused_ax2_fused_5 * 2) + ax3_5) + 200)] = T_reshape[((((ax0_ax1_fused_ax2_fused_5 * 2) + ax3_5) * 4) + 2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_6 = 0; ax0_ax1_fused_ax2_fused_6 < 600; ++ax0_ax1_fused_ax2_fused_6) {\n    for (int32_t ax3_6 = 0; ax3_6 < 2; ++ax3_6) {\n      T_reshape_1[(((ax0_ax1_fused_ax2_fused_6 * 2) + ax3_6) + 400)] = T_reshape[((((ax0_ax1_fused_ax2_fused_6 * 2) + ax3_6) * 4) + 3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_7 = 0; ax0_ax1_fused_ax2_fused_7 < 600; ++ax0_ax1_fused_ax2_fused_7) {\n    for (int32_t ax3_7 = 0; ax3_7 < 2; ++ax3_7) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_7 * 2) + ax3_7) + 600)] = T_reshape[((((ax0_ax1_fused_ax2_fused_7 * 2) + ax3_7) * 4) + 1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_8 = 0; ax0_ax1_fused_ax2_fused_8 < 600; ++ax0_ax1_fused_ax2_fused_8) {\n    for (int32_t ax3_8 = 0; ax3_8 < 2; ++ax3_8) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_8 * 2) + ax3_8) + 800)] = T_reshape[((((ax0_ax1_fused_ax2_fused_8 * 2) + ax3_8) * 4) + 2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_9 = 0; ax0_ax1_fused_ax2_fused_9 < 600; ++ax0_ax1_fused_ax2_fused_9) {\n    for (int32_t ax3_9 = 0; ax3_9 < 2; ++ax3_9) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_9 * 2) + ax3_9) + 1000)] = T_reshape[((((ax0_ax1_fused_ax2_fused_9 * 2) + ax3_9) * 4) + 3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_10 = 0; ax0_ax1_fused_ax2_fused_10 < 600; ++ax0_ax1_fused_ax2_fused_10) {\n    for (int32_t ax3_10 = 0; ax3_10 < 2; ++ax3_10) {\n      T_reshape_1[(((ax0_ax1_fused_ax2_fused_10 * 2) + ax3_10) + 600)] = T_reshape[((((ax0_ax1_fused_ax2_fused_10 * 2) + ax3_10) * 4) + 2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_11 = 0; ax0_ax1_fused_ax2_fused_11 < 600; ++ax0_ax1_fused_ax2_fused_11) {\n    for (int32_t ax3_11 = 0; ax3_11 < 2; ++ax3_11) {\n      T_reshape_1[(((ax0_ax1_fused_ax2_fused_11 * 2) + ax3_11) + 800)] = T_reshape[((((ax0_ax1_fused_ax2_fused_11 * 2) + ax3_11) * 4) + 3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_12 = 0; ax0_ax1_fused_ax2_fused_12 < 600; ++ax0_ax1_fused_ax2_fused_12) {\n    for (int32_t ax3_12 = 0; ax3_12 < 2; ++ax3_12) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_12 * 2) + ax3_12) + 1200)] = T_reshape[((((ax0_ax1_fused_ax2_fused_12 * 2) + ax3_12) * 4) + 1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_13 = 0; ax0_ax1_fused_ax2_fused_13 < 600; ++ax0_ax1_fused_ax2_fused_13) {\n    for (int32_t ax3_13 = 0; ax3_13 < 2; ++ax3_13) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_13 * 2) + ax3_13) + 1400)] = T_reshape[((((ax0_ax1_fused_ax2_fused_13 * 2) + ax3_13) * 4) + 2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_14 = 0; ax0_ax1_fused_ax2_fused_14 < 600; ++ax0_ax1_fused_ax2_fused_14) {\n    for (int32_t ax3_14 = 0; ax3_14 < 2; ++ax3_14) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_14 * 2) + ax3_14) + 1600)] = T_reshape[((((ax0_ax1_fused_ax2_fused_14 * 2) + ax3_14) * 4) + 3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_15 = 0; ax0_ax1_fused_ax2_fused_15 < 600; ++ax0_ax1_fused_ax2_fused_15) {\n    for (int32_t ax3_15 = 0; ax3_15 < 2; ++ax3_15) {\n      T_reshape_1[(((ax0_ax1_fused_ax2_fused_15 * 2) + ax3_15) + 1200)] = T_reshape[((((ax0_ax1_fused_ax2_fused_15 * 2) + ax3_15) * 4) + 2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_16 = 0; ax0_ax1_fused_ax2_fused_16 < 600; ++ax0_ax1_fused_ax2_fused_16) {\n    for (int32_t ax3_16 = 0; ax3_16 < 2; ++ax3_16) {\n      T_reshape_1[(((ax0_ax1_fused_ax2_fused_16 * 2) + ax3_16) + 1400)] = T_reshape[((((ax0_ax1_fused_ax2_fused_16 * 2) + ax3_16) * 4) + 3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_17 = 0; ax0_ax1_fused_ax2_fused_17 < 600; ++ax0_ax1_fused_ax2_fused_17) {\n    for (int32_t ax3_17 = 0; ax3_17 < 2; ++ax3_17) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_17 * 2) + ax3_17) + 1800)] = T_reshape[((((ax0_ax1_fused_ax2_fused_17 * 2) + ax3_17) * 4) + 1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_18 = 0; ax0_ax1_fused_ax2_fused_18 < 600; ++ax0_ax1_fused_ax2_fused_18) {\n    for (int32_t ax3_18 = 0; ax3_18 < 2; ++ax3_18) {\n      T_reshape_2[(((ax0_ax1_fused_ax2_fused_18 * 2) + ax3_18) + 2000)] = T_reshape[((((ax0_ax1_fused_ax2_fused_18 * 2) + ax3_18) * 4) + 2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_19 = 0; ax0_ax1_fused_ax2_fused_19 < 600; ++ax0_ax1_fused_ax2_fused_19) {\n    for (int32_t ax3_19 = 0; ax3_19 < 2;"
    },
    {
        "op_name": "graph_5",
        "c_code": "void default_function_kernel(float* T_power, float* ph, float* ph_1) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 128; ++ax0_ax1_fused) {\n    for (int32_t ax2_outer = 0; ax2_outer < 8; ++ax2_outer) {\n      for (int32_t ax2_inner = 0; ax2_inner < 16; ++ax2_inner) {\n        if (((ax2_outer * 2) + (ax2_inner >> 3)) < 15) {\n          T_power[(((ax0_ax1_fused * 120) + (ax2_outer * 16)) + ax2_inner)] = powf(((1.100000e+01f - (ph[((((ax2_outer * 2048) + (ax2_inner * 128)) + ((ax0_ax1_fused & 31) * 4)) + (ax0_ax1_fused >> 5))] + 3.000000e+00f)) * ph_1[(((ax0_ax1_fused * 120) + (ax2_outer * 16)) + ax2_inner)]), 2.000000e+00f);\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_transpose) {\n  T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.100000e+01f - T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_reshape, float* __restrict__ T_transpose) {\n  T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_reshape[((((((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) % 120) * 128) + (((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) % 480) / 15) * 4)) + (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) / 15))];\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ ph) {\n  T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_transpose) {\n  T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + 3.000000e+00f);\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_transpose, float* __restrict__ ph) {\n  T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * ph[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_power, float* __restrict__ T_transpose) {\n  T_power[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = powf(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 2.000000e+00f);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((10, 20, 32, 4), \"float32\"), ph_1: T.Buffer((4, 32, 120), \"float32\"), T_power: T.Buffer((4, 32, 120), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(128):\n            for ax2_outer, ax2_inner in T.grid(8, 16):\n                if T.likely(ax2_outer * 2 + ax2_inner // 8 < 15):\n                    T_power_1 = T.Buffer((15360,), data=T_power.data)\n                    ph_2 = T.Buffer((25600,), data=ph.data)\n                    ph_3 = T.Buffer((15360,), data=ph_1.data)\n                    cse_var_1: T.int32 = ax0_ax1_fused * 120 + ax2_outer * 16 + ax2_inner\n                    T_power_1[cse_var_1] = T.pow((T.float32(11) - (ph_2[ax2_outer * 2048 + ax2_inner * 128 + ax0_ax1_fused % 32 * 4 + ax0_ax1_fused // 32] + T.float32(3))) * ph_3[cse_var_1], T.float32(2))",
        "op_args": "None",
        "input_shape": "[[10, 20, 32, 4], [4, 32, 120]]",
        "output_shape": "[[4, 32, 120]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "T_power"
        ],
        "deepseek_c": "void default_function_kernel(float* T_reshape, float* ph) {\n  float T_transpose[1280];\n  float T_power[1280];\n  for (int32_t ax0_ax1_fused_ax2_fused_outer = 0; ax0_ax1_fused_ax2_fused_outer < 1280; ++ax0_ax1_fused_ax2_fused_outer) {\n    T_transpose[ax0_ax1_fused_ax2_fused_outer] = T_reshape[ax0_ax1_fused_ax2_fused_outer];\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_outer_1 = 0; ax0_ax1_fused_ax2_fused_outer_1 < 1280; ++ax0_ax1_fused_ax2_fused_outer_1) {\n    T_transpose[ax0_ax1_fused_ax2_fused_outer_1] = (1.100000e+01f - T_transpose[ax0_ax1_fused_ax2_fused_outer_1]);\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_outer_2 = 0; ax0_ax1_fused_ax2_fused_outer_2 < 1280; ++ax0_ax1_fused_ax2_fused_outer_2) {\n    T_transpose[ax0_ax1_fused_ax2_fused_outer_2] = (T_transpose[ax0_ax1_fused_ax2_fused_outer_2] + 3.000000e+00f);\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_outer_3 = 0; ax0_ax1_fused_ax2_fused_outer_3 < 1280; ++ax0_ax1_fused_ax2_fused_outer_3) {\n    T_transpose[ax0_ax1_fused_ax2_fused_outer_3] = (T_transpose[ax0_ax1_fused_ax2_fused_outer_3] * ph[ax0_ax1_fused_ax2_fused_outer_3]);\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_outer_4 = 0; ax0_ax1_fused_ax2_fused_outer_4 < 1280; ++ax0_ax1_fused_ax2_fused_outer_4) {\n    T_power[ax0_ax1_fused_ax2_fused_outer_4] = powf(T_transpose[ax0_ax1_fused_ax2_fused_outer_4], 2.000000e+00f);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_power, float* T_reshape, float* T_transpose, float* T_transpose_1, float* T_transpose_2, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 200; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 32; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n        T_reshape[(((ax0_ax1_fused * 128) + (ax2 * 4)) + ax3)] = ph[(((ax0_ax1_fused * 128) + (ax2 * 4)) + ax3)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 640; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3_1 = 0; ax3_1 < 4; ++ax3_1) {\n      T_transpose[(((ax0_ax1_fused_ax2_fused * 4) + ax3_1)] = T_reshape[(((ax0_ax1_fused_ax2_fused * 4) + ax3_1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 640; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t ax3_2 = 0; ax3_2 < 4; ++ax3_2) {\n      T_transpose_1[(((ax0_ax1_fused_ax2_fused_1 * 4) + ax3_2)] = (T_transpose[(((ax0_ax1_fused_ax2_fused_1 * 4) + ax3_2)] + 3.000000e+00f);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 640; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t ax3_3 = 0; ax3_3 < 4; ++ax3_3) {\n      T_transpose_2[(((ax0_ax1_fused_ax2_fused_2 * 4) + ax3_3)] = (1.100000e+01f - T_transpose[(((ax0_ax1_fused_ax2_fused_2 * 4) + ax3_3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 640; ++ax0_ax1_fused_ax2_fused_3) {\n    for (int32_t ax3_4 = 0; ax3_4 < 4; ++ax3_4) {\n      T_transpose_2[(((ax0_ax1_fused_ax2_fused_3 * 4) + ax3_4)] = (T_transpose_2[(((ax0_ax1_fused_ax2_fused_3 * 4) + ax3_4)] * ph[(((ax0_ax1_fused_ax2_fused_3 * 4) + ax3_4)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 640; ++ax0_ax1_fused_ax2_fused_4) {\n    for (int32_t ax3_5 = 0; ax3_5 < 4; ++ax3_5) {\n      T_power[(((ax0_ax1_fused_ax2_fused_4 * 4) + ax3_5)] = powf(T_transpose[(((ax0_ax1_fused_ax2_fused_4 * 4) + ax3_5)], 2.000000e+00f);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_reshape, float* T_transpose, float* T_power, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 6400; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 4; ++ax3) {\n      T_reshape[((ax0_ax1_fused_ax2_fused * 4) + ax3)] = ph[(((ax0_ax1_fused_ax2_fused % 120) * 4) + ax3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 6400; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t ax3_1 = 0; ax3_1 < 4; ++ax3_1) {\n      T_transpose[(((ax3_1 * 6400) + ax0_ax1_fused_ax2_fused_1))] = T_reshape[(((ax0_ax1_fused_ax2_fused_1 * 4) + ax3_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 6400; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t ax3_2 = 0; ax3_2 < 4; ++ax3_2) {\n      T_transpose[(((ax3_2 * 6400) + ax0_ax1_fused_ax2_fused_2))] = (1.100000e+01f - T_transpose[(((ax3_2 * 6400) + ax0_ax1_fused_ax2_fused_2))]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 6400; ++ax0_ax1_fused_ax2_fused_3) {\n    for (int32_t ax3_3 = 0; ax3_3 < 4; ++ax3_3) {\n      T_transpose[(((ax3_3 * 6400) + ax0_ax1_fused_ax2_fused_3))] = (T_transpose[(((ax3_3 * 6400) + ax0_ax1_fused_ax2_fused_3))] + 3.000000e+00f);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 6400; ++ax0_ax1_fused_ax2_fused_4) {\n    for (int32_t ax3_4 = 0; ax3_4 < 4; ++ax3_4) {\n      T_power[(((ax3_4 * 6400) + ax0_ax1_fused_ax2_fused_4))] = powf(T_transpose[(((ax3_4 * 6400) + ax0_ax1_fused_ax2_fused_4))], 2.000000e+00f);\n    }\n  }\n}"
    },
    {
        "op_name": "graph_6",
        "c_code": "void default_function_kernel(float* T_transpose, float* ph) {\n  float T_softmax_maxelem[1800];\n  float compute[1800];\n  for (int32_t i0 = 0; i0 < 20; ++i0) {\n    for (int32_t i1 = 0; i1 < 90; ++i1) {\n      T_softmax_maxelem[((i0 * 90) + i1)] = -3.402823e+38f;\n      for (int32_t k = 0; k < 10; ++k) {\n        T_softmax_maxelem[((i0 * 90) + i1)] = max(T_softmax_maxelem[((i0 * 90) + i1)], ((10 <= i0) ? ph[(((((i0 * 31944) + (k * 1452)) + ((i1 / 9) * 44)) + (i1 % 9)) - 269026)] : ph[(((((i0 * 31944) + (k * 1452)) + ((i1 / 9) * 44)) + (i1 % 9)) + 16973)]));\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 20; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 90; ++i1_1) {\n      compute[((i0_1 * 90) + i1_1)] = 0.000000e+00f;\n      for (int32_t k_1 = 0; k_1 < 10; ++k_1) {\n        compute[((i0_1 * 90) + i1_1)] = (compute[((i0_1 * 90) + i1_1)] + expf((((10 <= i0_1) ? ph[(((((i0_1 * 31944) + (k_1 * 1452)) + ((i1_1 / 9) * 44)) + (i1_1 % 9)) - 269026)] : ph[(((((i0_1 * 31944) + (k_1 * 1452)) + ((i1_1 / 9) * 44)) + (i1_1 % 9)) + 16973)]) - T_softmax_maxelem[((i0_1 * 90) + i1_1)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 1800; ++ax0_ax1_fused) {\n    for (int32_t ax2_inner = 0; ax2_inner < 10; ++ax2_inner) {\n      T_transpose[((ax0_ax1_fused * 10) + ax2_inner)] = ((((900 <= ax0_ax1_fused) ? ph[((((((ax0_ax1_fused / 90) * 31944) + (ax2_inner * 1452)) + (((ax0_ax1_fused % 90) / 9) * 44)) + (ax0_ax1_fused % 9)) - 269026)] : ph[((((((ax0_ax1_fused / 90) * 31944) + (ax2_inner * 1452)) + (((ax0_ax1_fused % 90) / 9) * 44)) + (ax0_ax1_fused % 9)) + 16973)]) - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_concat, float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((1125 <= ((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3))) ? T_strided_slice[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 9000)] : T_strided_slice_1[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) < 1125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 31944) + (((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 450) / 45) * 1452)) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90) / 9) * 44)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9)) + 16973)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_concat, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_concat[(((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 900) + (((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 450) / 45) * 90)) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90) / 9) * 9)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) < 1125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 31944) + (((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 450) / 45) * 1452)) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90) / 9) * 44)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9)) + 50414)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_7(float* __restrict__ T_strided_slice, float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_strided_slice[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 900) + ((((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10) * 90)) + ((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 450) / 5))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_6(float* __restrict__ T_concat, float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_strided_slice_1[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 90) + (((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90))]) - __logf(T_concat[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 90) + (((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90))]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_concat, float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) < 225) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n  for (int k = 0; k < 10; ++k) {\n    if (((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) < 225) {\n      T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + __expf((T_strided_slice[((((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 45) * 900) + (k * 90)) + (((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90))] - T_strided_slice_1[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])));\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) < 225) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = -3.402823e+38f;\n  }\n  for (int k = 0; k < 10; ++k) {\n    if (((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) < 225) {\n      T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], T_strided_slice_1[((((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 45) * 900) + (k * 90)) + (((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90))]);\n    }\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), T_transpose: T.Buffer((20, 90, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([1800], \"float32\", \"global\")\n        compute = T.allocate([1800], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((1800,), data=T_softmax_maxelem)\n        ph_1 = T.Buffer((351384,), data=ph.data)\n        for i0, i1 in T.grid(20, 90):\n            T_softmax_maxelem_1[i0 * 90 + i1] = T.float32(-3.4028234663852886e+38)\n            for k in range(10):\n                cse_var_2: T.int32 = i0 * 90 + i1\n                cse_var_1: T.int32 = i0 * 31944 + k * 1452 + i1 // 9 * 44 + i1 % 9\n                T_softmax_maxelem_1[cse_var_2] = T.max(T_softmax_maxelem_1[cse_var_2], T.if_then_else(10 <= i0, ph_1[cse_var_1 - 269026], ph_1[cse_var_1 + 16973]))\n        compute_1 = T.Buffer((1800,), data=compute)\n        for i0, i1 in T.grid(20, 90):\n            compute_1[i0 * 90 + i1] = T.float32(0)\n            for k in range(10):\n                cse_var_4: T.int32 = i0 * 90 + i1\n                cse_var_3: T.int32 = i0 * 31944 + k * 1452 + i1 // 9 * 44 + i1 % 9\n                compute_1[cse_var_4] = compute_1[cse_var_4] + T.exp(T.if_then_else(10 <= i0, ph_1[cse_var_3 - 269026], ph_1[cse_var_3 + 16973]) - T_softmax_maxelem_1[cse_var_4])\n        for ax0_ax1_fused in T.parallel(1800):\n            for ax2_inner in range(10):\n                cse_var_5: T.int32 = ax0_ax1_fused // 90 * 31944 + ax2_inner * 1452 + ax0_ax1_fused % 90 // 9 * 44 + ax0_ax1_fused % 9\n                T_transpose_1 = T.Buffer((18000,), data=T_transpose.data)\n                T_transpose_1[ax0_ax1_fused * 10 + ax2_inner] = T.if_then_else(900 <= ax0_ax1_fused, ph_1[cse_var_5 - 269026], ph_1[cse_var_5 + 16973]) - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused])",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44]]",
        "output_shape": "[[20, 90, 10]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_transpose"
        ],
        "deepseek_c": "void default_function_kernel(float* T_strided_slice, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 31944; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[((((((((ax0_ax1_fused_ax2_fused_ax3_fused / 132) * 31944) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 132) / 4) * 1452)) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 4) * 363)) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 12) % 22) * 18)) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 4) % 3) * 44)) + (ax0_ax1_fused_ax2_fused_ax3_fused % 4)) + 50414)];\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_concat, float* T_strided_slice, float* T_strided_slice_1, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 22; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n        T_strided_slice[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3)] = ph[(((((ax0_ax1_fused * 31944) + (ax2 * 1452)) + (ax3 * 33)) + 50414) + 16973)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 22; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3_1 = 0; ax3_1 < 44; ++ax3_1) {\n      T_concat[((ax0_ax1_fused_ax2_fused * 44) + ax3_1)] = 0.000000e+00f;\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 22; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t ax3_2 = 0; ax3_2 < 44; ++ax3_2) {\n      for (int32_t k = 0; k < 10; ++k) {\n        T_concat[(((ax0_ax1_fused_ax2_fused_1 * 44) + ax3_2)] = (T_concat[(((ax0_ax1_fused_ax2_fused_1 * 44) + ax3_2)] + expf((T_strided_slice[(((ax0_ax1_fused_ax2_fused_1 * 1452) + ax3_2)] - ph[(((((ax0_ax1_fused_ax2_fused_1 * 31944) + (ax3_2 * 33)) + 16973) + k) / 11)]) - ph[(((((ax0_ax1_fused_ax2_fused_1 * 31944) + (ax3_2 * 33)) + 16973) + k) / 11)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 22; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t ax3_3 = 0; ax3_3 < 44; ++ax3_3) {\n      T_strided_slice_1[((ax0_ax1_fused_ax2_fused_2 * 44) + ax3_3)] = -3.402823e+38f;\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 22; ++ax0_ax1_fused_ax2_fused_3) {\n    for (int32_t ax3_4 = 0; ax3_4 < 44; ++ax3_4) {\n      for (int32_t k_1 = 0; k_1 < 10; ++k_1) {\n        T_strided_slice_1[(((ax0_ax1_fused_ax2_fused_3 * 44) + ax3_4)] = max(T_strided_slice_1[(((ax0_ax1_fused_ax2_fused_3 * 44) + ax3_4)], ph[(((((ax0_ax1_fused_ax2_fused_3 * 31944) + (ax3_4 * 33)) + 16973) + k_1) / 11)]));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 22; ++ax0_ax1_fused_ax2_fused_4) {\n    for (int32_t ax3_5 = 0; ax3_5 < 44; ++ax3_5) {\n      T_concat[(((ax0_ax1_fused_ax2_fused_4 * 44) + ax3_5)] = (T_concat[(((ax0_ax1_fused_ax2_fused_4 * 44) + ax3_5)] - logf(T_concat[(((ax0_ax1_fused_ax2_fused_4 * 44) + ax3_5)])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_5 = 0; ax0_ax1_fused_ax2_fused_5 < 22; ++ax0_ax1_fused_ax2_fused_5) {\n    for (int32_t ax3_6 = 0; ax3_6 < 44; ++ax3_6) {\n      T_concat[(((ax0_ax1_fused_ax2_fused_5 * 44) + ax3_6)] = T_strided_slice[(((ax0_ax1_fused_ax2_fused_5 * 44) + ax3_6)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_6 = 0; ax0_ax1_fused_ax2_fused_6 < 22; ++ax0_ax1_fused_ax2_fused_6) {\n    for (int32_t ax3_7 = 0; ax3_7 < 44; ++ax3_7) {\n      T_transpose[((ax0_ax1_fused_ax2_fused_6 * 44) + ax3_7)] = T_strided_slice_1[(((ax0_ax1_fused_ax2_fused_6 * 44) + ax3_7)]];\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_concat, float* T_strided_slice, float* T_strided_slice_1, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2660; ++ax0_ax1_fused_ax2_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused] = ph[((((ax0_ax1_fused_ax2_fused / 33) * 1452) + ((ax0_ax1_fused_ax2_fused % 33) * 44)) + 50414)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[((((ax0_ax1_fused_ax2_fused_ax3_fused / 90) * 31944) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 90) / 9) * 44)) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 90) % 9) * 4)) + 16973)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_1] = 0.000000e+00f;\n  }\n  for (int32_t k = 0; k < 10; ++k) {\n    for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1_1 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_1_1) {\n      T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_1_1] = (T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_1_1] + expf((T_strided_slice[((((ax0_ax1_fused_ax2_fused_ax3_fused_1_1 / 90) * 900) + (k * 90)) + (ax0_ax1_fused_ax2_fused_ax3_fused_1_1 % 90))] - T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused_1_1])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2] = -3.402823e+38f;\n  }\n  for (int32_t k_1 = 0; k_1 < 10; ++k_1) {\n    for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2_1 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_2_1) {\n      T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2_1] = max(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2_1], T_strided_slice_1[((((ax0_ax1_fused_ax2_fused_ax3_fused_2_1 / 90) * 900) + (k_1 * 90)) + (ax0_ax1_fused_ax2_fused_ax3_fused_2_1 % 90))]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_3 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_3 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_3) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] = (T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] - T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused_3]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_4 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_4 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_4) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_4] = expf(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_4]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_5 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_5 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_5) {\n    T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_5] = 0.000000e+00f;\n  }\n  for (int32_t k_2 = 0; k_2 < 10; ++k_2) {\n    for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_5_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_5_1 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_5_1) {\n      T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_5_1] = (T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_5_1] + T_strided_slice[((((ax0_ax1_fused_ax2_fused_ax3_fused_5_1 / 90) * 900) + (k_2 * 90)) + (ax0_ax1_fused_ax2_fused_ax3_fused_5_1 % 90))]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_6 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_6 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_6) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_6] = T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_6];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_7 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_7 < 1125; ++ax0_ax1_fused_ax2_fused_ax3_fused_7) {\n    T_transpose[ax0_ax1_fused_ax2_fused_ax3_fused_7] = T_strided_slice[((((ax0_ax1_fused_ax2_fused_ax3_fused_7 / 90) * 90) + ((ax0_ax1_fused_ax2_fused_ax3_fused_7 % 90) / 10)) + 16973)];\n  }\n}"
    },
    {
        "op_name": "graph_7",
        "c_code": "void default_function_kernel(float* T_fast_exp, float* ph, float* ph_1) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 100; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      for (int32_t ax3_inner = 0; ax3_inner < 10; ++ax3_inner) {\n          int32_t v_ = ((int32_t)(floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_fast_exp[(((ax0_ax1_fused * 100) + (ax2 * 10)) + ax3_inner)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] * ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 79860) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 2420)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 55)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 933559)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_fast_exp, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n      int v_ = ((int)(floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 31944) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 1452)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 44)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 16973)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice_1[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), ph_1: T.Buffer((22, 33, 44, 55), \"float32\"), T_fast_exp: T.Buffer((10, 10, 10, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(100):\n            for ax2, ax3_inner in T.grid(10, 10):\n                cse_var_4: T.int32 = ax0_ax1_fused % 10\n                cse_var_3: T.int32 = ax0_ax1_fused // 10\n                cse_var_2: T.int32 = cse_var_3 * 79860 + cse_var_4 * 2420 + ax2 * 55 + ax3_inner + 933559\n                cse_var_1: T.int32 = cse_var_3 * 31944 + cse_var_4 * 1452 + ax2 * 44 + ax3_inner + 16973\n                T_fast_exp_1 = T.Buffer((10000,), data=T_fast_exp.data)\n                ph_2 = T.Buffer((351384,), data=ph.data)\n                ph_3 = T.Buffer((1756920,), data=ph_1.data)\n                T_fast_exp_1[ax0_ax1_fused * 100 + ax2 * 10 + ax3_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_2[cse_var_1] * ph_3[cse_var_2])",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44], [22, 33, 44, 55]]",
        "output_shape": "[[10, 10, 10, 10]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "T_fast_exp"
        ],
        "deepseek_c": "#include <assert.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nvoid default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_fast_exp, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 33000; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[((((((((ax0_ax1_fused_ax2_fused / 132) * 1452) + (((ax0_ax1_fused_ax2_fused % 132) / 4) * 44)) + (((ax0_ax1_fused_ax2_fused
        "starcoder_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_strided_slice_2, float* ph, float* ph_1) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 220; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 22; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        T_strided_slice[(((ax0_ax1_fused * 220) + (ax2 * 10)) + ax3)] = ph[((((((ax0_ax1_fused / 22) * 31944) + ((ax2 * 1452) + (ax3 * 44))) + (ax0_ax1_fused % 22)) + 16973)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 220; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 22; ++ax2_1) {\n      for (int32_t ax3_1 = 0; ax3_1 < 10; ++ax3_1) {\n        T_strided_slice_1[(((ax0_ax1_fused_1 * 220) + (ax2_1 * 10)) + ax3_1)] = ph_1[((((((ax0_ax1_fused_1 / 22) * 79860) + ((ax2_1 * 2420) + (ax3_1 * 55))) + (ax0_ax1_fused_1 % 22)) + 933559)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 220; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 22; ++ax2_2) {\n      for (int32_t ax3_2 = 0; ax3_2 < 10; ++ax3_2) {\n        T_strided_slice_2[(((ax0_ax1_fused_2 * 220) + (ax2_2 * 10)) + ax3_2)] = (T_strided_slice[(((ax0_ax1_fused_2 * 220) + (ax2_2 * 10)) + ax3_2)] * T_strided_slice_1[(((ax0_ax1_fused_2 * 220) + (ax2_2 * 10)) + ax3_2)]);\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_fast_exp, float* T_strided_slice, float* T_strided_slice_1, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2664; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused * 10) + ax3)] = ph[(((((ax0_ax1_fused_ax2_fused / 220) * 31944) + (((ax0_ax1_fused_ax2_fused % 220) / 110) * 1452)) + ((ax0_ax1_fused_ax2_fused % 22) * 44)) + ax3) + 16973];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 26640; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[(((((ax0_ax1_fused_ax2_fused_ax3_fused / 2200) * 79860) + ((((ax0_ax1_fused_ax2_fused_ax3_fused % 2200) / 1100) / 25) * 2420)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused % 220) / 110) / 5) * 55)) + ((ax0_ax1_fused_ax2_fused_ax3_fused % 22) / 2)) + 933559)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 26640; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_1] = (T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_1] * T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 26640; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    int v_ = ((int)(floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[ax0_ax1_fused_ax2_fused_ax3_fused_2] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2]);\n  }\n}"
    },
    {
        "op_name": "graph_8",
        "c_code": "void default_function_kernel(float* compute, float* ph, float* ph_1) {\n  float T_softmax_maxelem[1000];\n  float compute_1[1000];\n  for (int32_t i0 = 0; i0 < 10; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        T_softmax_maxelem[(((i0 * 100) + (i1 * 10)) + i2)] = -3.402823e+38f;\n        for (int32_t k = 0; k < 10; ++k) {\n          T_softmax_maxelem[(((i0 * 100) + (i1 * 10)) + i2)] = max(T_softmax_maxelem[(((i0 * 100) + (i1 * 10)) + i2)], (ph[(((((i0 * 31944) + (i1 * 1452)) + (k * 44)) + i2) + 16973)] + ph_1[(((((i0 * 79860) + (i1 * 2420)) + (k * 55)) + i2) + 933559)]));\n        }\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 10; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 10; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 10; ++i2_1) {\n        compute_1[(((i0_1 * 100) + (i1_1 * 10)) + i2_1)] = 0.000000e+00f;\n        for (int32_t k_1 = 0; k_1 < 10; ++k_1) {\n          compute_1[(((i0_1 * 100) + (i1_1 * 10)) + i2_1)] = (compute_1[(((i0_1 * 100) + (i1_1 * 10)) + i2_1)] + expf(((ph[(((((i0_1 * 31944) + (i1_1 * 1452)) + (k_1 * 44)) + i2_1) + 16973)] + ph_1[(((((i0_1 * 79860) + (i1_1 * 2420)) + (k_1 * 55)) + i2_1) + 933559)]) - T_softmax_maxelem[(((i0_1 * 100) + (i1_1 * 10)) + i2_1)])));\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 100; ++i0_i1_fused) {\n    for (int32_t i2_2 = 0; i2_2 < 10; ++i2_2) {\n      for (int32_t i3_inner = 0; i3_inner < 10; ++i3_inner) {\n        compute[(((i0_i1_fused * 100) + (i2_2 * 10)) + i3_inner)] = (((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2_2 * 44)) + i3_inner) + 16973)] + ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2_2 * 55)) + i3_inner) + 933559)]) - T_softmax_maxelem[((i0_i1_fused * 10) + i3_inner)]) - logf(compute_1[((i0_i1_fused * 10) + i3_inner)]));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1000) default_function_kernel_3(float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  T_strided_slice[((int)threadIdx.x)] = -3.402823e+38f;\n  for (int k = 0; k < 10; ++k) {\n    T_strided_slice[((int)threadIdx.x)] = max(T_strided_slice[((int)threadIdx.x)], T_strided_slice_1[((((((int)threadIdx.x) / 10) * 100) + (k * 10)) + (((int)threadIdx.x) % 10))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 79860) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 2420)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 55)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 933559)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 31944) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 1452)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 44)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 16973)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1000) default_function_kernel_4(float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1, float* __restrict__ compute) {\n  compute[((int)threadIdx.x)] = 0.000000e+00f;\n  for (int k = 0; k < 10; ++k) {\n    compute[((int)threadIdx.x)] = (compute[((int)threadIdx.x)] + __expf((T_strided_slice[((((((int)threadIdx.x) / 10) * 100) + (k * 10)) + (((int)threadIdx.x) % 10))] - T_strided_slice_1[((int)threadIdx.x)])));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1, float* __restrict__ compute, float* __restrict__ compute_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_strided_slice_1[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 25) * 10) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10))]) - __logf(compute_1[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 25) * 10) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10))]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + T_strided_slice_1[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), ph_1: T.Buffer((22, 33, 44, 55), \"float32\"), compute: T.Buffer((10, 10, 10, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([1000], \"float32\", \"global\")\n        compute_1 = T.allocate([1000], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((1000,), data=T_softmax_maxelem)\n        ph_2 = T.Buffer((351384,), data=ph.data)\n        ph_3 = T.Buffer((1756920,), data=ph_1.data)\n        for i0, i1, i2 in T.grid(10, 10, 10):\n            T_softmax_maxelem_1[i0 * 100 + i1 * 10 + i2] = T.float32(-3.4028234663852886e+38)\n            for k in range(10):\n                cse_var_1: T.int32 = i0 * 100 + i1 * 10 + i2\n                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], ph_2[i0 * 31944 + i1 * 1452 + k * 44 + i2 + 16973] + ph_3[i0 * 79860 + i1 * 2420 + k * 55 + i2 + 933559])\n        compute_2 = T.Buffer((1000,), data=compute_1)\n        for i0, i1, i2 in T.grid(10, 10, 10):\n            compute_2[i0 * 100 + i1 * 10 + i2] = T.float32(0)\n            for k in range(10):\n                cse_var_2: T.int32 = i0 * 100 + i1 * 10 + i2\n                compute_2[cse_var_2] = compute_2[cse_var_2] + T.exp(ph_2[i0 * 31944 + i1 * 1452 + k * 44 + i2 + 16973] + ph_3[i0 * 79860 + i1 * 2420 + k * 55 + i2 + 933559] - T_softmax_maxelem_1[cse_var_2])\n        for i0_i1_fused in T.parallel(100):\n            for i2, i3_inner in T.grid(10, 10):\n                cse_var_5: T.int32 = i0_i1_fused % 10\n                cse_var_4: T.int32 = i0_i1_fused // 10\n                cse_var_3: T.int32 = i0_i1_fused * 10 + i3_inner\n                compute_3 = T.Buffer((10000,), data=compute.data)\n                compute_3[i0_i1_fused * 100 + i2 * 10 + i3_inner] = ph_2[cse_var_4 * 31944 + cse_var_5 * 1452 + i2 * 44 + i3_inner + 16973] + ph_3[cse_var_4 * 79860 + cse_var_5 * 2420 + i2 * 55 + i3_inner + 933559] - T_softmax_maxelem_1[cse_var_3] - T.log(compute_2[cse_var_3])",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44], [22, 33, 44, 55]]",
        "output_shape": "[[10, 10, 10, 10]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "compute"
        ],
        "deepseek_c": "void default_function_kernel(float* T_strided_slice, float* ph) {\n  for (int32_t i0 = 0; i0 < 11; ++i0) {\n    for (int32_t i1 = 0; i1 < 22; ++i1) {\n      for (int32_t i2 = 0; i2 < 33; ++i2) {\n        for (int32_t i3 = 0; i3 < 44; ++i3) {\n          T_strided_slice[((((i0 * 1452) + (i1 * 66)) + (i2 * 2)) + i3)] = ph[((((((i0 * 31944) + (i1 * 1452)) + (i2 * 44)) + i3) + 16973))];\n        }\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_strided_slice_2, float* T_strided_slice_3, float* compute, float* compute_1, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 22; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n        T_strided_slice[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3)] = ph[(((ax0_ax1_fused * 79860) + (ax2 * 2420)) + (ax3 * 55)) + 933559];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 22; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 33; ++ax2_1) {\n      for (int32_t ax3_1 = 0; ax3_1 < 44; ++ax3_1) {\n        T_strided_slice_1[(((ax0_ax1_fused_1 * 1452) + (ax2_1 * 44)) + ax3_1)] = ph[(((ax0_ax1_fused_1 * 31944) + (ax2_1 * 1452)) + (ax3_1 * 44)) + 16973];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 22; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 33; ++ax2_2) {\n      for (int32_t ax3_2 = 0; ax3_2 < 44; ++ax3_2) {\n        T_strided_slice_2[(((ax0_ax1_fused_2 * 1452) + (ax2_2 * 44)) + ax3_2)] = (T_strided_slice[(((ax0_ax1_fused_2 * 1452) + (ax2_2 * 44)) + ax3_2)] + T_strided_slice_1[(((ax0_ax1_fused_2 * 1452) + (ax2_2 * 44)) + ax3_2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 22; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 33; ++i2) {\n      for (int32_t i3 = 0; i3 < 10; ++i3) {\n        T_strided_slice_3[(((i0_i1_fused * 330) + (i2 * 10)) + i3)] = -3.402823e+38f;\n        for (int32_t k = 0; k < 10; ++k) {\n          T_strided_slice_3[(((i0_i1_fused * 330) + (i2 * 10)) + i3)] = max(T_strided_slice_3[(((i0_i1_fused * 330) + (i2 * 10)) + i3)], T_strided_slice_2[((((i0_i1_fused * 1452) + (i2 * 44)) + (i3 * 4)) + k)]);\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 726; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3_1 = 0; i3_1 < 10; ++i3_1) {\n      compute[((i0_i1_fused_i2_fused * 10) + i3_1)] = 0.000000e+00f;\n      for (int32_t k_1 = 0; k_1 < 10; ++k_1) {\n        compute[((i0_i1_fused_i2_fused * 10) + i3_1)] = (compute[((i0_i1_fused_i2_fused * 10) + i3_1)] + expf((T_strided_slice_2[((((i0_i1_fused_i2_fused / 33) * 1452) + ((i0_i1_fused_i2_fused % 33) * 44)) + (i3_1 * 4)) + k_1)] - T_strided_slice_3[((i0_i1_fused_i2_fused * 10) + i3_1)]));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 22; ++i0_i1_fused_1) {\n    for (int32_t i2_1 = 0; i2_1 < 33; ++i2_1) {\n      for (int32_t i3_2 = 0; i3_2 < 10; ++i3_2) {\n        compute_1[(((i0_i1_fused_1 * 330) + (i2_1 * 10)) + i3_2)] = ((T_strided_slice_2[(((i0_i1_fused_1 * 1452) + (i2_1 * 44)) + (i3_2 * 4))] - T_strided_slice_3[((i0_i1_fused_1 * 330) + (i2_1 * 10)) + i3_2]) - logf(compute[((i0_i1_fused_1 * 330) + (i2_1 * 10)) + i3_2]));\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_strided_slice_2, float* compute, float* compute_1, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2666; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused * 10) + ax3)] = ph[(((((ax0_ax1_fused_ax2_fused / 22) * 31944) + (((ax0_ax1_fused_ax2_fused % 22) / 11) * 1452)) + ((ax0_ax1_fused_ax2_fused % 11) * 44)) + ax3) + 16973];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 26660; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    for (int32_t k = 0; k < 10; ++k) {\n      T_strided_slice_1[((ax0_ax1_fused_ax2_fused_ax3_fused * 10) + k)] = -3.402823e+38f;\n      for (int32_t l = 0; l < 10; ++l) {\n        T_strided_slice_1[((ax0_ax1_fused_ax2_fused_ax3_fused * 10) + k)] = max(T_strided_slice_1[((ax0_ax1_fused_ax2_fused_ax3_fused * 10) + k)], T_strided_slice[((((ax0_ax1_fused_ax2_fused_ax3_fused / 10) * 100) + (k * 10)) + (ax0_ax1_fused_ax2_fused_ax3_fused % 10))]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 26660; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    for (int32_t k_1 = 0; k_1 < 10; ++k_1) {\n      T_strided_slice_2[((ax0_ax1_fused_ax2_fused_ax3_fused_1 * 10) + k_1)] = 0.000000e+00f;\n      for (int32_t l_1 = 0; l_1 < 10; ++l_1) {\n        T_strided_slice_2[((ax0_ax1_fused_ax2_fused_ax3_fused_1 * 10) + k_1)] = (T_strided_slice_2[((ax0_ax1_fused_ax2_fused_ax3_fused_1 * 10) + k_1)] + expf((T_strided_slice_1[((ax0_ax1_fused_ax2_fused_ax3_fused_1 * 10) + k_1)] - T_strided_slice[((((ax0_ax1_fused_ax2_fused_ax3_fused_1 / 10) * 100) + (k_1 * 10)) + (ax0_ax1_fused_ax2_fused_ax3_fused_1 % 10))])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2666; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3 = 0; i3 < 10; ++i3) {\n      compute[((i0_i1_fused_i2_fused * 10) + i3)] = 0.000000e+00f;\n      for (int32_t k_2 = 0; k_2 < 10; ++k_2) {\n        compute[((i0_i1_fused_i2_fused * 10) + i3)] = (compute[((i0_i1_fused_i2_fused * 10) + i3)] + expf((T_strided_slice_1[(((i0_i1_fused_i2_fused * 100) + (k_2 * 10)) + i3)] - T_strided_slice[(((i0_i1_fused_i2_fused * 100) + (k_2 * 10)) + i3)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 2666; ++i0_i1_fused_i2_fused_1) {\n    for (int32_t i3_1 = 0; i3_1 < 10; ++i3_1) {\n      compute_1[((i0_i1_fused_i2_fused_1 * 10) + i3_1)] = 0.000000e+00f;\n      for (int32_t k_3 = 0; k_3 < 10; ++k_3) {\n        compute_1[((i0_i1_fused_i2_fused_1 * 10) + i3_1)] = (compute_1[((i0_i1_fused_i2_fused_1 * 10) + i3_1)] + expf((T_strided_slice_1[(((i0_i1_fused_i2_fused_1 * 100) + (k_3 * 10)) + i3_1)] - T_strided_slice[(((i0_i1_fused_i2_fused_1 * 100) + (k_3 * 10)) + i3_1)])));\n      }\n      compute_1[((i0_i1_fused_i2_fused_1 * 10) + i3_1)] = logf(compute_1[((i0_i1_fused_i2_fused_1 * 10) + i3_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 26660; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    for (int32_t k_4 = 0; k_4 < 10; ++k_4) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused_ax3_fused_2 * 10) + k_4)] = ((T_strided_slice[((ax0_ax1_fused_ax2_fused_ax3_fused_2 * 10) + k_4)] + T_strided_slice_1[((ax0_ax1_fused_ax2_fused_ax3_fused_2 * 10) + k_4)]) - compute_1[(((ax0_ax1_fused_ax2_fused_ax3_fused_2 / 10) * 10) + (ax0_ax1_fused_ax2_fused_ax3_fused_2 % 10))]);\n    }\n  }\n}"
    },
    {
        "op_name": "graph_9",
        "c_code": "void default_function_kernel(float* T_fast_tanh, float* ph, float* ph_1) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 100; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      for (int32_t ax3_inner = 0; ax3_inner < 10; ++ax3_inner) {\n        T_fast_tanh[(((ax0_ax1_fused * 100) + (ax2 * 10)) + ax3_inner)] = ((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * (((max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)]))) * max(-9.000000e+00f, min(9.000000e+00f, (ph[((((((ax0_ax1_fused / 10) * 31944) + ((ax0_ax1_fused % 10) * 1452)) + (ax2 * 44)) + ax3_inner) + 16973)] - ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + (ax2 * 55)) + ax3_inner) + 933559)])))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(9.000000e+00f, T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 31944) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 1452)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 44)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 16973)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_fast_tanh, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(-9.000000e+00f, T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 79860) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 2420)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 55)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 933559)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_strided_slice_1[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), ph_1: T.Buffer((22, 33, 44, 55), \"float32\"), T_fast_tanh: T.Buffer((10, 10, 10, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(100):\n            for ax2, ax3_inner in T.grid(10, 10):\n                cse_var_4: T.int32 = ax0_ax1_fused % 10\n                cse_var_3: T.int32 = ax0_ax1_fused // 10\n                cse_var_2: T.int32 = cse_var_3 * 79860 + cse_var_4 * 2420 + ax2 * 55 + ax3_inner + 933559\n                cse_var_1: T.int32 = cse_var_3 * 31944 + cse_var_4 * 1452 + ax2 * 44 + ax3_inner + 16973\n                T_fast_tanh_1 = T.Buffer((10000,), data=T_fast_tanh.data)\n                ph_2 = T.Buffer((351384,), data=ph.data)\n                ph_3 = T.Buffer((1756920,), data=ph_1.data)\n                T_fast_tanh_1[ax0_ax1_fused * 100 + ax2 * 10 + ax3_inner] = T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.float32(-2.76076847742355e-16) + T.float32(2.0001879048247699e-13)) + T.float32(-8.60467152213735e-11)) + T.float32(5.1222970903711401e-08)) + T.float32(1.4857223571797901e-05)) + T.float32(0.00063726192887543596)) + T.float32(0.0048935245589178597)) / (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.max(T.float32(-9), T.min(T.float32(9), ph_2[cse_var_1] - ph_3[cse_var_2])) * T.float32(1.1982583946670199e-06) + T.float32(0.000118534705686654)) + T.float32(0.0022684346324390002)) + T.float32(0.0048935251855438504))",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44], [22, 33, 44, 55]]",
        "output_shape": "[[10, 10, 10, 10]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "T_fast_tanh"
        ],
        "deepseek_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_fast_tanh, float* ph, float* T_strided_slice_2) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 33000; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[((((((ax0_ax1_fused_ax2_fused / 1320) * 13200) + (((ax0_ax1_fused_ax2_fused % 1320) / 110) * 1100)) + (((ax0_ax1_fused_ax2_fused % 11) * 10) + (ax0_ax1_fused_ax2_fused % 10))) + 16973)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 33000; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] = (T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] - T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 33000; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_fast_tanh[ax0_ax1_fused_ax2_fused_ax3_fused] = ((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * (((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused]) * (((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused]) * (((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused]) * (((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused]) * (((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused]) * (((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused]) * (((T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_strided_slice, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 22; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n        T_strided_slice[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3)] = ph[((((((ax0_ax1_fused * 31944) + (ax2 * 1452)) + (ax3 * 33)) + 16973) / 2) - 84865)];\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_fast_tanh, float* T_strided_slice, float* T_strided_slice_1, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2660; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused * 44) + ax3)] = ph[(((((ax0_ax1_fused_ax2_fused / 22) * 31944) + (((ax0_ax1_fused_ax2_fused % 22) / 2) * 1452)) + (ax3 * 2)) + 16973)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 11680; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[(((((ax0_ax1_fused_ax2_fused_ax3_fused / 22) * 79860) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 22) / 2) * 2420)) + (ax0_ax1_fused_ax2_fused_ax3_fused * 5)) + 933559)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 11680; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_1] = (T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_1] - T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 11680; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2] = min(9.000000e+00f, T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_3 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_3 < 11680; ++ax0_ax1_fused_ax2_fused_ax3_fused_3) {\n    T_fast_tanh[ax0_ax1_fused_ax2_fused_ax3_fused_3] = ((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * (((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3]) * (((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3]) * (((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3]) * (((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3]) * (((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3]) * (((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3]) * (((T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3] * T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_3]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}"
    },
    {
        "op_name": "graph_10",
        "c_code": "void default_function_kernel(float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 207; ++ax0_ax1_fused) {\n    for (int32_t ax2_outer = 0; ax2_outer < 2; ++ax2_outer) {\n      for (int32_t ax2_inner = 0; ax2_inner < 16; ++ax2_inner) {\n        if (((ax2_outer * 4) + (ax2_inner >> 2)) < 5) {\n          T_transpose[(((ax0_ax1_fused * 20) + (ax2_outer * 16)) + ax2_inner)] = ((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * (((max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))])) * max(-9.000000e+00f, min(9.000000e+00f, ph[(((((ax0_ax1_fused % 69) * 60) + (ax2_outer * 48)) + (ax2_inner * 3)) + (ax0_ax1_fused / 69))]))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_reshape, float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_reshape[(((((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 1380) * 3) + (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 345))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 3) * 12) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 12))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_reshape) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_reshape) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(9.000000e+00f, T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_reshape) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(-9.000000e+00f, T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_reshape, float* __restrict__ T_reshape_1) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_reshape_1[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 15) * 60) + (((((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 60) / 3) * 3)) + ((((int)blockIdx.x) + ((int)threadIdx.x)) % 3))];\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((23, 45, 12), \"float32\"), T_transpose: T.Buffer((3, 69, 20), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(207):\n            for ax2_outer, ax2_inner in T.grid(2, 16):\n                if T.likely(ax2_outer * 4 + ax2_inner // 4 < 5):\n                    T_transpose_1 = T.Buffer((4140,), data=T_transpose.data)\n                    ph_1 = T.Buffer((12420,), data=ph.data)\n                    cse_var_1: T.int32 = ax0_ax1_fused % 69 * 60 + ax2_outer * 48 + ax2_inner * 3 + ax0_ax1_fused // 69\n                    T_transpose_1[ax0_ax1_fused * 20 + ax2_outer * 16 + ax2_inner] = T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.float32(-2.76076847742355e-16) + T.float32(2.0001879048247699e-13)) + T.float32(-8.60467152213735e-11)) + T.float32(5.1222970903711401e-08)) + T.float32(1.4857223571797901e-05)) + T.float32(0.00063726192887543596)) + T.float32(0.0048935245589178597)) / (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_1])) * T.float32(1.1982583946670199e-06) + T.float32(0.000118534705686654)) + T.float32(0.0022684346324390002)) + T.float32(0.0048935251855438504))",
        "op_args": "None",
        "input_shape": "[[23, 45, 12]]",
        "output_shape": "[[3, 69, 20]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_transpose"
        ],
        "deepseek_c": "void default_function_kernel(float* T_reshape, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 23; ++i0) {\n    for (int32_t i1 = 0; i1 < 45; ++i1) {\n      for (int32_t i2 = 0; i2 < 12; ++i2) {\n        T_reshape[(((i0 * 540) + (i1 * 12)) + i2)] = ph[((((i0 * 540) + (i1 * 12)) + i2) / 3)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 1035; ++i0_i1_fused) {\n    for (int32_t i2_1 = 0; i2_1 < 3; ++i2_1) {\n      T_reshape[((i0_i1_fused * 3) + i2_1)] = min(9.000000e+00f, T_reshape[((i0_i1_fused * 3) + i2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 3105; ++i0_i1_fused_i2_fused) {\n    T_reshape[i0_i1_fused_i2_fused] = max(-9.000000e+00f, T_reshape[i0_i1_fused_i2_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 3105; ++i0_i1_fused_i2_fused_1) {\n    T_reshape[i0_i1_fused_i2_fused_1] = ((T_reshape[i0_i1_fused_i2_fused_1] * (((T_reshape[i0_i1_fused_i2_fused_1] * T_reshape[i0_i1_fused_i2_fused_1]) * (((T_reshape[i0_i1_fused_i2_fused_1] * T_reshape[i0_i1_fused_i2_fused_1]) * (((T_reshape[i0_i1_fused_i2_fused_1] * T_reshape[i0_i1_fused_i2_fused_1]) * (((T_reshape[i0_i1_fused_i2_fused_1] * T_reshape[i0_i1_fused_i2_fused_1]) * (((T_reshape[i0_i1_fused_i2_fused_1] * T_reshape[i0_i1_fused_i2_fused_1]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_reshape[i0_i1_fused_i2_fused_1] * T_reshape[i0_i1_fused_i2_fused_1]) * (((T_reshape[i0_i1_fused_i2_fused_1] * T_reshape[i0_i1_fused_i2_fused_1]) * (((T_reshape[i0_i1_fused_i2_fused_1] * T_reshape[i0_i1_fused_i2_fused_1]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_2 = 0; i0_i1_fused_i2_fused_2 < 3105; ++i0_i1_fused_i2_fused_2) {\n    T_reshape[i0_i1_fused_i2_fused_2] = T_reshape[((((i0_i1_fused_i2_fused_2 / 15) * 60) + ((i0_i1_fused_i2_fused_2 % 15) / 3)) * 3) + (i0_i1_fused_i2_fused_2 % 3))];\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_reshape, float* T_reshape_1, float* T_reshape_2, float* T_reshape_3, float* T_reshape_4, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 1035; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_reshape[((ax0_ax1_fused * 12) + ax2)] = ph[((ax0_ax1_fused * 12) + ax2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 1035; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 12; ++ax2_1) {\n      T_reshape_1[((ax0_ax1_fused_1 * 12) + ax2_1)] = min(9.000000e+00f, T_reshape[((ax0_ax1_fused_1 * 12) + ax2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 1035; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 12; ++ax2_2) {\n      T_reshape_2[((ax0_ax1_fused_2 * 12) + ax2_2)] = max(-9.000000e+00f, T_reshape[((ax0_ax1_fused_2 * 12) + ax2_2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 1035; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 12; ++i2) {\n      T_reshape_3[((i0_i1_fused * 12) + i2)] = ((T_reshape[((i0_i1_fused * 12) + i2)] * (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * (((T_reshape[((i0_i1_fused * 12) + i2)] * T_reshape[((i0_i1_fused * 12) + i2)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_3 = 0; ax0_ax1_fused_3 < 1035; ++ax0_ax1_fused_3) {\n    for (int32_t ax2_3 = 0; ax2_3 < 12; ++ax2_3) {\n      T_reshape_4[((ax0_ax1_fused_3 * 12) + ax2_3)] = T_reshape_1[((ax0_ax1_fused_3 * 12) + ax2_3)];\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_reshape, float* T_reshape_1, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1035; ++ax0_ax1_fused_ax2_fused) {\n    T_reshape[ax0_ax1_fused_ax2_fused] = ph[(((ax0_ax1_fused_ax2_fused % 12) * 45) + (ax0_ax1_fused_ax2_fused / 12))];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1035; ++ax0_ax1_fused_ax2_fused_1) {\n    T_reshape[ax0_ax1_fused_ax2_fused_1] = min(9.000000e+00f, T_reshape[ax0_ax1_fused_ax2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 1035; ++ax0_ax1_fused_ax2_fused_2) {\n    T_reshape[ax0_ax1_fused_ax2_fused_2] = max(-9.000000e+00f, T_reshape[ax0_ax1_fused_ax2_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 1035; ++ax0_ax1_fused_ax2_fused_3) {\n    T_reshape[ax0_ax1_fused_ax2_fused_3] = ((T_reshape[ax0_ax1_fused_ax2_fused_3] * (T_reshape[ax0_ax1_fused_ax2_fused_3] * T_reshape[ax0_ax1_fused_ax2_fused_3])) * (((T_reshape[ax0_ax1_fused_ax2_fused_3] * T_reshape[ax0_ax1_fused_ax2_fused_3]) * (((T_reshape[ax0_ax1_fused_ax2_fused_3] * T_reshape[ax0_ax1_fused_ax2_fused_3]) * (((T_reshape[ax0_ax1_fused_ax2_fused_3] * T_reshape[ax0_ax1_fused_ax2_fused_3]) * (((T_reshape[ax0_ax1_fused_ax2_fused_3] * T_reshape[ax0_ax1_fused_ax2_fused_3]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f)) + 4.893525e-03f)) / (((T_reshape[ax0_ax1_fused_ax2_fused_3] * T_reshape[ax0_ax1_fused_ax2_fused_3]) * (((T_reshape[ax0_ax1_fused_ax2_fused_3] * T_reshape[ax0_ax1_fused_ax2_fused_3]) * (((T_reshape[ax0_ax1_fused_ax2_fused_3] * T_reshape[ax0_ax1_fused_ax2_fused_3]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 1035; ++ax0_ax1_fused_ax2_fused_4) {\n    T_reshape_1[ax0_ax1_fused_ax2_fused_4] = T_reshape[ax0_ax1_fused_ax2_fused_4];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_5 = 0; ax0_ax1_fused_ax2_fused_5 < 1035; ++ax0_ax1_fused_ax2_fused_5) {\n    T_transpose[ax0_ax1_fused_ax2_fused_5] = T_reshape[((((ax0_ax1_fused_ax2_fused_5 % 1380) * 3) + (ax0_ax1_fused_ax2_fused_5 / 345))];\n  }\n}"
    },
    {
        "op_name": "graph_11",
        "c_code": "void default_function_kernel(float* T_softmax_norm, float* ph, float* ph_1) {\n  float T_softmax_maxelem[540];\n  float T_softmax_expsum[540];\n  for (int32_t i0 = 0; i0 < 12; ++i0) {\n    for (int32_t i1 = 0; i1 < 45; ++i1) {\n      T_softmax_maxelem[((i0 * 45) + i1)] = -3.402823e+38f;\n      for (int32_t k = 0; k < 23; ++k) {\n        T_softmax_maxelem[((i0 * 45) + i1)] = max(T_softmax_maxelem[((i0 * 45) + i1)], (ph[(((k * 540) + (i1 * 12)) + i0)] / ph_1[(((i0 * 1035) + (i1 * 23)) + k)]));\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 12; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 45; ++i1_1) {\n      T_softmax_expsum[((i0_1 * 45) + i1_1)] = 0.000000e+00f;\n      for (int32_t k_1 = 0; k_1 < 23; ++k_1) {\n          int32_t v_ = ((int32_t)(floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_softmax_expsum[((i0_1 * 45) + i1_1)] = (T_softmax_expsum[((i0_1 * 45) + i1_1)] + max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), ((ph[(((k_1 * 540) + (i1_1 * 12)) + i0_1)] / ph_1[(((i0_1 * 1035) + (i1_1 * 23)) + k_1)]) - T_softmax_maxelem[((i0_1 * 45) + i1_1)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 540; ++i0_i1_fused) {\n    for (int32_t i2_outer = 0; i2_outer < 2; ++i2_outer) {\n      for (int32_t i2_inner = 0; i2_inner < 16; ++i2_inner) {\n        if (((i2_outer * 16) + i2_inner) < 23) {\n            int32_t v__1 = ((int32_t)(floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          T_softmax_norm[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)] = (max(((*(float *)(&(v__1))) * ((((((((((((((1.987569e-04f * (max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), ((ph[((((i2_outer * 8640) + (i2_inner * 540)) + ((i0_i1_fused % 45) * 12)) + (i0_i1_fused / 45))] / ph_1[(((i0_i1_fused * 23) + (i2_outer * 16)) + i2_inner)]) - T_softmax_maxelem[i0_i1_fused])) / T_softmax_expsum[i0_i1_fused]);\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_transpose, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3105) {\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((int)blockIdx.x) * 12) + ((int)threadIdx.x)) % 23) * 540) + (((((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 1035) / 23) * 12)) + (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) / 1035))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_transpose, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3105) {\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / ph[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(540) default_function_kernel_5(float* __restrict__ T_softmax_maxelem, float* __restrict__ T_transpose) {\n  T_softmax_maxelem[((int)threadIdx.x)] = 0.000000e+00f;\n  for (int k = 0; k < 23; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = (T_softmax_maxelem[((int)threadIdx.x)] + T_transpose[((((int)threadIdx.x) * 23) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_softmax_maxelem, float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3105) {\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_softmax_maxelem[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) / 23)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3105) {\n      int v_ = ((int)(floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(540) default_function_kernel_2(float* __restrict__ T_softmax_maxelem, float* __restrict__ T_transpose) {\n  T_softmax_maxelem[((int)threadIdx.x)] = -3.402823e+38f;\n  for (int k = 0; k < 23; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = max(T_softmax_maxelem[((int)threadIdx.x)], T_transpose[((((int)threadIdx.x) * 23) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_6(float* __restrict__ T_softmax_maxelem, float* __restrict__ T_softmax_norm, float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3105) {\n    T_softmax_norm[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / T_softmax_maxelem[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) / 23)]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((23, 45, 12), \"float32\"), ph_1: T.Buffer((12, 45, 23), \"float32\"), T_softmax_norm: T.Buffer((12, 45, 23), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([540], \"float32\", \"global\")\n        T_softmax_expsum = T.allocate([540], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((540,), data=T_softmax_maxelem)\n        ph_2 = T.Buffer((12420,), data=ph.data)\n        ph_3 = T.Buffer((12420,), data=ph_1.data)\n        for i0, i1 in T.grid(12, 45):\n            T_softmax_maxelem_1[i0 * 45 + i1] = T.float32(-3.4028234663852886e+38)\n            for k in range(23):\n                cse_var_1: T.int32 = i0 * 45 + i1\n                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], ph_2[k * 540 + i1 * 12 + i0] / ph_3[i0 * 1035 + i1 * 23 + k])\n        T_softmax_expsum_1 = T.Buffer((540,), data=T_softmax_expsum)\n        for i0, i1 in T.grid(12, 45):\n            T_softmax_expsum_1[i0 * 45 + i1] = T.float32(0)\n            for k in range(23):\n                cse_var_4: T.int32 = i0 * 45 + i1\n                cse_var_3: T.int32 = k * 540 + i1 * 12 + i0\n                cse_var_2: T.int32 = i0 * 1035 + i1 * 23 + k\n                T_softmax_expsum_1[cse_var_4] = T_softmax_expsum_1[cse_var_4] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_2[cse_var_3] / ph_3[cse_var_2] - T_softmax_maxelem_1[cse_var_4])\n        for i0_i1_fused in T.parallel(540):\n            for i2_outer, i2_inner in T.grid(2, 16):\n                if T.likely(i2_outer * 16 + i2_inner < 23):\n                    cse_var_6: T.int32 = i0_i1_fused * 23 + i2_outer * 16 + i2_inner\n                    cse_var_5: T.int32 = i2_outer * 8640 + i2_inner * 540 + i0_i1_fused % 45 * 12 + i0_i1_fused // 45\n                    T_softmax_norm_1 = T.Buffer((12420,), data=T_softmax_norm.data)\n                    T_softmax_norm_1[cse_var_6] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_2[cse_var_5] / ph_3[cse_var_6] - T_softmax_maxelem_1[i0_i1_fused]) / T_softmax_expsum_1[i0_i1_fused]",
        "op_args": "None",
        "input_shape": "[[23, 45, 12], [12, 45, 23]]",
        "output_shape": "[[12, 45, 23]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "T_softmax_norm"
        ],
        "deepseek_c": "void default_function_kernel(float* T_transpose, float* T_transpose_1, float* T_softmax_maxelem, float* T_softmax_norm, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 12420; ++ax0_ax1_fused_ax2_fused) {\n    T_transpose[ax0_ax1_fused_ax2_fused] = ph[((((((ax0_ax1_fused_ax2_fused % 23) * 540) + (((ax0_ax1_fused_ax2_fused / 23) % 23) * 12)) + ((ax0_ax1_fused_ax2_fused / 1035) * 23)) + (ax0_ax1_fused_ax2_fused / 1035)) + (((ax0_ax1_fused_ax2_fused / 23) / 23) * 12)) + (((ax0_ax1_fused_ax2_fused % 23) / 23) * 12))];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 12420; ++ax0_ax1_fused_ax2_fused_1) {\n    T_transpose_1[ax0_ax1_fused_ax2_fused_1] = (T_transpose[ax0_ax1_fused_ax2_fused_1] / ph[ax0_ax1_fused_ax2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i = 0; i < 23; ++i) {\n    T_softmax_maxelem[i] = -3.402823e+38f;\n    for (int32_t k = 0; k < 23; ++k) {\n      T_softmax_maxelem[i] = max(T_softmax_maxelem[i], T_transpose[((i * 23) + k)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i_1 = 0; i_1 < 23; ++i_1) {\n    for (int32_t k_1 = 0; k_1 < 23; ++k_1) {\n      T_transpose[((i_1 * 23) + k_1)] = (T_transpose[((i_1 * 23) + k_1)] - T_softmax_maxelem[((i_1 / 23) * 23)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i_2 = 0; i_2 < 23; ++i_2) {\n    T_softmax_maxelem[i_2] = 0.000000e+00f;\n    for (int32_t k_2 = 0; k_2 < 23; ++k_2) {\n      T_softmax_maxelem[i_2] = (T_softmax_maxelem[i_2] + T_transpose[((i_2 * 23) + k_2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i_3 = 0; i_3 < 23; ++i_3) {\n    for (int32_t k_3 = 0; k_3 < 23; ++k_3) {\n      T_transpose[((i_3 * 23) + k_3)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_transpose[((i_3 * 23) + k_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_transpose[((i_3 * 23) + k_3)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i_4 = 0; i_4 < 23; ++i_4) {\n    for (int32_t k_4 = 0; k_4 < 23; ++k_4) {\n      T_softmax_norm[((i_4 * 23) + k_4)] = (T_transpose[((i_4 * 23) + k_4)] / T_softmax_maxelem[((i_4 / 23) * 23)]);\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_softmax_norm, float* ph) {\n  float T_transpose[11070];\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 945; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_transpose[((ax0_ax1_fused * 12) + ax2)] = ph[((ax2 * 540) + (ax0_ax1_fused % 45))];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 945; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 12; ++ax2_1) {\n      T_transpose[((ax0_ax1_fused_1 * 12) + ax2_1)] = (T_transpose[((ax0_ax1_fused_1 * 12) + ax2_1)] / ph[((ax2_1 * 540) + (ax0_ax1_fused_1 % 45))]);\n    }\n  }\n  float T_softmax_maxelem[540];\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 45; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 12; ++i2) {\n      T_softmax_maxelem[(i0_i1_fused * 12) + i2] = -3.402823e+38f;\n      for (int32_t k = 0; k < 23; ++k) {\n        T_softmax_maxelem[(i0_i1_fused * 12) + i2] = max(T_softmax_maxelem[(i0_i1_fused * 12) + i2], T_transpose[(((i0_i1_fused * 276) + (i2 * 23)) + k)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 945; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 12; ++ax2_2) {\n      T_transpose[((ax0_ax1_fused_2 * 12) + ax2_2)] = (T_transpose[((ax0_ax1_fused_2 * 12) + ax2_2)] - T_softmax_maxelem[((ax0_ax1_fused_2 % 45) * 12) + ax2_2]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 45; ++i0_i1_fused_1) {\n    for (int32_t i2_1 = 0; i2_1 < 12; ++i2_1) {\n      T_softmax_maxelem[(i0_i1_fused_1 * 12) + i2_1] = 0.000000e+00f;\n      for (int32_t k_1 = 0; k_1 < 23; ++k_1) {\n        T_softmax_maxelem[(i0_i1_fused_1 * 12) + i2_1] = (T_softmax_maxelem[(i0_i1_fused_1 * 12) + i2_1)] + T_transpose[(((i0_i1_fused_1 * 276) + (i2_1 * 23)) + k_1)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_3 = 0; ax0_ax1_fused_3 < 945; ++ax0_ax1_fused_3) {\n    for (int32_t ax2_3 = 0; ax2_3 < 12; ++ax2_3) {\n      T_softmax_norm[((ax0_ax1_fused_3 * 12) + ax2_3)] = (T_transpose[((ax0_ax1_fused_3 * 12) + ax2_3)] / T_softmax_maxelem[((ax0_ax1_fused_3 % 45) * 12) + ax2_3]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_softmax_norm, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 10080; ++ax0_ax1_fused_ax2_fused) {\n    float T_transpose[1];\n    float T_softmax_maxelem[1];\n    T_transpose[0] = ph[ax0_ax1_fused_ax2_fused];\n    T_softmax_maxelem[0] = 0.000000e+00f;\n    for (int32_t k = 0; k < 23; ++k) {\n      T_softmax_maxelem[0] = (T_softmax_maxelem[0] + T_transpose[((k * 1) + 0)]);\n    }\n    for (int32_t k_1 = 0; k_1 < 23; ++k_1) {\n      T_transpose[((k_1 * 1) + 0)] = (T_transpose[((k_1 * 1) + 0)] - T_softmax_maxelem[0]);\n    }\n    T_softmax_maxelem[0] = -3.402823e+38f;\n    for (int32_t k_2 = 0; k_2 < 23; ++k_2) {\n      T_softmax_maxelem[0] = max(T_softmax_maxelem[0], T_transpose[((k_2 * 1) + 0)]);\n    }\n    for (int32_t k_3 = 0; k_3 < 23; ++k_3) {\n      T_transpose[((k_3 * 1) + 0)] = (T_transpose[((k_3 * 1) + 0)] / T_softmax_maxelem[0]);\n    }\n    T_softmax_norm[ax0_ax1_fused_ax2_fused] = T_transpose[((((ax0_ax1_fused_ax2_fused % 23) * 1) + 0)];\n  }\n}"
    },
    {
        "op_name": "graph_12",
        "c_code": "void default_function_kernel(float* T_fast_tanh, float* ph) {\n  float T_softmax_maxelem[69];\n  float compute[69];\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 23; ++i1) {\n      T_softmax_maxelem[((i0 * 23) + i1)] = -3.402823e+38f;\n      for (int32_t k = 0; k < 60; ++k) {\n        T_softmax_maxelem[((i0 * 23) + i1)] = max(T_softmax_maxelem[((i0 * 23) + i1)], ph[((i1 * 60) + k)]);\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 3; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 23; ++i1_1) {\n      compute[((i0_1 * 23) + i1_1)] = 0.000000e+00f;\n      for (int32_t k_1 = 0; k_1 < 60; ++k_1) {\n        compute[((i0_1 * 23) + i1_1)] = (compute[((i0_1 * 23) + i1_1)] + expf((ph[((i1_1 * 60) + k_1)] - T_softmax_maxelem[((i0_1 * 23) + i1_1)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 69; ++ax0_ax1_fused) {\n    for (int32_t ax2_outer = 0; ax2_outer < 4; ++ax2_outer) {\n      for (int32_t ax2_inner = 0; ax2_inner < 16; ++ax2_inner) {\n        if (((ax2_outer * 4) + (ax2_inner >> 2)) < 15) {\n          T_fast_tanh[(((ax0_ax1_fused * 60) + (ax2_outer * 16)) + ax2_inner)] = ((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * (((max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused])))) * max(-9.000000e+00f, min(9.000000e+00f, ((ph[((((ax0_ax1_fused % 23) * 60) + (ax2_outer * 16)) + ax2_inner)] - T_softmax_maxelem[ax0_ax1_fused]) - logf(compute[ax0_ax1_fused]))))) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_broadcast_to) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = min(9.000000e+00f, T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_7(float* __restrict__ T_broadcast_to, float* __restrict__ T_fast_tanh) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_fast_tanh[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * (((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(69) default_function_kernel_3(float* __restrict__ T_broadcast_to, float* __restrict__ T_softmax_maxelem, float* __restrict__ compute) {\n  compute[((int)threadIdx.x)] = 0.000000e+00f;\n  for (int k = 0; k < 60; ++k) {\n    compute[((int)threadIdx.x)] = (compute[((int)threadIdx.x)] + __expf((T_broadcast_to[((((int)threadIdx.x) * 60) + k)] - T_softmax_maxelem[((int)threadIdx.x)])));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 345) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 15) * 60) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 60))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(69) default_function_kernel_2(float* __restrict__ T_broadcast_to, float* __restrict__ T_softmax_maxelem) {\n  T_softmax_maxelem[((int)threadIdx.x)] = -3.402823e+38f;\n  for (int k = 0; k < 60; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = max(T_softmax_maxelem[((int)threadIdx.x)], T_broadcast_to[((((int)threadIdx.x) * 60) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_broadcast_to, float* __restrict__ T_reshape) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_reshape[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 1380)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_broadcast_to, float* __restrict__ T_softmax_maxelem, float* __restrict__ compute) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_softmax_maxelem[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 15)]) - __logf(compute[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 15)]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_6(float* __restrict__ T_broadcast_to) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 1035) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(-9.000000e+00f, T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((23, 5, 12), \"float32\"), T_fast_tanh: T.Buffer((3, 23, 60), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([69], \"float32\", \"global\")\n        compute = T.allocate([69], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((69,), data=T_softmax_maxelem)\n        ph_1 = T.Buffer((1380,), data=ph.data)\n        for i0, i1 in T.grid(3, 23):\n            T_softmax_maxelem_1[i0 * 23 + i1] = T.float32(-3.4028234663852886e+38)\n            for k in range(60):\n                cse_var_1: T.int32 = i0 * 23 + i1\n                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], ph_1[i1 * 60 + k])\n        compute_1 = T.Buffer((69,), data=compute)\n        for i0, i1 in T.grid(3, 23):\n            compute_1[i0 * 23 + i1] = T.float32(0)\n            for k in range(60):\n                cse_var_2: T.int32 = i0 * 23 + i1\n                compute_1[cse_var_2] = compute_1[cse_var_2] + T.exp(ph_1[i1 * 60 + k] - T_softmax_maxelem_1[cse_var_2])\n        for ax0_ax1_fused in T.parallel(69):\n            for ax2_outer, ax2_inner in T.grid(4, 16):\n                if T.likely(ax2_outer * 4 + ax2_inner // 4 < 15):\n                    cse_var_4: T.int32 = ax2_outer * 16\n                    cse_var_3: T.int32 = ax0_ax1_fused % 23 * 60 + cse_var_4 + ax2_inner\n                    T_fast_tanh_1 = T.Buffer((4140,), data=T_fast_tanh.data)\n                    T_fast_tanh_1[ax0_ax1_fused * 60 + cse_var_4 + ax2_inner] = T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.float32(-2.76076847742355e-16) + T.float32(2.0001879048247699e-13)) + T.float32(-8.60467152213735e-11)) + T.float32(5.1222970903711401e-08)) + T.float32(1.4857223571797901e-05)) + T.float32(0.00063726192887543596)) + T.float32(0.0048935245589178597)) / (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * (T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.max(T.float32(-9), T.min(T.float32(9), ph_1[cse_var_3] - T_softmax_maxelem_1[ax0_ax1_fused] - T.log(compute_1[ax0_ax1_fused]))) * T.float32(1.1982583946670199e-06) + T.float32(0.000118534705686654)) + T.float32(0.0022684346324390002)) + T.float32(0.0048935251855438504))",
        "op_args": "None",
        "input_shape": "[[23, 5, 12]]",
        "output_shape": "[[3, 23, 60]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_fast_tanh"
        ],
        "deepseek_c": "void default_function_kernel(float* T_broadcast_to, float* T_reshape, float* T_softmax_maxelem, float* compute) {\n  float T_reshape_1[1380];\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1380; ++ax0_ax1_fused_ax2_fused) {\n    T_reshape_1[ax0_ax1_fused_ax2_fused] = 0.000000e+00f;\n    for (int32_t k = 0; k < 60; ++k) {\n      T_reshape_1[ax0_ax1_fused_ax2_fused] = (T_reshape_1[ax0_ax1_fused_ax2_fused] + expf((T_reshape[((ax0_ax1_fused_ax2_fused * 60) + k))] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused])));\n    }\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1380; ++ax0_ax1_fused_ax2_fused_1) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_1] = T_reshape[(((((ax0_ax1_fused_ax2_fused_1 / 15) * 60) + (ax0_ax1_fused_ax2_fused_1 % 60)) * 12) + (ax0_ax1_fused_ax2_fused_1 / 60))];\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 1380; ++ax0_ax1_fused_ax2_fused_2) {\n    T_softmax_maxelem[ax0_ax1_fused_ax2_fused_2] = -3.402823e+38f;\n    for (int32_t k_1 = 0; k_1 < 60; ++k_1) {\n      T_softmax_maxelem[ax0_ax1_fused_ax2_fused_2] = max(T_softmax_maxelem[ax0_ax1_fused_ax2_fused_2], T_reshape[((((ax0_ax1_fused_ax2_fused_2 * 60) + k_1) * 12) + (ax0_ax1_fused_ax2_fused_2 / 60))]);\n    }\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 1380; ++ax0_ax1_fused_ax2_fused_3) {\n    compute[ax0_ax1_fused_ax2_fused_3] = 0.000000e+00f;\n    for (int32_t k_2 = 0; k_2 < 60; ++k_2) {\n      compute[ax0_ax1_fused_ax2_fused_3] = (compute[ax0_ax1_fused_ax2_fused_3] + expf((T_reshape[((((ax0_ax1_fused_ax2_fused_3 * 60) + k_2) * 12) + (ax0_ax1_fused_ax2_fused_3 / 60))] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_3])));\n    }\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 1380; ++ax0_ax1_fused_ax2_fused_4) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_4] = T_reshape[(((((ax0_ax1_fused_ax2_fused_4 / 15) * 60) + (ax0_ax1_fused_ax2_fused_4 % 60)) * 12) + (ax0_ax1_fused_ax2_fused_4 / 60))];\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_5 = 0; ax0_ax1_fused_ax2_fused_5 < 1380; ++ax0_ax1_fused_ax2_fused_5) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_5] = ((T_broadcast_to[ax0_ax1_fused_ax2_fused_5] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_5]) - logf(compute[ax0_ax1_fused_ax2_fused_5]));\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_6 = 0; ax0_ax1_fused_ax2_fused_6 < 1380; ++ax0_ax1_fused_ax2_fused_6) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_6] = min(9.000000e+00f, T_broadcast_to[ax0_ax1_fused_ax2_fused_6]);\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_7 = 0; ax0_ax1_fused_ax2_fused_7 < 1380; ++ax0_ax1_fused_ax2_fused_7) {\n    T_fast_tanh[ax0_ax1_fused_ax2_fused_7] = ((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * T_broadcast_to[ax0_ax1_fused_ax2_fused_7]) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * T_broadcast_to[ax0_ax1_fused_ax2_fused_7]) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * T_broadcast_to[ax0_ax1_fused_ax2_fused_7]) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * T_broadcast_to[ax0_ax1_fused_ax2_fused_7]) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * T_broadcast_to[ax0_ax1_fused_ax2_fused_7]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) / (((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * T_broadcast_to[ax0_ax1_fused_ax2_fused_7]) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * T_broadcast_to[ax0_ax1_fused_ax2_fused_7]) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_7] * T_broadcast_to[ax0_ax1_fused_ax2_fused_7]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_8 = 0; ax0_ax1_fused_ax2_fused_8 < 1380; ++ax0_ax1_fused_ax2_fused_8) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_8] = max(-9.000000e+00f, T_broadcast_to[ax0_ax1_fused_ax2_fused_8]);\n  }\n}",
        "starcoder_c": "#pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 115; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 60; ++ax2) {\n      T_broadcast_to[((ax0_ax1_fused * 60) + ax2)] = ph[((ax0_ax1_fused * 60) + ax2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 115; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 60; ++ax2_1) {\n      T_broadcast_to_1[((ax0_ax1_fused_1 * 60) + ax2_1)] = T_broadcast_to[((ax0_ax1_fused_1 * 60) + ax2_1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 115; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 60; ++i2) {\n      T_broadcast_to_2[((i0_i1_fused * 60) + i2)] = -3.402823e+38f;\n      for (int32_t k = 0; k < 60; ++k) {\n        T_broadcast_to_2[((i0_i1_fused * 60) + i2)] = max(T_broadcast_to_2[((i0_i1_fused * 60) + i2)], T_broadcast_to_1[((i0_i1_fused * 60) + k)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 115; ++i0_i1_fused_1) {\n    for (int32_t i2_1 = 0; i2_1 < 60; ++i2_1) {\n      T_broadcast_to_3[((i0_i1_fused_1 * 60) + i2_1)] = ((T_broadcast_to_1[((i0_i1_fused_1 * 60) + i2_1)] - T_broadcast_to_2[((i0_i1_fused_1 * 60) + i2_1)]) - logf(0.000000e+00f));\n      for (int32_t k_1 = 0; k_1 < 60; ++k_1) {\n        T_broadcast_to_3[((i0_i1_fused_1 * 60) + i2_1)] = (T_broadcast_to_3[((i0_i1_fused_1 * 60) + i2_1)] + expf((T_broadcast_to_1[((i0_i1_fused_1 * 60) + k_1)] - T_broadcast_to_2[((i0_i1_fused_1 * 60) + i2_1)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_2 = 0; i0_i1_fused_2 < 115; ++i0_i1_fused_2) {\n    for (int32_t i2_2 = 0; i2_2 < 60; ++i2_2) {\n      T_broadcast_to_4[((i0_i1_fused_2 * 60) + i2_2)] = (T_broadcast_to_1[((i0_i1_fused_2 * 60) + i2_2)] - T_broadcast_to_2[((i0_i1_fused_2 * 60) + i2_2)]);\n      T_broadcast_to_4[((i0_i1_fused_2 * 60) + i2_2)] = (T_broadcast_to_4[((i0_i1_fused_2 * 60) + i2_2)] - logf(T_broadcast_to_3[((i0_i1_fused_2 * 60) + i2_2)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_3 = 0; i0_i1_fused_3 < 115; ++i0_i1_fused_3) {\n    for (int32_t i2_3 = 0; i2_3 < 60; ++i2_3) {\n      T_broadcast_to_5[((i0_i1_fused_3 * 60) + i2_3)] = min(9.000000e+00f, T_broadcast_to_4[((i0_i1_fused_3 * 60) + i2_3)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_4 = 0; i0_i1_fused_4 < 115; ++i0_i1_fused_4) {\n    for (int32_t i2_4 = 0; i2_4 < 60; ++i2_4) {\n      T_fast_tanh[((i0_i1_fused_4 * 60) + i2_4)] = ((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * (((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)]) * (((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)]) * (((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)]) * (((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)]) * (((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) / (((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)]) * (((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)]) * (((T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)] * T_broadcast_to_5[((i0_i1_fused_4 * 60) + i2_4)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_5 = 0; i0_i1_fused_5 < 115; ++i0_i1_fused_5) {\n    for (int32_t i2_5 = 0; i2_5 < 60; ++i2_5) {\n      T_broadcast_to_6[((i0_i1_fused_5 * 60) + i2_5)] = max(-9.000000e+00f, T_broadcast_to_4[((i0_i1_fused_5 * 60) + i2_5)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_6 = 0; i0_i1_fused_6 < 115; ++i0_i1_fused_6) {\n    for (int32_t i2_6 = 0; i2_6 < 60; ++i2_6) {\n      T_broadcast_to_7[((i0_i1_fused_6 * 60) + i2_6)] = ((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * (((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)]) * (((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)]) * (((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)]) * (((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)]) * (((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)]) * -2.760768e-16f) + 2.000188e-13f)) + -8.604672e-11f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) / (((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)]) * (((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)]) * (((T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)] * T_broadcast_to_6[((i0_i1_fused_6 * 60) + i2_6)]) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525",
        "codellama_c": "void default_function_kernel(float* T_broadcast_to, float* T_fast_tanh, float* T_reshape, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1380; ++ax0_ax1_fused_ax2_fused) {\n    T_reshape[ax0_ax1_fused_ax2_fused] = ph[ax0_ax1_fused_ax2_fused];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1380; ++ax0_ax1_fused_ax2_fused_1) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_1] = T_reshape[ax0_ax1_fused_ax2_fused_1];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 1380; ++ax0_ax1_fused_ax2_fused_2) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_2] = min(9.000000e+00f, T_broadcast_to[ax0_ax1_fused_ax2_fused_2]);\n  }\n  float compute[23];\n  float T_softmax_maxelem[23];\n  for (int32_t ax0 = 0; ax0 < 23; ++ax0) {\n    T_softmax_maxelem[ax0] = -3.402823e+38f;\n    for (int32_t k = 0; k < 60; ++k) {\n      T_softmax_maxelem[ax0] = max(T_softmax_maxelem[ax0], T_broadcast_to[((ax0 * 60) + k)]);\n    }\n  }\n  for (int32_t ax0_1 = 0; ax0_1 < 23; ++ax0_1) {\n    compute[ax0_1] = 0.000000e+00f;\n    for (int32_t k_1 = 0; k_1 < 60; ++k_1) {\n      compute[ax0_1] = (compute[ax0_1] + expf((T_broadcast_to[((ax0_1 * 60) + k_1)] - T_softmax_maxelem[ax0_1])));\n    }\n  }\n  for (int32_t ax0_2 = 0; ax0_2 < 23; ++ax0_2) {\n    for (int32_t k_2 = 0; k_2 < 60; ++k_2) {\n      T_broadcast_to[((ax0_2 * 60) + k_2)] = ((T_broadcast_to[((ax0_2 * 60) + k_2)] - T_softmax_maxelem[ax0_2]) - logf(compute[ax0_2]));\n    }\n  }\n  for (int32_t ax0_3 = 0; ax0_3 < 23; ++ax0_3) {\n    for (int32_t k_3 = 0; k_3 < 60; ++k_3) {\n      T_broadcast_to[((ax0_3 * 60) + k_3)] = max(-9.000000e+00f, T_broadcast_to[((ax0_3 * 60) + k_3)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 1380; ++ax0_ax1_fused_ax2_fused_3) {\n    T_fast_tanh[ax0_ax1_fused_ax2_fused_3] = ((T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * (T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3])) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3]) * (T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3])) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3]) * (T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3])) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3]) * (T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3])) * -2.760768e-16f) + 2.000188e-13f)) + 5.122297e-08f)) + 1.485722e-05f)) + 6.372619e-04f)) + 4.893525e-03f)) / (((T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3]) * (((T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3]) * (T_broadcast_to[ax0_ax1_fused_ax2_fused_3] * T_broadcast_to[ax0_ax1_fused_ax2_fused_3])) * 1.198258e-06f) + 1.185347e-04f)) + 2.268435e-03f)) + 4.893525e-03f));\n  }\n}"
    },
    {
        "op_name": "graph_13",
        "c_code": "void default_function_kernel(float* T_fast_erf, float* ph, float* ph_1) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 128; ++ax0_ax1_fused) {\n    for (int32_t ax2_inner = 0; ax2_inner < 5; ++ax2_inner) {\n      T_fast_erf[((ax0_ax1_fused * 5) + ax2_inner)] = ((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * (((max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f) * max(min(((0.000000e+00f < ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)]) ? ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] : (ph[((((ax0_ax1_fused & 31) * 12) + ax2_inner) + 14)] * ph_1[(ax0_ax1_fused & 31)])), 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(640) default_function_kernel_1(float* __restrict__ T_broadcast_to, float* __restrict__ ph) {\n  T_broadcast_to[((int)threadIdx.x)] = ((0.000000e+00f < T_broadcast_to[((int)threadIdx.x)]) ? T_broadcast_to[((int)threadIdx.x)] : (T_broadcast_to[((int)threadIdx.x)] * ph[((((int)threadIdx.x) % 160) / 5)]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(640) default_function_kernel_2(float* __restrict__ T_broadcast_to, float* __restrict__ T_fast_erf) {\n  T_fast_erf[((int)threadIdx.x)] = ((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_broadcast_to, float* __restrict__ ph) {\n  if (((int)threadIdx.x) < 640) {\n    T_broadcast_to[((int)threadIdx.x)] = ph[(((((((int)threadIdx.x) % 160) / 5) * 12) + (((int)threadIdx.x) % 5)) + 14)];\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((1, 45, 12), \"float32\"), ph_1: T.Buffer((32,), \"float32\"), T_fast_erf: T.Buffer((4, 32, 5), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(128):\n            for ax2_inner in range(5):\n                cse_var_2: T.int32 = ax0_ax1_fused % 32\n                cse_var_1: T.int32 = cse_var_2 * 12 + ax2_inner + 14\n                T_fast_erf_1 = T.Buffer((640,), data=T_fast_erf.data)\n                ph_2 = T.Buffer((540,), data=ph.data)\n                T_fast_erf_1[ax0_ax1_fused * 5 + ax2_inner] = T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.float32(-2.7261423674040941e-10) + T.float32(2.7706814620387377e-08)) + T.float32(-2.101023937939317e-06)) + T.float32(-5.6925062381196767e-05)) + T.float32(-0.00073499063728377223)) + T.float32(-0.0029545999132096767)) + T.float32(-0.016096033155918121)) / (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.max(T.min(T.if_then_else(T.float32(0) < ph_2[cse_var_1], ph_2[cse_var_1], ph_2[cse_var_1] * ph_1[cse_var_2]), T.float32(4)), T.float32(-4)) * T.float32(-1.4566071513399947e-05) + T.float32(-0.00021337404905352741)) + T.float32(-0.001682827016338706)) + T.float32(-0.0073733292520046234)) + T.float32(-0.014264739118516445))",
        "op_args": "None",
        "input_shape": "[[1, 45, 12], [32]]",
        "output_shape": "[[4, 32, 5]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "T_fast_erf"
        ],
        "deepseek_c": "void default_function_kernel(float* T_broadcast_to, float* T_fast_erf, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 540; ++ax0_ax1_fused_ax2_fused) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused] = ph[((((ax0_ax1_fused_ax2_fused % 12) * 5) + (ax0_ax1_fused_ax2_fused / 12)) + 14)];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 540; ++i0_i1_fused_i2_fused) {\n    T_broadcast_to[i0_i1_fused_i2_fused] = ((0.000000e+00f < T_broadcast_to[i0_i1_fused_i2_fused]) ? T_broadcast_to[i0_i1_fused_i2_fused] : (T_broadcast_to[i0_i1_fused_i2_fused] * ph[((((i0_i1_fused_i2_fused % 160) / 5) * 12) + ((i0_i1_fused_i2_fused % 5) + 14))]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 540; ++i0_i1_fused_i2_fused_1) {\n    T_fast_erf[i0_i1_fused_i2_fused_1] = ((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[i0_i1_fused_i2_fused_1], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_broadcast_to, float* T_fast_erf, float* T_maximum, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 45; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_broadcast_to[((ax0_ax1_fused * 12) + ax2)] = ph[((ax0_ax1_fused * 12) + ax2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 45; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 12; ++ax2_1) {\n      T_maximum[((ax0_ax1_fused_1 * 12) + ax2_1)] = ((0.000000e+00f < T_broadcast_to[((ax0_ax1_fused_1 * 12) + ax2_1)])? T_broadcast_to[((ax0_ax1_fused_1 * 12) + ax2_1)] : (T_broadcast_to[((ax0_ax1_fused_1 * 12) + ax2_1)] * ph[(((ax2_1 % 5) * 12) + 14)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 45; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 12; ++i2) {\n      T_fast_erf[((i0_i1_fused * 12) + i2)] = ((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_i1_fused * 12) + i2)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_broadcast_to, float* T_broadcast_to_1, float* T_fast_erf, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 540; ++ax0_ax1_fused_ax2_fused) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused] = ph[((ax0_ax1_fused_ax2_fused % 12) + 14)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 540; ++ax0_ax1_fused_ax2_fused_1) {\n    T_broadcast_to_1[ax0_ax1_fused_ax2_fused_1] = ((0.000000e+00f < T_broadcast_to[ax0_ax1_fused_ax2_fused_1]) ? T_broadcast_to[ax0_ax1_fused_ax2_fused_1] : (T_broadcast_to[ax0_ax1_fused_ax2_fused_1] * ph[((ax0_ax1_fused_ax2_fused_1 % 12) + 14) / 5]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 540; ++ax0_ax1_fused_ax2_fused_2) {\n    T_fast_erf[ax0_ax1_fused_ax2_fused_2] = ((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_1[ax0_ax1_fused_ax2_fused_2], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}"
    },
    {
        "op_name": "graph_14",
        "c_code": "void default_function_kernel(float* T_softmax_norm, float* ph) {\n  float T_softmax_maxelem[17424];\n  float T_softmax_expsum[17424];\n  for (int32_t i0 = 0; i0 < 33; ++i0) {\n    for (int32_t i1 = 0; i1 < 12; ++i1) {\n      for (int32_t i2 = 0; i2 < 44; ++i2) {\n        T_softmax_maxelem[(((i0 * 528) + (i1 * 44)) + i2)] = -3.402823e+38f;\n        for (int32_t k = 0; k < 11; ++k) {\n          T_softmax_maxelem[(((i0 * 528) + (i1 * 44)) + i2)] = max(T_softmax_maxelem[(((i0 * 528) + (i1 * 44)) + i2)], sqrtf(ph[((i0 * 44) + i2)]));\n        }\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 33; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 12; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 44; ++i2_1) {\n        T_softmax_expsum[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)] = 0.000000e+00f;\n        for (int32_t k_1 = 0; k_1 < 11; ++k_1) {\n            int32_t v_ = ((int32_t)(floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          T_softmax_expsum[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)] = (T_softmax_expsum[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)] + max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (sqrtf(ph[((i0_1 * 44) + i2_1)]) - T_softmax_maxelem[(((i0_1 * 528) + (i1_1 * 44)) + i2_1)])));\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 363; ++i0_i1_fused) {\n    for (int32_t i2_2 = 0; i2_2 < 12; ++i2_2) {\n      for (int32_t i3_outer = 0; i3_outer < 3; ++i3_outer) {\n        for (int32_t i3_inner = 0; i3_inner < 16; ++i3_inner) {\n          if (((i3_outer * 4) + (i3_inner >> 2)) < 11) {\n              int32_t v__1 = ((int32_t)(floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            T_softmax_norm[((((i0_i1_fused * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)] = (max(((*(float *)(&(v__1))) * ((((((((((((((1.987569e-04f * (max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (sqrtf(ph[((((i0_i1_fused % 33) * 44) + (i3_outer * 16)) + i3_inner)]) - T_softmax_maxelem[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)])) / T_softmax_expsum[(((((i0_i1_fused % 33) * 528) + (i2_2 * 44)) + (i3_outer * 16)) + i3_inner)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_broadcast_to) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 11979) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = sqrtf(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_broadcast_to, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3993) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 1452)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_broadcast_to, float* __restrict__ T_broadcast_to_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 11979) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_broadcast_to_1[(((((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) % 1089) / 33) * 528) + (((((((int)blockIdx.x) * 124) + (((int)threadIdx.x) >> 2)) % 132) / 11) * 44)) + (((((int)blockIdx.x) * 12) + ((int)threadIdx.x)) % 44))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_6(float* __restrict__ T_broadcast_to, float* __restrict__ T_broadcast_to_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1089) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n  for (int k = 0; k < 11; ++k) {\n    if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1089) {\n      T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + T_broadcast_to_1[(((k * 17424) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))]);\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_broadcast_to, float* __restrict__ T_broadcast_to_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 11979) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_broadcast_to_1[(((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) / 33) * 44) + (((((int)blockIdx.x) * 12) + ((int)threadIdx.x)) % 44))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_broadcast_to) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 11979) {\n      int v_ = ((int)(floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_7(float* __restrict__ T_broadcast_to, float* __restrict__ T_broadcast_to_1, float* __restrict__ T_softmax_norm) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 11979) {\n    T_softmax_norm[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / T_broadcast_to_1[(((((((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) % 1089) / 33) * 528) + (((((((int)blockIdx.x) * 124) + (((int)threadIdx.x) >> 2)) % 132) / 11) * 44)) + (((((int)blockIdx.x) * 12) + ((int)threadIdx.x)) % 44))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_broadcast_to, float* __restrict__ T_broadcast_to_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1089) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = -3.402823e+38f;\n  }\n  for (int k = 0; k < 11; ++k) {\n    if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1089) {\n      T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], T_broadcast_to_1[(((k * 17424) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x))]);\n    }\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((1, 33, 1, 44), \"float32\"), T_softmax_norm: T.Buffer((11, 33, 12, 44), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([17424], \"float32\", \"global\")\n        T_softmax_expsum = T.allocate([17424], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((17424,), data=T_softmax_maxelem)\n        ph_1 = T.Buffer((1452,), data=ph.data)\n        for i0, i1, i2 in T.grid(33, 12, 44):\n            T_softmax_maxelem_1[i0 * 528 + i1 * 44 + i2] = T.float32(-3.4028234663852886e+38)\n            for k in range(11):\n                cse_var_1: T.int32 = i0 * 528 + i1 * 44 + i2\n                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], T.sqrt(ph_1[i0 * 44 + i2]))\n        T_softmax_expsum_1 = T.Buffer((17424,), data=T_softmax_expsum)\n        for i0, i1, i2 in T.grid(33, 12, 44):\n            T_softmax_expsum_1[i0 * 528 + i1 * 44 + i2] = T.float32(0)\n            for k in range(11):\n                cse_var_3: T.int32 = i0 * 44 + i2\n                cse_var_2: T.int32 = i0 * 528 + i1 * 44 + i2\n                T_softmax_expsum_1[cse_var_2] = T_softmax_expsum_1[cse_var_2] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.sqrt(ph_1[cse_var_3]) - T_softmax_maxelem_1[cse_var_2])\n        for i0_i1_fused in T.parallel(363):\n            for i2, i3_outer, i3_inner in T.grid(12, 3, 16):\n                if T.likely(i3_outer * 4 + i3_inner // 4 < 11):\n                    cse_var_8: T.int32 = i0_i1_fused % 33\n                    cse_var_7: T.int32 = i2 * 44\n                    cse_var_6: T.int32 = i3_outer * 16\n                    cse_var_5: T.int32 = cse_var_8 * 44 + cse_var_6 + i3_inner\n                    cse_var_4: T.int32 = cse_var_8 * 528 + cse_var_7 + cse_var_6 + i3_inner\n                    T_softmax_norm_1 = T.Buffer((191664,), data=T_softmax_norm.data)\n                    T_softmax_norm_1[i0_i1_fused * 528 + cse_var_7 + cse_var_6 + i3_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.sqrt(ph_1[cse_var_5]) - T_softmax_maxelem_1[cse_var_4]) / T_softmax_expsum_1[cse_var_4]",
        "op_args": "None",
        "input_shape": "[[1, 33, 1, 44]]",
        "output_shape": "[[11, 33, 12, 44]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_softmax_norm"
        ],
        "deepseek_c": "void default_function_kernel(float* T_broadcast_to, float* T_broadcast_to_1, float* ph, float* T_softmax_norm) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 1452; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused] = T_broadcast_to_1[ax0_ax1_fused_ax2_fused_ax3_fused % 1452];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 1452; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused] = sqrtf(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 1452; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused] = (T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused] - T_broadcast_to_1[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 1452; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 1452; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused] = (T_broadcast_to[ax0_ax1_fused_ax2_fused_ax3_fused] / T_broadcast_to_1[(((((((((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) % 1089) / 33) * 528) + (((((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) % 1089) / 11) * 44)) + ((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) % 11)) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) % 11) * 4)) + (ax0_ax1_fused_ax2_fused_ax3_fused % 4))]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_broadcast_to, float* T_broadcast_to_1, float* T_broadcast_to_2, float* T_broadcast_to_3, float* T_broadcast_to_4, float* T_broadcast_to_5, float* T_broadcast_to_6, float* T_broadcast_to_7, float* T_softmax_norm, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 33; ++ax0_ax1_fused) {\n    for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n      T_broadcast_to[((ax0_ax1_fused * 44) + ax3)] = ph[ax3];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 33; ++ax0_ax1_fused_1) {\n    for (int32_t ax3_1 = 0; ax3_1 < 44; ++ax3_1) {\n      T_broadcast_to_1[((ax0_ax1_fused_1 * 44) + ax3_1)] = T_broadcast_to[((ax0_ax1_fused_1 * 44) + ax3_1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 33; ++ax0_ax1_fused_2) {\n    for (int32_t ax3_2 = 0; ax3_2 < 44; ++ax3_2) {\n      T_broadcast_to_2[((ax0_ax1_fused_2 * 44) + ax3_2)] = sqrtf(T_broadcast_to[((ax0_ax1_fused_2 * 44) + ax3_2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_3 = 0; ax0_ax1_fused_3 < 33; ++ax0_ax1_fused_3) {\n    for (int32_t ax3_3 = 0; ax3_3 < 44; ++ax3_3) {\n      T_broadcast_to_3[((ax0_ax1_fused_3 * 44) + ax3_3)] = T_broadcast_to_1[((ax0_ax1_fused_3 * 44) + ax3_3)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_4 = 0; ax0_ax1_fused_4 < 33; ++ax0_ax1_fused_4) {\n    for (int32_t ax3_4 = 0; ax3_4 < 44; ++ax3_4) {\n      T_broadcast_to_4[((ax0_ax1_fused_4 * 44) + ax3_4)] = (T_broadcast_to[((ax0_ax1_fused_4 * 44) + ax3_4)] - T_broadcast_to_3[((ax0_ax1_fused_4 * 44) + ax3_4)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_5 = 0; ax0_ax1_fused_5 < 33; ++ax0_ax1_fused_5) {\n    for (int32_t ax3_5 = 0; ax3_5 < 44; ++ax3_5) {\n      T_broadcast_to_5[((ax0_ax1_fused_5 * 44) + ax3_5)] = 0.000000e+00f;\n    }\n  }\n  for (int32_t k = 0; k < 11; ++k) {\n    #pragma omp parallel for\n    for (int32_t ax0_ax1_fused_6 = 0; ax0_ax1_fused_6 < 33; ++ax0_ax1_fused_6) {\n      for (int32_t ax3_6 = 0; ax3_6 < 44; ++ax3_6) {\n        T_broadcast_to_5[((ax0_ax1_fused_6 * 44) + ax3_6)] = (T_broadcast_to_5[((ax0_ax1_fused_6 * 44) + ax3_6)] + T_broadcast_to_4[(((ax0_ax1_fused_6 * 11) + k) * 44) + ax3_6]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_7 = 0; ax0_ax1_fused_7 < 33; ++ax0_ax1_fused_7) {\n    for (int32_t ax3_7 = 0; ax3_7 < 44; ++ax3_7) {\n      T_broadcast_to_6[((ax0_ax1_fused_7 * 44) + ax3_7)] = -3.402823e+38f;\n    }\n  }\n  for (int32_t k_1 = 0; k_1 < 11; ++k_1) {\n    #pragma omp parallel for\n    for (int32_t ax0_ax1_fused_8 = 0; ax0_ax1_fused_8 < 33; ++ax0_ax1_fused_8) {\n      for (int32_t ax3_8 = 0; ax3_8 < 44; ++ax3_8) {\n        T_broadcast_to_6[((ax0_ax1_fused_8 * 44) + ax3_8)] = max(T_broadcast_to_6[((ax0_ax1_fused_8 * 44) + ax3_8)], T_broadcast_to_4[(((ax0_ax1_fused_8 * 11) + k_1) * 44) + ax3_8]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_9 = 0; ax0_ax1_fused_9 < 33; ++ax0_ax1_fused_9) {\n    for (int32_t ax3_9 = 0; ax3_9 < 44; ++ax3_9) {\n      T_broadcast_to_7[((ax0_ax1_fused_9 * 44) + ax3_9)] = T_broadcast_to_3[((ax0_ax1_fused_9 * 44) + ax3_9)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_10 = 0; ax0_ax1_fused_10 < 33; ++ax0_ax1_fused_10) {\n    for (int32_t ax3_10 = 0; ax3_10 < 44; ++ax3_10) {\n      T_softmax_norm[((ax0_ax1_fused_10 * 44) + ax3_10)] = (T_broadcast_to_2[((ax0_ax1_fused_10 * 44) + ax3_10)] / T_broadcast_to_5[((ax0_ax1_fused_10 * 44) + ax3_10)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_broadcast_to, float* T_broadcast_to_1, float* T_broadcast_to_2, float* T_broadcast_to_3, float* T_broadcast_to_4, float* T_softmax_norm, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 33; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n      T_broadcast_to[((ax0_ax1_fused_ax2_fused * 44) + ax3)] = ph[ax3];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 33; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t ax3_1 = 0; ax3_1 < 44; ++ax3_1) {\n      T_broadcast_to_1[((ax0_ax1_fused_ax2_fused_1 * 44) + ax3_1)] = T_broadcast_to[((ax0_ax1_fused_ax2_fused_1 * 44) + ax3_1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 33; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t ax3_2 = 0; ax3_2 < 44; ++ax3_2) {\n      T_broadcast_to_2[((ax0_ax1_fused_ax2_fused_2 * 44) + ax3_2)] = -3.402823e+38f;\n    }\n  }\n  for (int32_t k = 0; k < 11; ++k) {\n    for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 33; ++ax0_ax1_fused_ax2_fused_3) {\n      for (int32_t ax3_3 = 0; ax3_3 < 44; ++ax3_3) {\n        T_broadcast_to_2[((ax0_ax1_fused_ax2_fused_3 * 44) + ax3_3)] = max(T_broadcast_to_2[((ax0_ax1_fused_ax2_fused_3 * 44) + ax3_3)], T_broadcast_to_1[(((k * 17424) + (ax0_ax1_fused_ax2_fused_3 * 44)) + ax3_3)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 33; ++ax0_ax1_fused_ax2_fused_4) {\n    for (int32_t ax3_4 = 0; ax3_4 < 44; ++ax3_4) {\n      T_broadcast_to_3[((ax0_ax1_fused_ax2_fused_4 * 44) + ax3_4)] = T_broadcast_to_2[((ax0_ax1_fused_ax2_fused_4 * 44) + ax3_4)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_5 = 0; ax0_ax1_fused_ax2_fused_5 < 33; ++ax0_ax1_fused_ax2_fused_5) {\n    for (int32_t ax3_5 = 0; ax3_5 < 44; ++ax3_5) {\n      T_broadcast_to_4[((ax0_ax1_fused_ax2_fused_5 * 44) + ax3_5)] = 0.000000e+00f;\n    }\n  }\n  for (int32_t k_1 = 0; k_1 < 11; ++k_1) {\n    for (int32_t ax0_ax1_fused_ax2_fused_6 = 0; ax0_ax1_fused_ax2_fused_6 < 33; ++ax0_ax1_fused_ax2_fused_6) {\n      for (int32_t ax3_6 = 0; ax3_6 < 44; ++ax3_6) {\n        T_broadcast_to_4[((ax0_ax1_fused_ax2_fused_6 * 44) + ax3_6)] = (T_broadcast_to_4[((ax0_ax1_fused_ax2_fused_6 * 44) + ax3_6)] + T_broadcast_to_1[(((k_1 * 17424) + (ax0_ax1_fused_ax2_fused_6 * 44)) + ax3_6)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_7 = 0; ax0_ax1_fused_ax2_fused_7 < 33; ++ax0_ax1_fused_ax2_fused_7) {\n    for (int32_t ax3_7 = 0; ax3_7 < 44; ++ax3_7) {\n      T_broadcast_to[((ax0_ax1_fused_ax2_fused_7 * 44) + ax3_7)] = T_broadcast_to_4[((ax0_ax1_fused_ax2_fused_7 * 44) + ax3_7)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_8 = 0; ax0_ax1_fused_ax2_fused_8 < 33; ++ax0_ax1_fused_ax2_fused_8) {\n    for (int32_t ax3_8 = 0; ax3_8 < 44; ++ax3_8) {\n      T_broadcast_to[((ax0_ax1_fused_ax2_fused_8 * 44) + ax3_8)] = sqrtf(T_broadcast_to[((ax0_ax1_fused_ax2_fused_8 * 44) + ax3_8)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_9 = 0; ax0_ax1_fused_ax2_fused_9 < 33; ++ax0_ax1_fused_ax2_fused_9) {\n    for (int32_t ax3_9 = 0; ax3_9 < 44; ++ax3_9) {\n      T_broadcast_to[((ax0_ax1_fused_ax2_fused_9 * 44) + ax3_9)] = T_broadcast_to[((ax0_ax1_fused_ax2_fused_9 * 44) + ax3_9)];\n    }\n  }\n  for (int32_t k_2 = 0; k_2 < 11; ++k_2) {\n    for (int32_t ax0_ax1_fused_ax2_fused_10 = 0; ax0_ax1_fused_ax2_fused_10 < 33; ++ax0_ax1_fused_ax2_fused_10) {\n      for (int32_t ax3_10 = 0; ax3_10 < 44; ++ax3_10) {\n        T_broadcast_to[((ax0_ax1_fused_ax2_fused_10 * 44) + ax3_10)] = (T_broadcast_to[((ax0_ax1_fused_ax2_fused_10 * 44) + ax3_10)] - T_broadcast_to_1[(((k_2 * 17424) + (ax0_ax1_fused_ax2_fused_10 * 44)) + ax3_10)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_11 = 0; ax0_ax1_fused_ax2_fused_11 < 33; ++ax0_ax1_fused_ax2_fused_11) {\n    for (int32_t ax3_11 = 0; ax3_11 < 44; ++ax3_11) {\n      T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)] = max(((*(float *)(&(floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * ((((((((((((((1.987569e-04f * (max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_broadcast_to[((ax0_ax1_fused_ax2_fused_11 * 44) + ax3_11)]);\n      }\n    }\n  }"
    },
    {
        "op_name": "graph_15",
        "c_code": "void default_function_kernel(float* compute, float* ph, float* ph_1) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 100; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      for (int32_t i3_inner = 0; i3_inner < 10; ++i3_inner) {\n          int32_t v_ = ((int32_t)(floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        compute[(((i0_i1_fused * 100) + (i2 * 10)) + i3_inner)] = expf(max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)] * ph_1[((((((i0_i1_fused / 10) * 79860) + ((i0_i1_fused % 10) * 2420)) + (i2 * 55)) + i3_inner) + 933559)])));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 31944) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 1452)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 44)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 16973)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n      int v_ = ((int)(floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 79860) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 2420)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 55)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 933559)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice_1[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_strided_slice, float* __restrict__ compute) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), ph_1: T.Buffer((22, 33, 44, 55), \"float32\"), compute: T.Buffer((10, 10, 10, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(100):\n            for i2, i3_inner in T.grid(10, 10):\n                cse_var_4: T.int32 = i0_i1_fused % 10\n                cse_var_3: T.int32 = i0_i1_fused // 10\n                cse_var_2: T.int32 = cse_var_3 * 79860 + cse_var_4 * 2420 + i2 * 55 + i3_inner + 933559\n                cse_var_1: T.int32 = cse_var_3 * 31944 + cse_var_4 * 1452 + i2 * 44 + i3_inner + 16973\n                compute_1 = T.Buffer((10000,), data=compute.data)\n                ph_2 = T.Buffer((351384,), data=ph.data)\n                ph_3 = T.Buffer((1756920,), data=ph_1.data)\n                compute_1[i0_i1_fused * 100 + i2 * 10 + i3_inner] = T.exp(T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_2[cse_var_1] * ph_3[cse_var_2], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_2[cse_var_1] * ph_3[cse_var_2]))",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44], [22, 33, 44, 55]]",
        "output_shape": "[[10, 10, 10, 10]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "compute"
        ],
        "deepseek_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* compute) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 33792; ++i0_i1_fused_i2_fused_i3_fused) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused] = ph[((((((((((i0_i1_fused_i2_fused_i3_fused / 121) * 121) + (i0_i1_fused_i2_fused_i3_fused % 11)) / 11) * 11) + ((i0_i1_fused_i2_fused_i3_fused % 121) / 11)) * 11) + (((i0_i1_fused_i2_fused_i3_fused % 121) % 11) / 1)) * 11) + ((i0_i1_fused_i2_fused_i3_fused % 11) % 1)) + 16973)];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 33792; ++i0_i1_fused_i2_fused_i3_fused) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused] = max(min(T_strided_slice[i0_i1_fused_i2_fused_i3_fused], 8.837627e+01f), -8.837626e+01f);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 33792; ++i0_i1_fused_i2_fused_i3_fused) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused] = ph[((((((((((i0_i1_fused_i2_fused_i3_fused / 121) * 121) + (i0_i1_fused_i2_fused_i3_fused % 11)) / 11) * 11) + (((i0_i1_fused_i2_fused_i3_fused % 121) / 11) * 1)) * 11) + (((i0_i1_fused_i2_fused_i3_fused % 121) % 11) / 1)) * 11) + ((i0_i1_fused_i2_fused_i3_fused % 11) % 1)) + 933559)];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 33792; ++i0_i1_fused_i2_fused_i3_fused) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused] = (T_strided_slice[i0_i1_fused_i2_fused_i3_fused] * T_strided_slice_1[i0_i1_fused_i2_fused_i3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 33792; ++i0_i1_fused_i2_fused_i3_fused) {\n    compute[i0_i1_fused_i2_fused_i3_fused] = expf(T_strided_slice[i0_i1_fused_i2_fused_i3_fused]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_strided_slice_2, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 125; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 250; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        T_strided_slice[(((ax0_ax1_fused * 2500) + (ax2 * 10)) + ax3)] = ph[(((((ax0_ax1_fused / 125) * 31944) + ((ax2 / 25) * 1452)) + ((ax2 % 50) * 44)) + ax3)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 125; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 250; ++ax2_1) {\n      for (int32_t ax3_1 = 0; ax3_1 < 10; ++ax3_1) {\n        T_strided_slice_1[(((ax0_ax1_fused_1 * 2500) + (ax2_1 * 10)) + ax3_1)] = ph[(((((ax0_ax1_fused_1 / 125) * 79860) + ((ax2_1 / 25) * 2420)) + ((ax2_1 % 50) * 55)) + ax3_1)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 125; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 250; ++ax2_2) {\n      for (int32_t ax3_2 = 0; ax3_2 < 10; ++ax3_2) {\n        T_strided_slice_2[(((ax0_ax1_fused_2 * 2500) + (ax2_2 * 10)) + ax3_2)] = (T_strided_slice[(((ax0_ax1_fused_2 * 2500) + (ax2_2 * 10)) + ax3_2)] * T_strided_slice_1[(((ax0_ax1_fused_2 * 2500) + (ax2_2 * 10)) + ax3_2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 125; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 250; ++i2) {\n      for (int32_t i3 = 0; i3 < 10; ++i3) {\n        compute[(((i0_i1_fused * 2500) + (i2 * 10)) + i3)] = expf(T_strided_slice_2[(((i0_i1_fused * 2500) + (i2 * 10)) + i3)]);\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2664; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused * 10) + ax3)] = ph[(((((ax0_ax1_fused_ax2_fused / 220) * 31944) + (((ax0_ax1_fused_ax2_fused % 220) / 11) * 1452)) + ((ax0_ax1_fused_ax2_fused % 22) * 44)) + ax3) + 16973]];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 26640; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[(((((ax0_ax1_fused_ax2_fused_ax3_fused / 2200) * 79860) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 2200) / 110) * 2420)) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 220) / 11) * 55)) + ((ax0_ax1_fused_ax2_fused_ax3_fused % 22) * 5)) + 933559)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 26640; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_1] = (T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_1] * T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 26640; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    compute[ax0_ax1_fused_ax2_fused_ax3_fused_2] = expf(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2]);\n  }\n}"
    },
    {
        "op_name": "graph_16",
        "c_code": "void default_function_kernel(float* T_softmax_norm, float* ph) {\n  float T_softmax_maxelem[10000];\n  float T_softmax_expsum[10000];\n  for (int32_t i0 = 0; i0 < 4; ++i0) {\n    for (int32_t i1 = 0; i1 < 50; ++i1) {\n      for (int32_t i2 = 0; i2 < 50; ++i2) {\n        T_softmax_maxelem[(((i0 * 2500) + (i1 * 50)) + i2)] = -3.402823e+38f;\n        for (int32_t k = 0; k < 16; ++k) {\n          float cse_var_3 = (((((float)i2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n          float cse_var_2 = (((((float)i1) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n          T_softmax_maxelem[(((i0 * 2500) + (i1 * 50)) + i2)] = max(T_softmax_maxelem[(((i0 * 2500) + (i1 * 50)) + i2)], ((0.000000e+00f < ((((((ph[((((i0 * 16384) + (k * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (ph[((((i0 * 16384) + (k * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[((((i0 * 16384) + (k * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (ph[((((i0 * 16384) + (k * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0 * 16384) + (k * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (ph[((((i0 * 16384) + (k * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[((((i0 * 16384) + (k * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (ph[((((i0 * 16384) + (k * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0 * 16384) + (k * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (ph[((((i0 * 16384) + (k * 1024)) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[((((i0 * 16384) + (k * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_3)), 31), 0))] * (1.000000e+00f - (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) + (ph[((((i0 * 16384) + (k * 1024)) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_3)) + 1), 31), 0))] * (cse_var_3 - ((float)((int32_t)floorf(cse_var_3)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)));\n        }\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 4; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 50; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 50; ++i2_1) {\n        T_softmax_expsum[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)] = 0.000000e+00f;\n        for (int32_t k_1 = 0; k_1 < 16; ++k_1) {\n          float cse_var_7 = (((((float)i2_1) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n          float cse_var_6 = (((((float)i1_1) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n            int32_t v_ = ((int32_t)(floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          T_softmax_expsum[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)] = (T_softmax_expsum[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)] + max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (((0.000000e+00f < ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min(((int32_t)floorf(cse_var_6)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (1.000000e+00f - (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + (((ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_7)), 31), 0))] * (1.000000e+00f - (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) + (ph[((((i0_1 * 16384) + (k_1 * 1024)) + (max(min((((int32_t)floorf(cse_var_6)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_7)) + 1), 31), 0))] * (cse_var_7 - ((float)((int32_t)floorf(cse_var_7)))))) * (cse_var_6 - ((float)((int32_t)floorf(cse_var_6)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((i0_1 * 2500) + (i1_1 * 50)) + i2_1)])));\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 64; ++i0_i1_fused) {\n    for (int32_t i2_2 = 0; i2_2 < 50; ++i2_2) {\n      for (int32_t i3_outer = 0; i3_outer < 4; ++i3_outer) {\n        for (int32_t i3_inner = 0; i3_inner < 16; ++i3_inner) {\n          if (((i3_outer * 8) + (i3_inner >> 1)) < 25) {\n            float cse_var_11 = (((((float)i2_2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n            float cse_var_10 = (((((float)((i3_outer * 16) + i3_inner)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n              int32_t v__1 = ((int32_t)(floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            T_softmax_norm[((((i0_i1_fused * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)] = (max(((*(float *)(&(v__1))) * ((((((((((((((1.987569e-04f * (max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (((0.000000e+00f < ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f)) ? ((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) : (((((((ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_11)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (1.000000e+00f - (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + (((ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_10)), 31), 0))] * (1.000000e+00f - (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) + (ph[(((i0_i1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_11)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_10)) + 1), 31), 0))] * (cse_var_10 - ((float)((int32_t)floorf(cse_var_10)))))) * (cse_var_11 - ((float)((int32_t)floorf(cse_var_11)))))) + 3.000000e+00f) * 7.692308e-02f) * 5.000000e-01f)) - T_softmax_maxelem[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)])) / T_softmax_expsum[(((((i0_i1_fused >> 4) * 2500) + (i2_2 * 50)) + (i3_outer * 16)) + i3_inner)]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_softmax_maxelem, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_softmax_maxelem[(((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 625) * 2500) + (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 2500))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ ph, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((((ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min(((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min(((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0))] * (1.000000e+00f - ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min(((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min((((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0))] * ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * (1.000000e+00f - ((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (((ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min((((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min(((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0))] * (1.000000e+00f - ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min((((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min((((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0))] * ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_6(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n      int v_ = ((int)(floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_8(float* __restrict__ T_softmax_maxelem, float* __restrict__ T_softmax_norm, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    T_softmax_norm[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / T_softmax_maxelem[(((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 625) * 2500) + (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 2500))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((0.000000e+00f < resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]) ? resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] : (resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * 5.000000e-01f));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_softmax_maxelem, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_softmax_maxelem[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = -3.402823e+38f;\n  }\n  for (int k = 0; k < 16; ++k) {\n    if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n      T_softmax_maxelem[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(T_softmax_maxelem[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], resize[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 40000) + (k * 2500)) + (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 2500))]);\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_7(float* __restrict__ T_softmax_maxelem, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_softmax_maxelem[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n  for (int k = 0; k < 16; ++k) {\n    if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n      T_softmax_maxelem[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_softmax_maxelem[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + resize[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 40000) + (k * 2500)) + (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 2500))]);\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * 7.692308e-02f);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + 3.000000e+00f);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((4, 16, 32, 32), \"float32\"), T_softmax_norm: T.Buffer((4, 16, 50, 50), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([10000], \"float32\", \"global\")\n        T_softmax_expsum = T.allocate([10000], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((10000,), data=T_softmax_maxelem)\n        ph_1 = T.Buffer((65536,), data=ph.data)\n        for i0, i1, i2 in T.grid(4, 50, 50):\n            T_softmax_maxelem_1[i0 * 2500 + i1 * 50 + i2] = T.float32(-3.4028234663852886e+38)\n            for k in range(16):\n                cse_var_4: T.int32 = i0 * 16384 + k * 1024\n                cse_var_3: T.float32 = (T.Cast(\"float32\", i2) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                cse_var_2: T.float32 = (T.Cast(\"float32\", i1) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                cse_var_1: T.int32 = i0 * 2500 + i1 * 50 + i2\n                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], T.if_then_else(T.float32(0) < ((ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)), 31), 0)] * (T.float32(1) - (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) + ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)) + 1, 31), 0)] * (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)), 31), 0)] * (T.float32(1) - (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) + ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)) + 1, 31), 0)] * (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)), 31), 0)] * (T.float32(1) - (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) + ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)) + 1, 31), 0)] * (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)), 31), 0)] * (T.float32(1) - (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) + ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)) + 1, 31), 0)] * (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)), 31), 0)] * (T.float32(1) - (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) + ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)) + 1, 31), 0)] * (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)), 31), 0)] * (T.float32(1) - (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) + ph_1[cse_var_4 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_3)) + 1, 31), 0)] * (cse_var_3 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_3))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)))\n        T_softmax_expsum_1 = T.Buffer((10000,), data=T_softmax_expsum)\n        for i0, i1, i2 in T.grid(4, 50, 50):\n            T_softmax_expsum_1[i0 * 2500 + i1 * 50 + i2] = T.float32(0)\n            for k in range(16):\n                cse_var_8: T.int32 = i0 * 16384 + k * 1024\n                cse_var_7: T.float32 = (T.Cast(\"float32\", i2) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                cse_var_6: T.float32 = (T.Cast(\"float32\", i1) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                cse_var_5: T.int32 = i0 * 2500 + i1 * 50 + i2\n                T_softmax_expsum_1[cse_var_5] = T_softmax_expsum_1[cse_var_5] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.if_then_else(T.float32(0) < ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (T.float32(1) - (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6))))) + (ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)), 31), 0)] * (T.float32(1) - (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) + ph_1[cse_var_8 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_6)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_7)) + 1, 31), 0)] * (cse_var_7 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_7))))) * (cse_var_6 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_6)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_5])\n        for i0_i1_fused in T.parallel(64):\n            for i2, i3_outer, i3_inner in T.grid(50, 4, 16):\n                if T.likely(i3_outer * 8 + i3_inner // 2 < 25):\n                    cse_var_14: T.int32 = i2 * 50\n                    cse_var_13: T.int32 = i3_outer * 16\n                    cse_var_12: T.int32 = i0_i1_fused * 1024\n                    cse_var_11: T.float32 = (T.Cast(\"float32\", i2) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                    cse_var_10: T.float32 = (T.Cast(\"float32\", cse_var_13 + i3_inner) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                    cse_var_9: T.int32 = i0_i1_fused // 16 * 2500 + cse_var_14 + cse_var_13 + i3_inner\n                    T_softmax_norm_1 = T.Buffer((160000,), data=T_softmax_norm.data)\n                    T_softmax_norm_1[i0_i1_fused * 2500 + cse_var_14 + cse_var_13 + i3_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.if_then_else(T.float32(0) < ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927), ((ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (T.float32(1) - (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11))))) + (ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)), 31), 0)] * (T.float32(1) - (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) + ph_1[cse_var_12 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_11)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_10)) + 1, 31), 0)] * (cse_var_10 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_10))))) * (cse_var_11 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_11)))) + T.float32(3)) * T.float32(0.076923076923076927) * T.float32(0.5)) - T_softmax_maxelem_1[cse_var_9]) / T_softmax_expsum_1[cse_var_9]",
        "op_args": "None",
        "input_shape": "[[4, 16, 32, 32]]",
        "output_shape": "[[4, 16, 50, 50]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_softmax_norm"
        ],
        "deepseek_c": "#include <assert.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nvoid default_function_kernel(float* __restrict__ ph, float* __restrict__ resize) {\n  #pragma omp parallel for\n  for (int32_t _ind = 0; _ind < 16384; ++_ind) {\n    resize[_ind] = ((((ph[((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int32_t)(((((((((int",
        "starcoder_c": "void default_function_kernel(float* T_softmax_maxelem, float* T_softmax_norm, float* ph, float* resize) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 4096; ++i0_i1_fused_i2_fused_i3_fused) {\n    resize[i0_i1_fused_i2_fused_i3_fused] = ((((ph[i0_i1_fused_i2_fused_i3_fused] * (1.000000e+00f - ((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))) + (ph[((i0_i1_fused_i2_fused_i3_fused / 1024) * 1024) + max(min(((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0)] * ((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * (1.000000e+00f - ((((((float)((i0_i1_fused_i2_fused_i3_fused / 1024)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused / 1024)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) + (((ph[((i0_i1_fused_i2_fused_i3_fused / 1024) * 1024) + max(min(((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)) + 1), 31), 0)] * (1.000000e+00f - ((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((i0_i1_fused_i2_fused_i3_fused / 1024) * 1024) + max(min(((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)) + 1), 31), 0)] * ((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 1024) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)((i0_i1_fused_i2_fused_i3_fused / 1024)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused / 1024)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))));\n    resize[i0_i1_fused_i2_fused_i3_fused] = (resize[i0_i1_fused_i2_fused_i3_fused] * 7.692308e-02f);\n    resize[i0_i1_fused_i2_fused_i3_fused] = ((0.000000e+00f < resize[i0_i1_fused_i2_fused_i3_fused])? resize[i0_i1_fused_i2_fused_i3_fused] : (resize[i0_i1_fused_i2_fused_i3_fused] * 5.000000e-01f));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 64; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 32; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 32; ++ax3) {\n        T_softmax_maxelem[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)] = -3.402823e+38f;\n      }\n    }\n  }\n  for (int32_t k = 0; k < 16; ++k) {\n    #pragma omp parallel for\n    for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 64; ++ax0_ax1_fused_1) {\n      for (int32_t ax2_1 = 0; ax2_1 < 32; ++ax2_1) {\n        for (int32_t ax3_1 = 0; ax3_1 < 32; ++ax3_1) {\n          T_softmax_maxelem[(((ax0_ax1_fused_1 * 1024) + (ax2_1 * 32)) + ax3_1)] = max(T_softmax_maxelem[(((ax0_ax1_fused_1 * 1024) + (ax2_1 * 32)) + ax3_1)], resize[(((((ax0_ax1_fused_1 * 4096) + (k * 1024)) + (ax2_1 * 32)) + ax3_1) + 3072)]);\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 4096; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    resize[ax0_ax1_fused_ax2_fused_ax3_fused] = (resize[ax0_ax1_fused_ax2_fused_ax3_fused] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 64; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 32; ++ax2_2) {\n      for (int32_t ax3_2 = 0; ax3_2 < 32; ++ax3_2) {\n        T_softmax_norm[(((ax0_ax1_fused_2 * 1024) + (ax2_2 * 32)) + ax3_2)] = 0.000000e+00f;\n      }\n    }\n  }\n  for (int32_t k_1 = 0; k_1 < 16; ++k_1) {\n    #pragma omp parallel for\n    for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 4096; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n      T_softmax_norm[ax0_ax1_fused_ax2_fused_ax3_fused_1] = (T_softmax_norm[ax0_ax1_fused_ax2_fused_ax3_fused_1] + resize[(((((ax0_ax1_fused_ax2_fused_ax3_fused_1 / 1024) * 4096) + (k_1 * 1024)) + (ax0_ax1_fused_ax2_fused_ax3_fused_1 % 1024)) + 3072)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 4096; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    resize[ax0_ax1_fused_ax2_fused_ax3_fused_2] = (resize[ax0_ax1_fused_ax2_fused_ax3_fused_2] / T_softmax_norm[ax0_ax1_fused_ax2_fused_ax3_fused_2]);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_softmax_maxelem, float* T_softmax_norm, float* ph, float* resize) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 512; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3 = 0; i3 < 32; ++i3) {\n      float T_softmax_maxelem_s[1];\n      float T_softmax_norm_s[1];\n      for (int32_t i1 = 0; i1 < 16; ++i1) {\n        T_softmax_maxelem_s[0] = -3.402823e+38f;\n        for (int32_t k = 0; k < 16; ++k) {\n          T_softmax_maxelem_s[0] = max(T_softmax_maxelem_s[0], ph[((((i0_i1_fused_i2_fused * 512) + (i1 * 512)) + (k * 32)) + i3)]);\n        }\n        for (int32_t k_1 = 0; k_1 < 16; ++k_1) {\n          resize[((((i0_i1_fused_i2_fused * 512) + (i1 * 512)) + (k_1 * 32)) + i3)] = (ph[((((i0_i1_fused_i2_fused * 512) + (i1 * 512)) + (k_1 * 32)) + i3)] - T_softmax_maxelem_s[0]);\n        }\n      }\n      for (int32_t i1_1 = 0; i1_1 < 16; ++i1_1) {\n        for (int32_t k_2 = 0; k_2 < 16; ++k_2) {\n          T_softmax_norm_s[0] = 0.000000e+00f;\n          for (int32_t k_3 = 0; k_3 < 16; ++k_3) {\n            T_softmax_norm_s[0] = (T_softmax_norm_s[0] + resize[((((i0_i1_fused_i2_fused * 512) + (i1_1 * 512)) + (k_2 * 32)) + k_3)]);\n          }\n          for (int32_t k_4 = 0; k_4 < 16; ++k_4) {\n            resize[((((i0_i1_fused_i2_fused * 512) + (i1_1 * 512)) + (k_2 * 32)) + k_4)] = (resize[((((i0_i1_fused_i2_fused * 512) + (i1_1 * 512)) + (k_2 * 32)) + k_4)] / T_softmax_norm_s[0]);\n          }\n        }\n      }\n    }\n  }\n}"
    },
    {
        "op_name": "graph_17",
        "c_code": "void default_function_kernel(float* T_reverse_sequence, float* ph) {\n  float T_softmax_maxelem[242];\n  float T_softmax_expsum[242];\n  for (int32_t i0 = 0; i0 < 11; ++i0) {\n    for (int32_t i1 = 0; i1 < 22; ++i1) {\n      T_softmax_maxelem[((i0 * 22) + i1)] = -3.402823e+38f;\n      for (int32_t k = 0; k < 42; ++k) {\n        T_softmax_maxelem[((i0 * 22) + i1)] = max(T_softmax_maxelem[((i0 * 22) + i1)], ph[(((i0 * 924) + (i1 * 42)) + k)]);\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 11; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 22; ++i1_1) {\n      T_softmax_expsum[((i0_1 * 22) + i1_1)] = 0.000000e+00f;\n      for (int32_t k_1 = 0; k_1 < 42; ++k_1) {\n          int32_t v_ = ((int32_t)(floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_softmax_expsum[((i0_1 * 22) + i1_1)] = (T_softmax_expsum[((i0_1 * 22) + i1_1)] + max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (ph[(((i0_1 * 924) + (i1_1 * 42)) + k_1)] - T_softmax_maxelem[((i0_1 * 22) + i1_1)])));\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 77; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 22; ++ax2) {\n      for (int32_t ax3_outer = 0; ax3_outer < 3; ++ax3_outer) {\n        for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {\n          if (((ax3_outer * 8) + (ax3_inner >> 1)) < 21) {\n              int32_t v__1 = ((int32_t)(floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            T_reverse_sequence[((((ax0_ax1_fused * 924) + (ax2 * 42)) + (ax3_outer * 16)) + ax3_inner)] = (max(((*(float *)(&(v__1))) * ((((((((((((((1.987569e-04f * (max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (ph[(((((ax2 * 42) + (ax3_outer * 16)) + ax3_inner) + 9240) - ((ax0_ax1_fused / 7) * 924))] - T_softmax_maxelem[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))])) / T_softmax_expsum[((ax2 + 220) - ((ax0_ax1_fused / 7) * 22))]);\n          }\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_reshape, float* __restrict__ T_softmax_maxelem) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 2541) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_softmax_maxelem[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 21)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_6(float* __restrict__ T_broadcast_to, float* __restrict__ T_reshape) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 17787) {\n    T_broadcast_to[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_reshape[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 1617) * 924) + (((((((int)blockIdx.x) * 50) + (((int)threadIdx.x) >> 1)) % 462) / 21) * 42)) + (((((int)blockIdx.x) * 16) + ((int)threadIdx.x)) % 42))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(242) default_function_kernel_4(float* __restrict__ T_reshape, float* __restrict__ T_softmax_maxelem) {\n  T_softmax_maxelem[((int)threadIdx.x)] = 0.000000e+00f;\n  for (int k = 0; k < 42; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = (T_softmax_maxelem[((int)threadIdx.x)] + T_reshape[((((int)threadIdx.x) * 42) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_7(float* __restrict__ T_broadcast_to, float* __restrict__ T_reverse_sequence) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 17787) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_broadcast_to[(((((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 6468) + 64680) - ((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 1617) * 6468))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_reshape, float* __restrict__ T_softmax_maxelem) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 2541) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / T_softmax_maxelem[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) / 21)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_reshape) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 2541) {\n      int v_ = ((int)(floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 2541) {\n    T_reshape[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[(((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 231) * 924) + (((((((int)blockIdx.x) * 50) + (((int)threadIdx.x) >> 1)) % 462) / 21) * 42)) + (((((((int)blockIdx.x) * 16) + ((int)threadIdx.x)) % 42) / 7) * 7)) + (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 7))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(242) default_function_kernel_1(float* __restrict__ T_reshape, float* __restrict__ T_softmax_maxelem) {\n  T_softmax_maxelem[((int)threadIdx.x)] = -3.402823e+38f;\n  for (int k = 0; k < 42; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = max(T_softmax_maxelem[((int)threadIdx.x)], T_reshape[((((int)threadIdx.x) * 42) + k)]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 6, 7), \"float32\"), T_reverse_sequence: T.Buffer((11, 7, 22, 42), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([242], \"float32\", \"global\")\n        T_softmax_expsum = T.allocate([242], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((242,), data=T_softmax_maxelem)\n        ph_1 = T.Buffer((10164,), data=ph.data)\n        for i0, i1 in T.grid(11, 22):\n            T_softmax_maxelem_1[i0 * 22 + i1] = T.float32(-3.4028234663852886e+38)\n            for k in range(42):\n                cse_var_1: T.int32 = i0 * 22 + i1\n                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], ph_1[i0 * 924 + i1 * 42 + k])\n        T_softmax_expsum_1 = T.Buffer((242,), data=T_softmax_expsum)\n        for i0, i1 in T.grid(11, 22):\n            T_softmax_expsum_1[i0 * 22 + i1] = T.float32(0)\n            for k in range(42):\n                cse_var_3: T.int32 = i0 * 22 + i1\n                cse_var_2: T.int32 = i0 * 924 + i1 * 42 + k\n                T_softmax_expsum_1[cse_var_3] = T_softmax_expsum_1[cse_var_3] + T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_1[cse_var_2] - T_softmax_maxelem_1[cse_var_3])\n        for ax0_ax1_fused in T.parallel(77):\n            for ax2, ax3_outer, ax3_inner in T.grid(22, 3, 16):\n                if T.likely(ax3_outer * 8 + ax3_inner // 2 < 21):\n                    cse_var_8: T.int32 = ax0_ax1_fused // 7\n                    cse_var_7: T.int32 = ax2 * 42\n                    cse_var_6: T.int32 = ax3_outer * 16\n                    cse_var_5: T.int32 = ax2 + 220 - cse_var_8 * 22\n                    cse_var_4: T.int32 = cse_var_7 + cse_var_6 + ax3_inner + 9240 - cse_var_8 * 924\n                    T_reverse_sequence_1 = T.Buffer((71148,), data=T_reverse_sequence.data)\n                    T_reverse_sequence_1[ax0_ax1_fused * 924 + cse_var_7 + cse_var_6 + ax3_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5]) / T_softmax_expsum_1[cse_var_5]",
        "op_args": "None",
        "input_shape": "[[11, 22, 6, 7]]",
        "output_shape": "[[11, 7, 22, 42]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_reverse_sequence"
        ],
        "deepseek_c": "void default_function_kernel(float* T_reshape, float* ph) {\n  float T_softmax_maxelem[242];\n  float T_broadcast_to[6468];\n  float T_reverse_sequence[6468];\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_reshape[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[((((((ax0_ax1_fused_ax2_fused_ax3_fused / 231) * 924) + ((((ax0_ax1_fused_ax2_fused_ax3_fused % 462) / 21) * 42)) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 42) / 7) * 7)) + ((ax0_ax1_fused_ax2_fused_ax3_fused % 7) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused))];\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_1] = -3.402823e+38f;\n    for (int k_1 = 0; k_1 < 42; ++k_1) {\n      T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_1] = max(T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_1], T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_1 * 42) + k_1)]);\n    }\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    for (int k_2 = 0; k_2 < 42; ++k_2) {\n      T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_2 * 42) + k_2)] = (T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_2 * 42) + k_2)] - T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_2]);\n    }\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_3 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_3 < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused_3) {\n    for (int k_3 = 0; k_3 < 42; ++k_3) {\n      T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_3 * 42) + k_3)] = expf(T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_3 * 42) + k_3)]);\n    }\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_4 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_4 < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused_4) {\n    T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_4] = 0.000000e+00f;\n    for (int k_4 = 0; k_4 < 42; ++k_4) {\n      T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_4] = (T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_4] + T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_4 * 42) + k_4)]);\n    }\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_5 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_5 < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused_5) {\n    for (int k_5 = 0; k_5 < 42; ++k_5) {\n      T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_5 * 42) + k_5)] = (T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_5 * 42) + k_5)] / T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_5]);\n    }\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_6 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_6 < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused_6) {\n    for (int k_6 = 0; k_6 < 42; ++k_6) {\n      T_broadcast_to[((ax0_ax1_fused_ax2_fused_ax3_fused_6 * 42) + k_6)] = T_reshape[((((((ax0_ax1_fused_ax2_fused_ax3_fused_6 / 231) * 924) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_6 % 462) / 21) * 42)) + (((ax0_ax1_fused_ax2_fused_ax3_fused_6 % 42) / 7) * 7)) + ((ax0_ax1_fused_ax2_fused_ax3_fused_6 % 7) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_6))];\n    }\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_7 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_7 < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused_7) {\n    for (int k_7 = 0; k_7 < 42; ++k_7) {\n      T_reverse_sequence[((ax0_ax1_fused_ax2_fused_ax3_fused_7 * 42) + k_7)] = T_broadcast_to[(((((((ax0_ax1_fused_ax2_fused_ax3_fused_7 / 231) * 924) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_7 % 462) / 21) * 42)) + (((ax0_ax1_fused_ax2_fused_ax3_fused_7 % 42) / 7) * 7)) + ((ax0_ax1_fused_ax2_fused_ax3_fused_7 % 7) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_7)) + 64680) - (((((ax0_ax1_fused_ax2_fused_ax3_fused_7 / 231) * 924) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_7 % 462) / 21) * 42)) + (((ax0_ax1_fused_ax2_fused_ax3_fused_7 % 42) / 7) * 7)) + ((ax0_ax1_fused_ax2_fused_ax3_fused_7 % 7) * 7)) / 924) * 6468))];\n    }\n  }\n  for (int ax0_ax1_fused_ax2_fused_ax3_fused_8 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_8 < 2541; ++ax0_ax1_fused_ax2_fused_ax3_fused_8) {\n    for (int k_8 = 0; k_8 < 42; ++k_8) {\n      T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_8 * 42) + k_8)] = (T_reshape[((ax0_ax1_fused_ax2_fused_ax3_fused_8 * 42) + k_8)] / T_softmax_maxelem[ax0_ax1_fused_ax2_fused_ax3_fused_8]);\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_broadcast_to, float* T_reshape, float* T_softmax_maxelem, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 2541; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n        T_reshape[(((ax0_ax1_fused * 42) + (ax2 * 7)) + ax3)] = ph[((((((ax0_ax1_fused / 231) * 924) + ((ax0_ax1_fused % 231) * 42)) + (ax2 * 7)) + ax3)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 2541; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 6; ++ax2_1) {\n      for (int32_t ax3_1 = 0; ax3_1 < 7; ++ax3_1) {\n        T_softmax_maxelem[ax0_ax1_fused_1] = -3.402823e+38f;\n        for (int32_t k = 0; k < 42; ++k) {\n          T_softmax_maxelem[ax0_ax1_fused_1] = max(T_softmax_maxelem[ax0_ax1_fused_1], T_reshape[(((ax0_ax1_fused_1 * 42) + ax2_1) + ax3_1)]);\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 2541; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 6; ++ax2_2) {\n      for (int32_t ax3_2 = 0; ax3_2 < 7; ++ax3_2) {\n        T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)] = (T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)] - T_softmax_maxelem[ax0_ax1_fused_2]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_3 = 0; ax0_ax1_fused_3 < 2541; ++ax0_ax1_fused_3) {\n    for (int32_t ax2_3 = 0; ax2_3 < 6; ++ax2_3) {\n      for (int32_t ax3_3 = 0; ax3_3 < 7; ++ax3_3) {\n        int32_t v_ = ((int32_t)(floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reshape[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_4 = 0; ax0_ax1_fused_4 < 2541; ++ax0_ax1_fused_4) {\n    for (int32_t ax2_4 = 0; ax2_4 < 6; ++ax2_4) {\n      for (int32_t ax3_4 = 0; ax3_4 < 7; ++ax3_4) {\n        T_reshape[(((ax0_ax1_fused_4 * 42) + (ax2_4 * 7)) + ax3_4)] = (T_reshape[(((ax0_ax1_fused_4 * 42) + (ax2_4 * 7)) + ax3_4)] / T_softmax_maxelem[ax0_ax1_fused_4]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_5 = 0; ax0_ax1_fused_5 < 17787; ++ax0_ax1_fused_5) {\n    for (int32_t ax2_5 = 0; ax2_5 < 6; ++ax2_5) {\n      for (int32_t ax3_5 = 0; ax3_5 < 7; ++ax3_5) {\n        T_broadcast_to[(((ax0_ax1_fused_5 * 42) + (ax2_5 * 7)) + ax3_5)] = T_reshape[(((((((ax0_ax1_fused_5 % 1617) / 21) * 924) + (((ax0_ax1_fused_5 % 462) / 21) * 42)) + ((ax0_ax1_fused_5 % 7) * 7)) + ax2_5) + ax3_5)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_6 = 0; ax0_ax1_fused_6 < 17787; ++ax0_ax1_fused_6) {\n    for (int32_t ax2_6 = 0; ax2_6 < 6; ++ax2_6) {\n      for (int32_t ax3_6 = 0; ax3_6 < 7; ++ax3_6) {\n        T_reshape[(((ax0_ax1_fused_6 * 42) + (ax2_6 * 7)) + ax3_6)] = T_broadcast_to[(((((ax0_ax1_fused_6 % 6468) + 64680) - ((ax0_ax1_fused_6 / 1617) * 6468)) * 7) + ((ax2_6 * 7) + ax3_6))];\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_broadcast_to, float* T_reshape, float* T_reverse_sequence, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1568; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n      T_reshape[((ax0_ax1_fused_ax2_fused * 7) + ax3)] = ph[((((ax0_ax1_fused_ax2_fused / 462) * 924) + ((ax0_ax1_fused_ax2_fused % 462) / 21) * 42)) + ax3]];\n    }\n  }\n  float T_softmax_maxelem[1];\n  float T_reshape_1[1568];\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1568; ++ax0_ax1_fused_ax2_fused_1) {\n    T_softmax_maxelem[0] = -3.402823e+38f;\n    for (int32_t k = 0; k < 42; ++k) {\n      T_softmax_maxelem[0] = max(T_softmax_maxelem[0], T_reshape[((ax0_ax1_fused_ax2_fused_1 * 7) + k)]);\n    }\n    for (int32_t k_1 = 0; k_1 < 42; ++k_1) {\n      T_reshape_1[((ax0_ax1_fused_ax2_fused_1 * 7) + k_1)] = (T_reshape[((ax0_ax1_fused_ax2_fused_1 * 7) + k_1)] - T_softmax_maxelem[0]);\n    }\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 1568; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t k_2 = 0; k_2 < 42; ++k_2) {\n      T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)] = (T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)] * ((((((((((((((1.987569e-04f * (max(min(T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.398200e-03f) * (max(min(T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 8.333452e-03f) * (max(min(T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 4.166580e-02f) * (max(min(T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.666667e-01f) * (max(min(T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + (max(min(T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 1.000000e+00f)), T_reshape[((ax0_ax1_fused_ax2_fused_2 * 7) + k_2)]));\n    }\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 1568; ++ax0_ax1_fused_ax2_fused_3) {\n    for (int32_t k_3 = 0; k_3 < 42; ++k_3) {\n      T_reshape[((ax0_ax1_fused_ax2_fused_3 * 7) + k_3)] = (T_reshape[((ax0_ax1_fused_ax2_fused_3 * 7) + k_3)] / T_softmax_maxelem[0]);\n    }\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 1568; ++ax0_ax1_fused_ax2_fused_4) {\n    for (int32_t k_4 = 0; k_4 < 42; ++k_4) {\n      T_broadcast_to[((ax0_ax1_fused_ax2_fused_4 * 7) + k_4)] = T_reshape[((ax0_ax1_fused_ax2_fused_4 * 7) + k_4)];\n    }\n  }\n  for (int32_t ax0_ax1_fused_ax2_fused_5 = 0; ax0_ax1_fused_ax2_fused_5 < 1568; ++ax0_ax1_fused_ax2_fused_5) {\n    for (int32_t k_5 = 0; k_5 < 42; ++k_5) {\n      T_reverse_sequence[((ax0_ax1_fused_ax2_fused_5 * 7) + k_5)] = T_broadcast_to[(((((ax0_ax1_fused_ax2_fused_5 / 462) * 924) + ((ax0_ax1_fused_ax2_fused_5 % 462) / 21) * 42)) + k_5)];\n    }\n  }\n}"
    },
    {
        "op_name": "graph_18",
        "c_code": "void default_function_kernel(float* T_cast, float* ph, float* ph_1) {\n  float T_softmax_maxelem[2000];\n  float T_softmax_expsum[2000];\n  float T_multiply_red[180];\n  for (int32_t i0 = 0; i0 < 20; ++i0) {\n    for (int32_t i1 = 0; i1 < 10; ++i1) {\n      for (int32_t i2 = 0; i2 < 10; ++i2) {\n        T_softmax_maxelem[(((i0 * 100) + (i1 * 10)) + i2)] = -3.402823e+38f;\n        for (int32_t k = 0; k < 9; ++k) {\n          T_softmax_maxelem[(((i0 * 100) + (i1 * 10)) + i2)] = max(T_softmax_maxelem[(((i0 * 100) + (i1 * 10)) + i2)], ((10 <= i0) ? ph[(((((i0 * 31944) + (i1 * 1452)) + (i2 * 44)) + k) - 269026)] : ph[(((((i0 * 31944) + (i1 * 1452)) + (i2 * 44)) + k) + 16973)]));\n        }\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 20; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 10; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 10; ++i2_1) {\n        T_softmax_expsum[(((i0_1 * 100) + (i1_1 * 10)) + i2_1)] = 0.000000e+00f;\n        for (int32_t k_1 = 0; k_1 < 9; ++k_1) {\n          T_softmax_expsum[(((i0_1 * 100) + (i1_1 * 10)) + i2_1)] = (T_softmax_expsum[(((i0_1 * 100) + (i1_1 * 10)) + i2_1)] + expf((((10 <= i0_1) ? ph[(((((i0_1 * 31944) + (i1_1 * 1452)) + (i2_1 * 44)) + k_1) - 269026)] : ph[(((((i0_1 * 31944) + (i1_1 * 1452)) + (i2_1 * 44)) + k_1) + 16973)]) - T_softmax_maxelem[(((i0_1 * 100) + (i1_1 * 10)) + i2_1)])));\n        }\n      }\n    }\n  }\n  for (int32_t ax0 = 0; ax0 < 20; ++ax0) {\n    for (int32_t ax1 = 0; ax1 < 9; ++ax1) {\n      T_multiply_red[((ax0 * 9) + ax1)] = 0.000000e+00f;\n      for (int32_t k1 = 0; k1 < 10; ++k1) {\n        for (int32_t k2 = 0; k2 < 10; ++k2) {\n          int cse_var_9 = (10 <= ax0);\n          T_multiply_red[((ax0 * 9) + ax1)] = (T_multiply_red[((ax0 * 9) + ax1)] + ((expf(((cse_var_9 ? ph[(((((ax0 * 31944) + (k2 * 1452)) + (k1 * 44)) + ax1) - 269026)] : ph[(((((ax0 * 31944) + (k2 * 1452)) + (k1 * 44)) + ax1) + 16973)]) - T_softmax_maxelem[(((ax0 * 100) + (k2 * 10)) + k1)])) / T_softmax_expsum[(((ax0 * 100) + (k2 * 10)) + k1)]) * (expf(((cse_var_9 ? ph[(((((ax0 * 31944) + (k2 * 1452)) + (k1 * 44)) + ax1) - 269026)] : ph[(((((ax0 * 31944) + (k2 * 1452)) + (k1 * 44)) + ax1) + 16973)]) - T_softmax_maxelem[(((ax0 * 100) + (k2 * 10)) + k1)])) / T_softmax_expsum[(((ax0 * 100) + (k2 * 10)) + k1)])));\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 200; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      for (int32_t ax3_inner = 0; ax3_inner < 9; ++ax3_inner) {\n        T_cast[(((ax0_ax1_fused * 90) + (ax2 * 9)) + ax3_inner)] = (((expf((((100 <= ax0_ax1_fused) ? ph[((((((ax0_ax1_fused / 10) * 31944) + (ax2 * 1452)) + ((ax0_ax1_fused % 10) * 44)) + ax3_inner) - 269026)] : ph[((((((ax0_ax1_fused / 10) * 31944) + (ax2 * 1452)) + ((ax0_ax1_fused % 10) * 44)) + ax3_inner) + 16973)]) - T_softmax_maxelem[((((ax0_ax1_fused / 10) * 100) + (ax2 * 10)) + (ax0_ax1_fused % 10))])) / T_softmax_expsum[((((ax0_ax1_fused / 10) * 100) + (ax2 * 10)) + (ax0_ax1_fused % 10))]) * ph_1[(((ax0_ax1_fused % 10) * 10) + ax2)]) * (1.000000e+00f / sqrtf(((T_multiply_red[(((ax0_ax1_fused / 10) * 9) + ax3_inner)] * 1.000000e-02f) + 1.000000e-05f))));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(100) default_function_kernel_8(float* __restrict__ T_cast, float* __restrict__ ph) {\n  T_cast[((int)threadIdx.x)] = ph[((int)threadIdx.x)];\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_9(float* __restrict__ T_concat, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(180) default_function_kernel_10(float* __restrict__ T_concat, float* __restrict__ T_multiply_red) {\n  T_multiply_red[((int)threadIdx.x)] = 0.000000e+00f;\n  for (int k1 = 0; k1 < 10; ++k1) {\n    for (int k2 = 0; k2 < 10; ++k2) {\n      T_multiply_red[((int)threadIdx.x)] = (T_multiply_red[((int)threadIdx.x)] + T_concat[(((((((int)threadIdx.x) / 9) * 900) + (k1 * 90)) + (k2 * 9)) + (((int)threadIdx.x) % 9))]);\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_12(float* __restrict__ T_cast, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_cast[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_concat, float* __restrict__ T_strided_slice, float* __restrict__ T_strided_slice_1) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((1125 <= ((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3))) ? T_strided_slice[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) - 9000)] : T_strided_slice_1[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_6(float* __restrict__ T_concat, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] / T_strided_slice[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) / 9)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) < 1125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 31944) + (((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 450) / 45) * 1452)) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90) / 9) * 44)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9)) + 16973)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_7(float* __restrict__ T_concat, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_concat[(((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 900) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90) / 9) * 90)) + (((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 450) / 45) * 9)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_concat, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n  for (int k = 0; k < 9; ++k) {\n    if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 125) {\n      T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + T_concat[(((((int)blockIdx.x) * 9216) + (((int)threadIdx.x) * 9)) + k)]);\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) < 1125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 31944) + (((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 450) / 45) * 1452)) + (((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90) / 9) * 44)) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9)) + 50414)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_11(float* __restrict__ T_cast, float* __restrict__ T_multiply_red, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] * T_cast[((((((((int)blockIdx.x) * 62) + (((int)threadIdx.x) >> 1)) % 450) / 45) * 10) + ((((((int)blockIdx.x) * 34) + ((int)threadIdx.x)) % 90) / 9))]) * (1.000000e+00f / sqrtf(((T_multiply_red[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 225) * 9) + (((((int)blockIdx.x) * 7) + ((int)threadIdx.x)) % 9))] * 1.000000e-02f) + 1.000000e-05f))));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_concat, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 125) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = -3.402823e+38f;\n  }\n  for (int k = 0; k < 9; ++k) {\n    if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 125) {\n      T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], T_concat[(((((int)blockIdx.x) * 9216) + (((int)threadIdx.x) * 9)) + k)]);\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_concat, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 1125) {\n    T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __expf((T_concat[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_strided_slice[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) / 9)]));\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), ph_1: T.Buffer((10, 10), \"float32\"), T_cast: T.Buffer((20, 10, 10, 9), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([2000], \"float32\", \"global\")\n        T_softmax_expsum = T.allocate([2000], \"float32\", \"global\")\n        T_multiply_red = T.allocate([180], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((2000,), data=T_softmax_maxelem)\n        ph_2 = T.Buffer((351384,), data=ph.data)\n        for i0, i1, i2 in T.grid(20, 10, 10):\n            T_softmax_maxelem_1[i0 * 100 + i1 * 10 + i2] = T.float32(-3.4028234663852886e+38)\n            for k in range(9):\n                cse_var_2: T.int32 = i0 * 100 + i1 * 10 + i2\n                cse_var_1: T.int32 = i0 * 31944 + i1 * 1452 + i2 * 44 + k\n                T_softmax_maxelem_1[cse_var_2] = T.max(T_softmax_maxelem_1[cse_var_2], T.if_then_else(10 <= i0, ph_2[cse_var_1 - 269026], ph_2[cse_var_1 + 16973]))\n        T_softmax_expsum_1 = T.Buffer((2000,), data=T_softmax_expsum)\n        for i0, i1, i2 in T.grid(20, 10, 10):\n            T_softmax_expsum_1[i0 * 100 + i1 * 10 + i2] = T.float32(0)\n            for k in range(9):\n                cse_var_4: T.int32 = i0 * 100 + i1 * 10 + i2\n                cse_var_3: T.int32 = i0 * 31944 + i1 * 1452 + i2 * 44 + k\n                T_softmax_expsum_1[cse_var_4] = T_softmax_expsum_1[cse_var_4] + T.exp(T.if_then_else(10 <= i0, ph_2[cse_var_3 - 269026], ph_2[cse_var_3 + 16973]) - T_softmax_maxelem_1[cse_var_4])\n        T_multiply_red_1 = T.Buffer((180,), data=T_multiply_red)\n        for ax0, ax1 in T.grid(20, 9):\n            T_multiply_red_1[ax0 * 9 + ax1] = T.float32(0)\n            for k1, k2 in T.grid(10, 10):\n                cse_var_10: T.int32 = ax0 * 31944 + k2 * 1452 + k1 * 44 + ax1\n                cse_var_9: T.bool = 10 <= ax0\n                cse_var_8: T.int32 = ax0 * 9 + ax1\n                cse_var_7: T.int32 = ax0 * 100 + k2 * 10 + k1\n                cse_var_6: T.int32 = cse_var_10 - 269026\n                cse_var_5: T.int32 = cse_var_10 + 16973\n                T_multiply_red_1[cse_var_8] = T_multiply_red_1[cse_var_8] + T.exp(T.if_then_else(cse_var_9, ph_2[cse_var_6], ph_2[cse_var_5]) - T_softmax_maxelem_1[cse_var_7]) / T_softmax_expsum_1[cse_var_7] * (T.exp(T.if_then_else(cse_var_9, ph_2[cse_var_6], ph_2[cse_var_5]) - T_softmax_maxelem_1[cse_var_7]) / T_softmax_expsum_1[cse_var_7])\n        for ax0_ax1_fused in T.parallel(200):\n            for ax2, ax3_inner in T.grid(10, 9):\n                cse_var_14: T.int32 = ax0_ax1_fused // 10\n                cse_var_13: T.int32 = ax0_ax1_fused % 10\n                cse_var_12: T.int32 = cse_var_14 * 100 + ax2 * 10 + cse_var_13\n                cse_var_11: T.int32 = cse_var_14 * 31944 + ax2 * 1452 + cse_var_13 * 44 + ax3_inner\n                T_cast_1 = T.Buffer((18000,), data=T_cast.data)\n                ph_3 = T.Buffer((100,), data=ph_1.data)\n                T_cast_1[ax0_ax1_fused * 90 + ax2 * 9 + ax3_inner] = T.exp(T.if_then_else(100 <= ax0_ax1_fused, ph_2[cse_var_11 - 269026], ph_2[cse_var_11 + 16973]) - T_softmax_maxelem_1[cse_var_12]) / T_softmax_expsum_1[cse_var_12] * ph_3[cse_var_13 * 10 + ax2] * T.rsqrt(T_multiply_red_1[cse_var_14 * 9 + ax3_inner] * T.float32(0.01) + T.float32(1.0000000000000001e-05))",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44], [10, 10]]",
        "output_shape": "[[20, 10, 10, 9]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "T_cast"
        ],
        "deepseek_c": "#pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 11; ++i0) {\n    for (int32_t i1 = 0; i1 < 22; ++i1) {\n      for (int32_t i2 = 0; i2 < 33; ++i2) {\n        for (int32_t i3 = 0; i3 < 44; ++i3) {\n          T_strided_slice[((((i0 * 1452) + (i1 * 66)) + (i2 * 2)) + i3)] = ph[((((((((i0 * 31944) + (i1 * 1452)) + (i2 * 44)) + i3) / 225) * 31944) + (((((i0 * 62) + (i1 * 2)) + (i2 * 2)) % 450) / 45) * 1452) + (((((i0 * 2) + i1) + (i2 * 2)) % 45) * 44) + (((((i0 * 31944) + (i1 * 1452)) + (i2 * 44)) + i3) % 44))];\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 11; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 22; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 33; ++i2_1) {\n        for (int32_t i3_1 = 0; i3_1 < 44; ++i3_1) {\n          T_concat[((((i0_1 * 1452) + (i1_1 * 66)) + (i2_1 * 2)) + i3_1)] = ((1125 <= ((((i0_1 * 256) + ((i1_1 * 8) + (i2_1 * 2))) / 225) * 900)) ? T_strided_slice[((((i0_1 * 1452) + (i1_1 * 66)) + (i2_1 * 2)) + i3_1) - 9000]) : T_strided_slice_1[((((i0_1 * 1452) + (i1_1 * 66)) + (i2_1 * 2)) + i3_1)]);\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 1125; ++i0_i1_fused_i2_fused_i3_fused) {\n    T_cast[i0_i1_fused_i2_fused_i3_fused] = ph[i0_i1_fused_i2_fused_i3_fused];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_1 = 0; i0_i1_fused_i2_fused_i3_fused_1 < 1125; ++i0_i1_fused_i2_fused_i3_fused_1) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_1] = T_concat[i0_i1_fused_i2_fused_i3_fused_1];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_2 = 0; i0_i1_fused_i2_fused_i3_fused_2 < 1125; ++i0_i1_fused_i2_fused_i3_fused_2) {\n    T_concat[i0_i1_fused_i2_fused_i3_fused_2] = (T_concat[i0_i1_fused_i2_fused_i3_fused_2] / T_strided_slice[((i0_i1_fused_i2_fused_i3_fused_2 / 9) * 9)]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_3 = 0; i0_i1_fused_i2_fused_i3_fused_3 < 1125; ++i0_i1_fused_i2_fused_i3_fused_3) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_3] = 0.000000e+00f;\n    for (int32_t k1 = 0; k1 < 10; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        T_strided_slice[i0_i1_fused_i2_fused_i3_fused_3] = (T_strided_slice[i0_i1_fused_i2_fused_i3_fused_3] + T_concat[((((i0_i1_fused_i2_fused_i3_fused_3 / 9) * 900) + (k1 * 90)) + (k2 * 9)) + (i0_i1_fused_i2_fused_i3_fused_3 % 9))]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_4 = 0; i0_i1_fused_i2_fused_i3_fused_4 < 1125; ++i0_i1_fused_i2_fused_i3_fused_4) {\n    T_cast[i0_i1_fused_i2_fused_i3_fused_4] = T_strided_slice[i0_i1_fused_i2_fused_i3_fused_4];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_5 = 0; i0_i1_fused_i2_fused_i3_fused_5 < 1125; ++i0_i1_fused_i2_fused_i3_fused_5) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_5] = (T_strided_slice[i0_i1_fused_i2_fused_i3_fused_5] * T_cast[((((i0_i1_fused_i2_fused_i3_fused_5 / 9) * 10) + (i0_i1_fused_i2_fused_i3_fused_5 % 9))] * (1.000000e+00f / sqrtf(((T_strided_slice[((((i0_i1_fused_i2_fused_i3_fused_5 / 9) * 9) + (i0_i1_fused_i2_fused_i3_fused_5 % 9))] * 1.000000e-02f) + 1.000000e-05f)))));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_6 = 0; i0_i1_fused_i2_fused_i3_fused_6 < 1125; ++i0_i1_fused_i2_fused_i3_fused_6) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_6] = __expf((T_strided_slice[i0_i1_fused_i2_fused_i3_fused_6] - T_strided_slice[((i0_i1_fused_i2_fused_i3_fused_6 / 9) * 9)]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_7 = 0; i0_i1_fused_i2_fused_i3_fused_7 < 1125; ++i0_i1_fused_i2_fused_i3_fused_7) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_7] = -3.402823e+38f;\n    for (int32_t k = 0; k < 9; ++k) {\n      T_strided_slice[i0_i1_fused_i2_fused_i3_fused_7] = max(T_strided_slice[i0_i1_fused_i2_fused_i3_fused_7], T_concat[((((i0_i1_fused_i2_fused_i3_fused_7 / 9) * 9) + k))]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_8 = 0; i0_i1_fused_i2_fused_i3_fused_8 < 1125; ++i0_i1_fused_i2_fused_i3_fused_8) {\n    T_concat[i0_i1_fused_i2_fused_i3_fused_8] = ((T_concat[i0_i1_fused_i2_fused_i3_fused_8] * T_cast[((((i0_i1_fused_i2_fused_i3_fused_8 / 9) * 10) + (i0_i1_fused_i2_fused_i3_fused_8 % 9))] * (1.000000e+00f / sqrtf(((T_strided_slice[((((i0_i1_fused_i2_fused_i3_fused_8 / 9) * 9) + (i0_i1_fused_i2_fused_i3_fused_8 % 9))] * 1.000000e-02f) + 1.000000e-05f)))));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_9 = 0; i0_i1_fused_i2_fused_i3_fused_9 < 1125; ++i0_i1_fused_i2_fused_i3_fused_9) {\n    T_cast[i0_i1_fused_i2_fused_i3_fused_9] = T_strided_slice[i0_i1_fused_i2_fused_i3_fused_9];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_10 = 0; i0_i1_fused_i2_fused_i3_fused_10 < 1125; ++i0_i1_fused_i2_fused_i3_fused_10) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_10] = 0.000000e+00f;\n    for (int32_t k1 = 0; k1 < 10; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        T_strided_slice[i0_i1_fused_i2_fused_i3_fused_10] = (T_strided_slice[i0_i1_fused_i2_fused_i3_fused_10] + T_concat[((((i0_i1_fused_i2_fused_i3_fused_10 / 9) * 900) + (k1 * 90)) + (k2 * 9)) + (i0_i1_fused_i2_fused_i3_fused_10 % 9))]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_11 = 0; i0_i1_fused_i2_fused_i3_fused_11 < 1125; ++i0_i1_fused_i2_fused_i3_fused_11) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_11] = ((T_strided_slice[i0_i1_fused_i2_fused_i3_fused_11] * T_cast[((((i0_i1_fused_i2_fused_i3_fused_11 / 9) * 10) + (i0_i1_fused_i2_fused_i3_fused_11 % 9))] * (1.000000e+00f / sqrtf(((T_strided_slice[((((i0_i1_fused_i2_fused_i3_fused_11 / 9) * 9) + (i0_i1_fused_i2_fused_i3_fused_11 % 9))] * 1.000000e-02f) + 1.000000e-05f)))));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_12 = 0; i0_i1_fused_i2_fused_i3_fused_12 < 1125; ++i0_i1_fused_i2_fused_i3_fused_12) {\n    T_cast[i0_i1_fused_i2_fused_i3_fused_12] = T_strided_slice[i0_i1_fused_i2_fused_i3_fused_12];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_13 = 0; i0_i1_fused_i2_fused_i3_fused_13 < 1125; ++i0_i1_fused_i2_fused_i3_fused_13) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_13] = 0.000000e+00f;\n    for (int32_t k1 = 0; k1 < 10; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        T_strided_slice[i0_i1_fused_i2_fused_i3_fused_13] = (T_strided_slice[i0_i1_fused",
        "starcoder_c": "#pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 1125; ++ax0_ax1_fused) {\n    float T_strided_slice_buffer[1];\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n        T_strided_slice_buffer[0] = ph[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3) + 16973];\n        T_strided_slice[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3)] = T_strided_slice_buffer[0];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 363; ++ax0_ax1_fused_ax2_fused) {\n    float T_concat_buffer[2];\n    for (int32_t ax3_1 = 0; ax3_1 < 9; ++ax3_1) {\n      T_concat_buffer[0] = ph[(((ax0_ax1_fused_ax2_fused / 33) * 31944) + ((ax0_ax1_fused_ax2_fused % 33) * 1452)) + ax3_1];\n      T_concat_buffer[1] = ph[(((ax0_ax1_fused_ax2_fused / 33) * 31944) + ((ax0_ax1_fused_ax2_fused % 33) * 1452)) + (ax3_1 + 1452)];\n      T_concat[((ax0_ax1_fused_ax2_fused * 18) + ax3_1)] = ((1125 <= ax0_ax1_fused_ax2_fused)? T_strided_slice_buffer[0] : T_concat_buffer[0]);\n      T_concat[(((ax0_ax1_fused_ax2_fused * 18) + ax3_1) + 9)] = T_concat_buffer[1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 125; ++ax0_ax1_fused_1) {\n    float T_strided_slice_buffer_1[1];\n    for (int32_t ax2_1 = 0; ax2_1 < 9; ++ax2_1) {\n      T_strided_slice_buffer_1[0] = 0.000000e+00f;\n      for (int32_t k = 0; k < 9; ++k) {\n        T_strided_slice_buffer_1[0] = (T_strided_slice_buffer_1[0] + T_concat[(((ax0_ax1_fused_1 * 9) + (ax2_1 * 9)) + k)]);\n      }\n      T_strided_slice_1[((ax0_ax1_fused_1 * 9) + ax2_1)] = T_strided_slice_buffer_1[0];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 363; ++ax0_ax1_fused_ax2_fused_1) {\n    float T_concat_buffer_1[2];\n    for (int32_t ax3_2 = 0; ax3_2 < 9; ++ax3_2) {\n      T_concat_buffer_1[0] = T_concat[(((ax0_ax1_fused_ax2_fused_1 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_1 % 33) * 9)) + ax3_2];\n      T_concat_buffer_1[1] = T_concat[((((ax0_ax1_fused_ax2_fused_1 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_1 % 33) * 9)) + ax3_2) + 900];\n      T_concat[((ax0_ax1_fused_ax2_fused_1 * 18) + ax3_2)] = (T_concat[((ax0_ax1_fused_ax2_fused_1 * 18) + ax3_2)] / T_strided_slice_1[((ax0_ax1_fused_ax2_fused_1 / 33) * 9) + (ax0_ax1_fused_ax2_fused_1 % 33)]);\n      T_concat[(((ax0_ax1_fused_ax2_fused_1 * 18) + ax3_2) + 9)] = T_concat_buffer_1[1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 363; ++ax0_ax1_fused_ax2_fused_2) {\n    float T_concat_buffer_2[2];\n    for (int32_t ax3_3 = 0; ax3_3 < 9; ++ax3_3) {\n      T_concat_buffer_2[0] = -3.402823e+38f;\n      for (int32_t k_1 = 0; k_1 < 9; ++k_1) {\n        T_concat_buffer_2[0] = max(T_concat_buffer_2[0], T_concat[(((ax0_ax1_fused_ax2_fused_2 * 9) + (ax3_3 * 9)) + k_1)]);\n      }\n      T_strided_slice_buffer_1[0] = T_concat_buffer_2[0];\n      T_concat[((ax0_ax1_fused_ax2_fused_2 * 18) + ax3_3)] = __expf((T_concat[((ax0_ax1_fused_ax2_fused_2 * 18) + ax3_3)] - T_strided_slice_buffer_1[0]));\n      T_concat_buffer_2[1] = -3.402823e+38f;\n      for (int32_t k_2 = 0; k_2 < 9; ++k_2) {\n        T_concat_buffer_2[1] = max(T_concat_buffer_2[1], T_concat[((((ax0_ax1_fused_ax2_fused_2 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_2 % 33) * 9)) + (ax3_3 * 9)) + k_2]);\n      }\n      T_concat[(((ax0_ax1_fused_ax2_fused_2 * 18) + ax3_3) + 9)] = T_concat_buffer_2[1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 363; ++ax0_ax1_fused_ax2_fused_3) {\n    float T_concat_buffer_3[2];\n    for (int32_t ax3_4 = 0; ax3_4 < 9; ++ax3_4) {\n      T_concat_buffer_3[0] = T_concat[(((ax0_ax1_fused_ax2_fused_3 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_3 % 33) * 9)) + ax3_4];\n      T_concat_buffer_3[1] = T_concat[((((ax0_ax1_fused_ax2_fused_3 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_3 % 33) * 9)) + ax3_4) + 900];\n      T_concat[((ax0_ax1_fused_ax2_fused_3 * 18) + ax3_4)] = (T_concat[((ax0_ax1_fused_ax2_fused_3 * 18) + ax3_4)] * T_concat_buffer_3[0]);\n      T_concat[(((ax0_ax1_fused_ax2_fused_3 * 18) + ax3_4) + 9)] = T_concat_buffer_3[1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 363; ++ax0_ax1_fused_ax2_fused_4) {\n    float T_concat_buffer_4[2];\n    for (int32_t ax3_5 = 0; ax3_5 < 9; ++ax3_5) {\n      T_concat_buffer_4[0] = T_concat[(((ax0_ax1_fused_ax2_fused_4 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_4 % 33) * 9)) + ax3_5];\n      T_concat_buffer_4[1] = T_concat[((((ax0_ax1_fused_ax2_fused_4 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_4 % 33) * 9)) + ax3_5) + 900];\n      T_concat[((ax0_ax1_fused_ax2_fused_4 * 18) + ax3_5)] = (T_concat[((ax0_ax1_fused_ax2_fused_4 * 18) + ax3_5)] * (1.000000e+00f / sqrtf(((T_concat_buffer_4[0] * 1.000000e-02f) + 1.000000e-05f))));\n      T_concat[(((ax0_ax1_fused_ax2_fused_4 * 18) + ax3_5) + 9)] = T_concat_buffer_4[1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_5 = 0; ax0_ax1_fused_ax2_fused_5 < 363; ++ax0_ax1_fused_ax2_fused_5) {\n    float T_concat_buffer_5[2];\n    for (int32_t ax3_6 = 0; ax3_6 < 9; ++ax3_6) {\n      T_concat_buffer_5[0] = T_concat[(((ax0_ax1_fused_ax2_fused_5 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_5 % 33) * 9)) + ax3_6];\n      T_concat_buffer_5[1] = T_concat[((((ax0_ax1_fused_ax2_fused_5 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_5 % 33) * 9)) + ax3_6) + 900];\n      T_concat[((ax0_ax1_fused_ax2_fused_5 * 18) + ax3_6)] = (T_concat[((ax0_ax1_fused_ax2_fused_5 * 18) + ax3_6)] * T_concat_buffer_5[0]);\n      T_concat[(((ax0_ax1_fused_ax2_fused_5 * 18) + ax3_6) + 9)] = T_concat_buffer_5[1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 1125; ++ax0_ax1_fused_1) {\n    float T_cast_buffer[1];\n    for (int32_t ax2_2 = 0; ax2_2 < 33; ++ax2_2) {\n      for (int32_t ax3_7 = 0; ax3_7 < 9; ++ax3_7) {\n        T_cast_buffer[0] = T_concat[(((ax0_ax1_fused_1 * 33) + (ax2_2 * 9)) + ax3_7)];\n        T_cast[(((ax0_ax1_fused_1 * 33) + (ax2_2 * 9)) + ax3_7)] = T_cast_buffer[0];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_6 = 0; ax0_ax1_fused_ax2_fused_6 < 363; ++ax0_ax1_fused_ax2_fused_6) {\n    float T_concat_buffer_6[2];\n    for (int32_t ax3_8 = 0; ax3_8 < 9; ++ax3_8) {\n      T_concat_buffer_6[0] = T_concat[(((ax0_ax1_fused_ax2_fused_6 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_6 % 33) * 9)) + ax3_8];\n      T_concat_buffer_6[1] = T_concat[((((ax0_ax1_fused_ax2_fused_6 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_6 % 33) * 9)) + ax3_8) + 900];\n      T_concat[((ax0_ax1_fused_ax2_fused_6 * 18) + ax3_8)] = (T_concat[((ax0_ax1_fused_ax2_fused_6 * 18) + ax3_8)] * T_concat_buffer_6[0]);\n      T_concat[(((ax0_ax1_fused_ax2_fused_6 * 18) + ax3_8) + 9)] = T_concat_buffer_6[1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_7 = 0; ax0_ax1_fused_ax2_fused_7 < 363; ++ax0_ax1_fused_ax2_fused_7) {\n    float T_concat_buffer_7[2];\n    for (int32_t ax3_9 = 0; ax3_9 < 9; ++ax3_9) {\n      T_concat_buffer_7[0] = T_concat[(((ax0_ax1_fused_ax2_fused_7 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_7 % 33) * 9)) + ax3_9];\n      T_concat_buffer_7[1] = T_concat[((((ax0_ax1_fused_ax2_fused_7 / 33) * 900) + ((ax0_ax1_fused_ax2_fused_7 % 33) * 9)) + ax3_9) + 900];\n      T_concat[((ax",
        "codellama_c": "void default_function_kernel(float* T_cast, float* T_concat, float* T_multiply_red, float* T_strided_slice, float* T_strided_slice_1, float* T_strided_slice_2, float* T_strided_slice_3, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 22; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n        T_strided_slice[(((ax0_ax1_fused * 1384) + (ax2 * 44)) + ax3)] = ph[(((((ax0_ax1_fused * 1384) + (ax2 * 44)) + ax3) + 50414)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 696; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3_1 = 0; ax3_1 < 44; ++ax3_1) {\n      T_strided_slice_1[((ax0_ax1_fused_ax2_fused * 44) + ax3_1)] = ph[(((((ax0_ax1_fused_ax2_fused / 33) * 1384) + ((ax0_ax1_fused_ax2_fused % 33) * 44)) + ax3_1) + 16973)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 696; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t ax3_2 = 0; ax3_2 < 44; ++ax3_2) {\n      T_strided_slice_2[((ax0_ax1_fused_ax2_fused_1 * 44) + ax3_2)] = ph[(((((ax0_ax1_fused_ax2_fused_1 / 33) * 1384) + ((ax0_ax1_fused_ax2_fused_1 % 33) * 44)) + ax3_2) + 16973)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 696; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t ax3_3 = 0; ax3_3 < 44; ++ax3_3) {\n      T_strided_slice_3[((ax0_ax1_fused_ax2_fused_2 * 44) + ax3_3)] = ph[(((((ax0_ax1_fused_ax2_fused_2 / 33) * 1384) + ((ax0_ax1_fused_ax2_fused_2 % 33) * 44)) + ax3_3) + 16973)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 28640; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_concat[ax0_ax1_fused_ax2_fused_ax3_fused] = (T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] * T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 28640; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_1] = (T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_1] / T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 28640; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_2] = expf((T_concat[ax0_ax1_fused_ax2_fused_ax3_fused_2] - T_strided_slice_3[ax0_ax1_fused_ax2_fused_ax3_fused_2]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_3 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_3 < 28640; ++ax0_ax1_fused_ax2_fused_ax3_fused_3) {\n    T_multiply_red[ax0_ax1_fused_ax2_fused_ax3_fused_3] = 0.000000e+00f;\n    for (int32_t k1 = 0; k1 < 10; ++k1) {\n      for (int32_t k2 = 0; k2 < 10; ++k2) {\n        T_multiply_red[ax0_ax1_fused_ax2_fused_ax3_fused_3] = (T_multiply_red[ax0_ax1_fused_ax2_fused_ax3_fused_3] + T_concat[(((ax0_ax1_fused_ax2_fused_ax3_fused_3 / 9) * 900) + (k1 * 90)) + (ax0_ax1_fused_ax2_fused_ax3_fused_3 % 9)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_4 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_4 < 28640; ++ax0_ax1_fused_ax2_fused_ax3_fused_4) {\n    T_cast[ax0_ax1_fused_ax2_fused_ax3_fused_4] = T_strided_slice_3[ax0_ax1_fused_ax2_fused_ax3_fused_4];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_5 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_5 < 28640; ++ax0_ax1_fused_ax2_fused_ax3_fused_5) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_5] = T_concat[(((ax0_ax1_fused_ax2_fused_ax3_fused_5 / 9) * 900) + (((ax0_ax1_fused_ax2_fused_ax3_fused_5 % 9) / 3) * 90)) + (ax0_ax1_fused_ax2_fused_ax3_fused_5 % 3)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_6 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_6 < 28640; ++ax0_ax1_fused_ax2_fused_ax3_fused_6) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_6] = (T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_6] * T_cast[((ax0_ax1_fused_ax2_fused_ax3_fused_6 / 9) * 10) + (ax0_ax1_fused_ax2_fused_ax3_fused_6 % 9)]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_7 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_7 < 28640; ++ax0_ax1_fused_ax2_fused_ax3_fused_7) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_7] = (T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_7] * (1.000000e+00f / sqrtf(((T_multiply_red[((ax0_ax1_fused_ax2_fused_ax3_fused_7 / 9) * 9) + (ax0_ax1_fused_ax2_fused_ax3_fused_7 % 9)] * 1.000000e-02f) + 1.000000e-05f))));\n  }\n}"
    },
    {
        "op_name": "graph_19",
        "c_code": "void default_function_kernel(float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 24; ++i0_i1_fused) {\n    for (int32_t i2_inner = 0; i2_inner < 7; ++i2_inner) {\n        int32_t v_ = ((int32_t)(floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      compute[((i0_i1_fused * 7) + i2_inner)] = expf(max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), ph[(((((i0_i1_fused / 3) * 60) + ((i0_i1_fused % 3) * 12)) + i2_inner) + 61)]));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(765) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((int)threadIdx.x) < 168) {\n    T_strided_slice[((int)threadIdx.x)] = ph[(((((((int)threadIdx.x) / 21) * 60) + (((((int)threadIdx.x) % 21) / 7) * 12)) + (((int)threadIdx.x) % 7)) + 61)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(168) default_function_kernel_2(float* __restrict__ T_strided_slice, float* __restrict__ compute) {\n  compute[((int)threadIdx.x)] = __expf(T_strided_slice[((int)threadIdx.x)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(765) default_function_kernel_1(float* __restrict__ T_strided_slice) {\n  if (((int)threadIdx.x) < 168) {\n      int v_ = ((int)(floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_strided_slice[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[((int)threadIdx.x)]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((23, 5, 12), \"float32\"), compute: T.Buffer((8, 3, 7), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(24):\n            for i2_inner in range(7):\n                cse_var_1: T.int32 = i0_i1_fused // 3 * 60 + i0_i1_fused % 3 * 12 + i2_inner + 61\n                compute_1 = T.Buffer((168,), data=compute.data)\n                ph_1 = T.Buffer((1380,), data=ph.data)\n                compute_1[i0_i1_fused * 7 + i2_inner] = T.exp(T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_1[cse_var_1]))",
        "op_args": "None",
        "input_shape": "[[23, 5, 12]]",
        "output_shape": "[[8, 3, 7]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "compute"
        ],
        "deepseek_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* compute) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 23; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 12; ++i2) {\n        int32_t v_ = ((int32_t)(floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 23; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 5; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 12; ++i2_1) {\n        T_strided_slice_1[(((i0_1 * 60) + (i1_1 * 12)) + i2_1)] = expf(T_strided_slice[(((i0_1 * 60) + (i1_1 * 12)) + i2_1)]);\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_strided_slice, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 168; ++i0_i1_fused_i2_fused) {\n    T_strided_slice[i0_i1_fused_i2_fused] = ph[((((i0_i1_fused_i2_fused / 21) * 60) + (((i0_i1_fused_i2_fused % 21) / 7) * 12)) + (i0_i1_fused_i2_fused % 7)) + 61];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 115; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 7; ++i2) {\n      compute[((i0_i1_fused * 7) + i2)] = expf(T_strided_slice[((i0_i1_fused * 7) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 115; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n      T_strided_slice[((ax0_ax1_fused * 7) + ax2)] = fminf(((*(float *)(&(((((int)floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * 6.931472e-01f))) * (max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * 6.931472e-01f))) + (max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((((max(min(T_strided_slice[((ax0_ax1_fused * 7) + ax2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[((ax0_ax1_fused * 7) + ax2)]));\n    }\n  }\n}",
        "codellama_c": "#pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1260; ++ax0_ax1_fused_ax2_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused] = ph[((((ax0_ax1_fused_ax2_fused / 12) * 60) + ((ax0_ax1_fused_ax2_fused % 12) * 5)) + 61)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1260; ++ax0_ax1_fused_ax2_fused_1) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_1] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_1], 8.8376"
    },
    {
        "op_name": "graph_20",
        "c_code": "void default_function_kernel(float* T_softmax_norm, float* ph) {\n  float T_softmax_maxelem[8];\n  float T_softmax_expsum[8];\n  for (int32_t i0 = 0; i0 < 8; ++i0) {\n    T_softmax_maxelem[i0] = -3.402823e+38f;\n    for (int32_t k = 0; k < 21; ++k) {\n      T_softmax_maxelem[i0] = max(T_softmax_maxelem[i0], ph[((((i0 * 60) + (k % 7)) + 109) - ((k / 7) * 12))]);\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 8; ++i0_1) {\n    T_softmax_expsum[i0_1] = 0.000000e+00f;\n    for (int32_t k_1 = 0; k_1 < 21; ++k_1) {\n      T_softmax_expsum[i0_1] = (T_softmax_expsum[i0_1] + expf((ph[((((i0_1 * 60) + (k_1 % 7)) + 109) - ((k_1 / 7) * 12))] - T_softmax_maxelem[i0_1])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_2 = 0; i0_2 < 8; ++i0_2) {\n    for (int32_t i1_outer = 0; i1_outer < 2; ++i1_outer) {\n      for (int32_t i1_inner = 0; i1_inner < 16; ++i1_inner) {\n        if (((i1_outer * 16) + i1_inner) < 21) {\n          T_softmax_norm[(((i0_2 * 21) + (i1_outer * 16)) + i1_inner)] = (expf((ph[((((i0_2 * 60) + (((i1_outer * 2) + i1_inner) % 7)) + 109) - ((((i1_outer * 16) + i1_inner) / 7) * 12))] - T_softmax_maxelem[i0_2])) / T_softmax_expsum[i0_2]);\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_2(float* __restrict__ T_reverse_sequence, float* __restrict__ T_softmax_maxelem) {\n  T_softmax_maxelem[((int)threadIdx.x)] = -3.402823e+38f;\n  for (int k = 0; k < 21; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = max(T_softmax_maxelem[((int)threadIdx.x)], T_reverse_sequence[((((int)threadIdx.x) * 21) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(8) default_function_kernel_4(float* __restrict__ T_reverse_sequence, float* __restrict__ T_softmax_maxelem) {\n  T_softmax_maxelem[((int)threadIdx.x)] = 0.000000e+00f;\n  for (int k = 0; k < 21; ++k) {\n    T_softmax_maxelem[((int)threadIdx.x)] = (T_softmax_maxelem[((int)threadIdx.x)] + T_reverse_sequence[((((int)threadIdx.x) * 21) + k)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(765) default_function_kernel_1(float* __restrict__ T_reverse_sequence, float* __restrict__ T_strided_slice) {\n  if (((int)threadIdx.x) < 168) {\n    T_reverse_sequence[((int)threadIdx.x)] = T_strided_slice[(((((((int)threadIdx.x) / 21) * 21) + (((int)threadIdx.x) % 7)) + 14) - (((((int)threadIdx.x) % 21) / 7) * 7))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(168) default_function_kernel_3(float* __restrict__ T_reverse_sequence, float* __restrict__ T_softmax_maxelem) {\n  T_reverse_sequence[((int)threadIdx.x)] = __expf((T_reverse_sequence[((int)threadIdx.x)] - T_softmax_maxelem[(((int)threadIdx.x) / 21)]));\n}\n\nextern \"C\" __global__ void __launch_bounds__(765) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((int)threadIdx.x) < 168) {\n    T_strided_slice[((int)threadIdx.x)] = ph[(((((((int)threadIdx.x) / 21) * 60) + (((((int)threadIdx.x) % 21) / 7) * 12)) + (((int)threadIdx.x) % 7)) + 85)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(168) default_function_kernel_5(float* __restrict__ T_reverse_sequence, float* __restrict__ T_softmax_maxelem, float* __restrict__ T_softmax_norm) {\n  T_softmax_norm[((int)threadIdx.x)] = (T_reverse_sequence[((int)threadIdx.x)] / T_softmax_maxelem[(((int)threadIdx.x) / 21)]);\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((23, 5, 12), \"float32\"), T_softmax_norm: T.Buffer((8, 21), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([8], \"float32\", \"global\")\n        T_softmax_expsum = T.allocate([8], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((8,), data=T_softmax_maxelem, align=32)\n        ph_1 = T.Buffer((1380,), data=ph.data)\n        for i0 in range(8):\n            T_softmax_maxelem_1[i0] = T.float32(-3.4028234663852886e+38)\n            for k in range(21):\n                T_softmax_maxelem_1[i0] = T.max(T_softmax_maxelem_1[i0], ph_1[i0 * 60 + k % 7 + 109 - k // 7 * 12])\n        T_softmax_expsum_1 = T.Buffer((8,), data=T_softmax_expsum, align=32)\n        for i0 in range(8):\n            T_softmax_expsum_1[i0] = T.float32(0)\n            for k in range(21):\n                T_softmax_expsum_1[i0] = T_softmax_expsum_1[i0] + T.exp(ph_1[i0 * 60 + k % 7 + 109 - k // 7 * 12] - T_softmax_maxelem_1[i0])\n        for i0 in T.parallel(8):\n            for i1_outer, i1_inner in T.grid(2, 16):\n                if T.likely(i1_outer * 16 + i1_inner < 21):\n                    T_softmax_norm_1 = T.Buffer((168,), data=T_softmax_norm.data)\n                    cse_var_1: T.int32 = i1_outer * 16\n                    T_softmax_norm_1[i0 * 21 + cse_var_1 + i1_inner] = T.exp(ph_1[i0 * 60 + (i1_outer * 2 + i1_inner) % 7 + 109 - (cse_var_1 + i1_inner) // 7 * 12] - T_softmax_maxelem_1[i0]) / T_softmax_expsum_1[i0]",
        "op_args": "None",
        "input_shape": "[[23, 5, 12]]",
        "output_shape": "[[8, 21]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_softmax_norm"
        ],
        "deepseek_c": "void default_function_kernel(float* T_reverse_sequence, float* T_strided_slice, float* ph, float* T_softmax_maxelem, float* T_softmax_norm) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 23; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      for (int32_t i2 = 0; i2 < 12; ++i2) {\n        T_strided_slice[(((i0 * 60) + (i1 * 12)) + i2)] = ph[((((i0 * 60) + (i1 * 12)) + i2) + 85)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1380; ++ax0_ax1_fused_ax2_fused) {\n    T_reverse_sequence[ax0_ax1_fused_ax2_fused] = T_strided_slice[((((ax0_ax1_fused_ax2_fused / 21) * 21) + (((ax0_ax1_fused_ax2_fused % 21) / 7) * 7)) + (ax0_ax1_fused_ax2_fused % 7))];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1380; ++ax0_ax1_fused_ax2_fused_1) {\n    T_softmax_maxelem[ax0_ax1_fused_ax2_fused_1] = -3.402823e+38f;\n    for (int32_t k = 0; k < 21; ++k) {\n      T_softmax_maxelem[ax0_ax1_fused_ax2_fused_1] = max(T_softmax_maxelem[ax0_ax1_fused_ax2_fused_1], T_reverse_sequence[((ax0_ax1_fused_ax2_fused_1 * 21) + k)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 1380; ++ax0_ax1_fused_ax2_fused_2) {\n    T_reverse_sequence[ax0_ax1_fused_ax2_fused_2] = expf((T_reverse_sequence[ax0_ax1_fused_ax2_fused_2] - T_softmax_maxelem[((ax0_ax1_fused_ax2_fused_2 / 21) * 21)]));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 1380; ++ax0_ax1_fused_ax2_fused_3) {\n    T_softmax_maxelem[ax0_ax1_fused_ax2_fused_3] = 0.000000e+00f;\n    for (int32_t k = 0; k < 21; ++k) {\n      T_softmax_maxelem[ax0_ax1_fused_ax2_fused_3] = (T_softmax_maxelem[ax0_ax1_fused_ax2_fused_3] + T_reverse_sequence[((ax0_ax1_fused_ax2_fused_3 * 21) + k)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 1380; ++ax0_ax1_fused_ax2_fused_4) {\n    T_softmax_norm[ax0_ax1_fused_ax2_fused_4] = (T_reverse_sequence[ax0_ax1_fused_ax2_fused_4] / T_softmax_maxelem[((ax0_ax1_fused_ax2_fused_4 / 21) * 21)]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_softmax_norm, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 115; ++ax0_ax1_fused) {\n    float T_strided_slice[7];\n    for (int32_t ax2 = 0; ax2 < 7; ++ax2) {\n      T_strided_slice[ax2] = ph[(((ax0_ax1_fused * 12) + (ax2 * 2)) + 85)];\n    }\n    float T_reverse_sequence[168];\n    for (int32_t ax2_1 = 0; ax2_1 < 7; ++ax2_1) {\n      for (int32_t ax1_ax2_fused_reverse_iterator = 6; ax1_ax2_fused_reverse_iterator >= 0; --ax1_ax2_fused_reverse_iterator) {\n        T_reverse_sequence[((ax2_1 * 21) + ax1_ax2_fused_reverse_iterator)] = T_strided_slice[ax1_ax2_fused_reverse_iterator];\n      }\n    }\n    float T_softmax_maxelem[21];\n    for (int32_t ax2_2 = 0; ax2_2 < 21; ++ax2_2) {\n      T_softmax_maxelem[ax2_2] = -3.402823e+38f;\n      for (int32_t k = 0; k < 7; ++k) {\n        T_softmax_maxelem[ax2_2] = max(T_softmax_maxelem[ax2_2], T_reverse_sequence[((ax2_2 * 7) + k)]);\n      }\n    }\n    float T_softmax_norm[168];\n    for (int32_t ax2_3 = 0; ax2_3 < 21; ++ax2_3) {\n      T_softmax_norm[ax2_3] = (T_reverse_sequence[ax2_3] - T_softmax_maxelem[ax2_3]);\n    }\n    for (int32_t ax2_4 = 0; ax2_4 < 21; ++ax2_4) {\n      T_softmax_norm[ax2_4] = expf(T_softmax_norm[ax2_4]);\n    }\n    float T_softmax_maxelem_1[21];\n    T_softmax_maxelem_1[0] = 0.000000e+00f;\n    for (int32_t k_1 = 0; k_1 < 7; ++k_1) {\n      T_softmax_maxelem_1[0] = (T_softmax_maxelem_1[0] + T_softmax_norm[k_1]);\n    }\n    for (int32_t ax2_5 = 0; ax2_5 < 21; ++ax2_5) {\n      T_softmax_norm[ax2_5] = (T_softmax_norm[ax2_5] / T_softmax_maxelem_1[0]);\n    }\n    for (int32_t ax2_6 = 0; ax2_6 < 21; ++ax2_6) {\n      T_softmax_norm[ax2_6] = T_softmax_norm[ax2_6];\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_reverse_sequence, float* T_strided_slice, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1260; ++ax0_ax1_fused_ax2_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused] = ph[((((ax0_ax1_fused_ax2_fused / 12) * 60) + ((ax0_ax1_fused_ax2_fused % 12) * 12)) + 85)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 115; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_reverse_sequence[((ax0_ax1_fused * 12) + ax2)] = T_strided_slice[((((ax0_ax1_fused % 5) * 12) + ax2) + 14)];\n    }\n  }\n  float T_softmax_maxelem[115];\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 115; ++ax0_ax1_fused_1) {\n    T_softmax_maxelem[ax0_ax1_fused_1] = -3.402823e+38f;\n    for (int32_t k = 0; k < 12; ++k) {\n      T_softmax_maxelem[ax0_ax1_fused_1] = max(T_softmax_maxelem[ax0_ax1_fused_1], T_reverse_sequence[((ax0_ax1_fused_1 * 12) + k)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 115; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_1 = 0; ax2_1 < 12; ++ax2_1) {\n      T_reverse_sequence[((ax0_ax1_fused_2 * 12) + ax2_1)] = expf((T_reverse_sequence[((ax0_ax1_fused_2 * 12) + ax2_1)] - T_softmax_maxelem[ax0_ax1_fused_2]));\n    }\n  }\n  float T_softmax_norm[1320];\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1320; ++ax0_ax1_fused_ax2_fused_1) {\n    T_softmax_norm[ax0_ax1_fused_ax2_fused_1] = (T_reverse_sequence[ax0_ax1_fused_ax2_fused_1] / T_softmax_maxelem[ax0_ax1_fused_ax2_fused_1 / 12]);\n  }\n}"
    },
    {
        "op_name": "graph_21",
        "c_code": "void default_function_kernel(float* T_fast_exp, float* ph) {\n  float T_softmax_maxelem[1265];\n  float compute[1265];\n  for (int32_t i0 = 0; i0 < 11; ++i0) {\n    for (int32_t i1 = 0; i1 < 23; ++i1) {\n      for (int32_t i2 = 0; i2 < 5; ++i2) {\n        T_softmax_maxelem[(((i0 * 115) + (i1 * 5)) + i2)] = -3.402823e+38f;\n        for (int32_t k = 0; k < 12; ++k) {\n          T_softmax_maxelem[(((i0 * 115) + (i1 * 5)) + i2)] = max(T_softmax_maxelem[(((i0 * 115) + (i1 * 5)) + i2)], ph[((((i1 * 60) + k) + 48) - (i2 * 12))]);\n        }\n      }\n    }\n  }\n  for (int32_t i0_1 = 0; i0_1 < 11; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 23; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 5; ++i2_1) {\n        compute[(((i0_1 * 115) + (i1_1 * 5)) + i2_1)] = 0.000000e+00f;\n        for (int32_t k_1 = 0; k_1 < 12; ++k_1) {\n          compute[(((i0_1 * 115) + (i1_1 * 5)) + i2_1)] = (compute[(((i0_1 * 115) + (i1_1 * 5)) + i2_1)] + expf((ph[((((i1_1 * 60) + k_1) + 48) - (i2_1 * 12))] - T_softmax_maxelem[(((i0_1 * 115) + (i1_1 * 5)) + i2_1)])));\n        }\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 253; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 5; ++ax2) {\n      for (int32_t ax3_inner = 0; ax3_inner < 12; ++ax3_inner) {\n          int32_t v_ = ((int32_t)(floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_fast_exp[(((ax0_ax1_fused * 60) + (ax2 * 12)) + ax3_inner)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), ((ph[(((((ax0_ax1_fused % 23) * 60) + ax3_inner) + 48) - (ax2 * 12))] - T_softmax_maxelem[((ax0_ax1_fused * 5) + ax2)]) - logf(compute[((ax0_ax1_fused * 5) + ax2)])));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_5(float* __restrict__ T_expand_dims, float* __restrict__ T_reverse_sequence, float* __restrict__ compute) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3795) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] - T_expand_dims[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 3)]) - __logf(compute[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 3)]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_reverse_sequence, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 345) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[(((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 15) * 60) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 12)) + 48) - (((((((int)threadIdx.x) >> 2) + ((int)blockIdx.x)) % 15) / 3) * 12))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_expand_dims, float* __restrict__ T_reverse_sequence) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3795) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_expand_dims[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) % 1380)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_expand_dims, float* __restrict__ T_reverse_sequence) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 345) {\n    T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_reverse_sequence[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 15) * 60) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 60))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_6(float* __restrict__ T_fast_exp, float* __restrict__ T_reverse_sequence) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 3795) {\n      int v_ = ((int)(floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_expand_dims, float* __restrict__ T_reverse_sequence, float* __restrict__ compute) {\n  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1265) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = 0.000000e+00f;\n  }\n  for (int k = 0; k < 12; ++k) {\n    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1265) {\n      compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] + __expf((T_reverse_sequence[(((((int)blockIdx.x) * 12288) + (((int)threadIdx.x) * 12)) + k)] - T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))])));\n    }\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_expand_dims, float* __restrict__ T_reverse_sequence) {\n  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1265) {\n    T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = -3.402823e+38f;\n  }\n  for (int k = 0; k < 12; ++k) {\n    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1265) {\n      T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(T_expand_dims[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], T_reverse_sequence[(((((int)blockIdx.x) * 12288) + (((int)threadIdx.x) * 12)) + k)]);\n    }\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((23, 5, 12), \"float32\"), T_fast_exp: T.Buffer((11, 23, 5, 12), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        T_softmax_maxelem = T.allocate([1265], \"float32\", \"global\")\n        compute = T.allocate([1265], \"float32\", \"global\")\n        T_softmax_maxelem_1 = T.Buffer((1265,), data=T_softmax_maxelem)\n        ph_1 = T.Buffer((1380,), data=ph.data)\n        for i0, i1, i2 in T.grid(11, 23, 5):\n            T_softmax_maxelem_1[i0 * 115 + i1 * 5 + i2] = T.float32(-3.4028234663852886e+38)\n            for k in range(12):\n                cse_var_1: T.int32 = i0 * 115 + i1 * 5 + i2\n                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], ph_1[i1 * 60 + k + 48 - i2 * 12])\n        compute_1 = T.Buffer((1265,), data=compute)\n        for i0, i1, i2 in T.grid(11, 23, 5):\n            compute_1[i0 * 115 + i1 * 5 + i2] = T.float32(0)\n            for k in range(12):\n                cse_var_2: T.int32 = i0 * 115 + i1 * 5 + i2\n                compute_1[cse_var_2] = compute_1[cse_var_2] + T.exp(ph_1[i1 * 60 + k + 48 - i2 * 12] - T_softmax_maxelem_1[cse_var_2])\n        for ax0_ax1_fused in T.parallel(253):\n            for ax2, ax3_inner in T.grid(5, 12):\n                cse_var_5: T.int32 = ax2 * 12\n                cse_var_4: T.int32 = ax0_ax1_fused * 5 + ax2\n                cse_var_3: T.int32 = ax0_ax1_fused % 23 * 60 + ax3_inner + 48 - cse_var_5\n                T_fast_exp_1 = T.Buffer((15180,), data=T_fast_exp.data)\n                T_fast_exp_1[ax0_ax1_fused * 60 + cse_var_5 + ax3_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_1[cse_var_4]))",
        "op_args": "None",
        "input_shape": "[[23, 5, 12]]",
        "output_shape": "[[11, 23, 5, 12]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_fast_exp"
        ],
        "deepseek_c": "void default_function_kernel(float* T_reverse_sequence, float* ph) {\n    if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 345) {\n        T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[(((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 15) * 60) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 60))];\n    }\n}",
        "starcoder_c": "void default_function_kernel(float* T_fast_exp, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 115; ++ax0_ax1_fused) {\n    float T_reverse_sequence[60];\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_reverse_sequence[ax2] = ph[((ax0_ax1_fused * 12) + ax2)];\n    }\n    float T_expand_dims[12];\n    for (int32_t ax2_1 = 0; ax2_1 < 12; ++ax2_1) {\n      T_expand_dims[ax2_1] = T_reverse_sequence[ax2_1];\n    }\n    float T_reverse_sequence_1[12];\n    for (int32_t ax2_2 = 0; ax2_2 < 12; ++ax2_2) {\n      T_reverse_sequence_1[ax2_2] = T_expand_dims[ax2_2];\n    }\n    for (int32_t ax2_3 = 0; ax2_3 < 12; ++ax2_3) {\n      compute[((ax0_ax1_fused * 12) + ax2_3)] = 0.000000e+00f;\n    }\n    for (int32_t k = 0; k < 12; ++k) {\n      for (int32_t ax2_4 = 0; ax2_4 < 12; ++ax2_4) {\n        compute[((ax0_ax1_fused * 12) + ax2_4)] = (compute[((ax0_ax1_fused * 12) + ax2_4)] + expf((T_reverse_sequence[ax2_4] - T_expand_dims[ax2_4])));\n      }\n    }\n    for (int32_t ax2_5 = 0; ax2_5 < 12; ++ax2_5) {\n      T_reverse_sequence[ax2_5] = ((T_reverse_sequence[ax2_5] - T_expand_dims[ax2_5]) - logf(compute[((ax0_ax1_fused * 12) + ax2_5)]));\n    }\n    for (int32_t ax2_6 = 0; ax2_6 < 12; ++ax2_6) {\n      T_fast_exp[((ax0_ax1_fused * 12) + ax2_6)] = max((expf((T_reverse_sequence[ax2_6] - T_expand_dims[ax2_6])) * (((((((((1.987569e-04f * (T_reverse_sequence[ax2_6] - T_expand_dims[ax2_6])) + 1.398200e-03f) * (T_reverse_sequence[ax2_6] - T_expand_dims[ax2_6])) + 8.333452e-03f) * (T_reverse_sequence[ax2_6] - T_expand_dims[ax2_6])) + 4.166580e-02f) * (T_reverse_sequence[ax2_6] - T_expand_dims[ax2_6])) + 1.666667e-01f) * (T_reverse_sequence[ax2_6] - T_expand_dims[ax2_6])) + 5.000000e-01f)), T_reverse_sequence[ax2_6]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_expand_dims, float* T_fast_exp, float* T_reverse_sequence, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1380; ++i0_i1_fused_i2_fused) {\n    T_reverse_sequence[i0_i1_fused_i2_fused] = ph[((((i0_i1_fused_i2_fused % 60) + 48) - ((i0_i1_fused_i2_fused / 60) * 12))];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 115; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_expand_dims[((ax0_ax1_fused * 12) + ax2)] = -3.402823e+38f;\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1380; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax2_1 = 0; ax2_1 < 12; ++ax2_1) {\n      T_expand_dims[((ax0_ax1_fused_ax2_fused / 12) * 12)] = max(T_expand_dims[((ax0_ax1_fused_ax2_fused / 12) * 12)], T_reverse_sequence[((ax0_ax1_fused_ax2_fused / 12) * 12)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 1380; ++i0_i1_fused_i2_fused_1) {\n    for (int32_t k = 0; k < 12; ++k) {\n      compute[i0_i1_fused_i2_fused_1] = (compute[i0_i1_fused_i2_fused_1] + expf((T_reverse_sequence[((i0_i1_fused_i2_fused_1 % 60) + 48)] - T_expand_dims[i0_i1_fused_i2_fused_1])));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1380; ++ax0_ax1_fused_ax2_fused_1) {\n    T_fast_exp[ax0_ax1_fused_ax2_fused_1] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reverse_sequence[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.398200e-03f) * (max(min(T_reverse_sequence[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 8.333452e-03f) * (max(min(T_reverse_sequence[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 4.166580e-02f) * (max(min(T_reverse_sequence[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.666667e-01f) * (max(min(T_reverse_sequence[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * (max(min(T_reverse_sequence[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + (max(min(T_reverse_sequence[ax0_ax1_fused_ax2_fused_1], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 1.000000e+00f)), T_reverse_sequence[ax0_ax1_fused_ax2_fused_1]);\n  }\n}"
    },
    {
        "op_name": "graph_22",
        "c_code": "void default_function_kernel(float* T_strided_slice, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 25; ++ax0_ax1_fused) {\n    for (int32_t ax2_inner = 0; ax2_inner < 3; ++ax2_inner) {\n      T_strided_slice[((ax0_ax1_fused * 3) + ax2_inner)] = ((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * (((max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f) * max(min(floorf((ph[((((ax0_ax1_fused / 5) * 12) + (ax0_ax1_fused % 5)) + 14)] * 3.333333e-01f)), 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_broadcast_to, float* __restrict__ T_transpose) {\n  if (((int)threadIdx.x) < 75) {\n    T_broadcast_to[((int)threadIdx.x)] = T_transpose[(((int)threadIdx.x) / 3)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_broadcast_to) {\n  if (((int)threadIdx.x) < 75) {\n    T_broadcast_to[((int)threadIdx.x)] = floorf((T_broadcast_to[((int)threadIdx.x)] * 3.333333e-01f));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(75) default_function_kernel_4(float* __restrict__ T_broadcast_to, float* __restrict__ T_strided_slice) {\n  T_strided_slice[((int)threadIdx.x)] = T_broadcast_to[((int)threadIdx.x)];\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_broadcast_to) {\n  if (((int)threadIdx.x) < 75) {\n    T_broadcast_to[((int)threadIdx.x)] = ((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((int)threadIdx.x)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(540) default_function_kernel(float* __restrict__ T_transpose, float* __restrict__ ph) {\n  if (((int)threadIdx.x) < 25) {\n    T_transpose[((int)threadIdx.x)] = ph[((((((int)threadIdx.x) / 5) * 12) + (((int)threadIdx.x) % 5)) + 14)];\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((1, 45, 12), \"float32\"), T_strided_slice: T.Buffer((5, 5, 3), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(25):\n            for ax2_inner in range(3):\n                cse_var_1: T.int32 = ax0_ax1_fused // 5 * 12 + ax0_ax1_fused % 5 + 14\n                T_strided_slice_1 = T.Buffer((75,), data=T_strided_slice.data)\n                ph_1 = T.Buffer((540,), data=ph.data)\n                T_strided_slice_1[ax0_ax1_fused * 3 + ax2_inner] = T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.float32(-2.7261423674040941e-10) + T.float32(2.7706814620387377e-08)) + T.float32(-2.101023937939317e-06)) + T.float32(-5.6925062381196767e-05)) + T.float32(-0.00073499063728377223)) + T.float32(-0.0029545999132096767)) + T.float32(-0.016096033155918121)) / (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * (T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.max(T.min(T.floor(ph_1[cse_var_1] * T.float32(0.33333333333333331)), T.float32(4)), T.float32(-4)) * T.float32(-1.4566071513399947e-05) + T.float32(-0.00021337404905352741)) + T.float32(-0.001682827016338706)) + T.float32(-0.0073733292520046234)) + T.float32(-0.014264739118516445))",
        "op_args": "None",
        "input_shape": "[[1, 45, 12]]",
        "output_shape": "[[5, 5, 3]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_strided_slice"
        ],
        "deepseek_c": "void default_function_kernel(float* T_transpose, float* T_broadcast_to, float* T_strided_slice, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 12; ++i0) {\n    for (int32_t i1 = 0; i1 < 5; ++i1) {\n      T_transpose[((i0 * 5) + i1)] = ph[(((i0 / 5) * 12) + (i1 + 14))];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 75; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 3; ++i1_1) {\n      T_broadcast_to[((i0_1 * 3) + i1_1)] = T_transpose[(((i0_1 / 3) * 5) + i1_1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_2 = 0; i0_2 < 75; ++i0_2) {\n    for (int32_t i1_2 = 0; i1_2 < 3; ++i1_2) {\n      T_broadcast_to[((i0_2 * 3) + i1_2)] = ((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[((i0_2 * 3) + i1_2)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_3 = 0; i0_3 < 75; ++i0_3) {\n    for (int32_t i1_3 = 0; i1_3 < 3; ++i1_3) {\n      T_strided_slice[((i0_3 * 3) + i1_3)] = T_broadcast_to[((i0_3 * 3) + i1_3)];\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_broadcast_to, float* T_broadcast_to_1, float* T_broadcast_to_2, float* T_strided_slice, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 45; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_broadcast_to[((ax0_ax1_fused * 12) + ax2)] = ph[((ax0_ax1_fused * 12) + ax2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 45; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 12; ++ax2_1) {\n      T_broadcast_to_1[((ax0_ax1_fused_1 * 12) + ax2_1)] = T_broadcast_to[(((ax0_ax1_fused_1 / 5) * 12) + ax2_1)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 45; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 12; ++i2) {\n      T_broadcast_to_2[((i0_i1_fused * 12) + i2)] = floorf((T_broadcast_to_1[((i0_i1_fused * 12) + i2)] * 3.333333e-01f));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 45; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 12; ++ax2_2) {\n      T_strided_slice[((ax0_ax1_fused_2 * 12) + ax2_2)] = T_broadcast_to_2[((ax0_ax1_fused_2 * 12) + ax2_2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 540; ++i0_i1_fused_i2_fused) {\n    T_broadcast_to_1[i0_i1_fused_i2_fused] = ((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to_2[i0_i1_fused_i2_fused], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_broadcast_to, float* T_broadcast_to_1, float* T_broadcast_to_2, float* T_strided_slice, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 540; ++ax0_ax1_fused_ax2_fused) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused] = ph[((ax0_ax1_fused_ax2_fused % 12) + 14)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 540; ++ax0_ax1_fused_ax2_fused_1) {\n    T_broadcast_to_1[ax0_ax1_fused_ax2_fused_1] = T_broadcast_to[ax0_ax1_fused_ax2_fused_1];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 540; ++ax0_ax1_fused_ax2_fused_2) {\n    T_broadcast_to_2[ax0_ax1_fused_ax2_fused_2] = T_broadcast_to[ax0_ax1_fused_ax2_fused_2];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 540; ++ax0_ax1_fused_ax2_fused_3) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_3] = T_broadcast_to[ax0_ax1_fused_ax2_fused_3];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_4 = 0; ax0_ax1_fused_ax2_fused_4 < 540; ++ax0_ax1_fused_ax2_fused_4) {\n    T_broadcast_to[ax0_ax1_fused_ax2_fused_4] = ((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * (((max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f) * max(min(T_broadcast_to[ax0_ax1_fused_ax2_fused_4], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));\n  }\n}"
    },
    {
        "op_name": "graph_23",
        "c_code": "void default_function_kernel(float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 45; ++ax0_ax1_fused) {\n    for (int32_t ax2_outer = 0; ax2_outer < 2; ++ax2_outer) {\n      for (int32_t ax2_inner = 0; ax2_inner < 16; ++ax2_inner) {\n        if (((ax2_outer * 16) + ax2_inner) < 17) {\n            int32_t v_ = ((int32_t)(floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n          T_transpose[(((ax0_ax1_fused * 17) + (ax2_outer * 16)) + ax2_inner)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), ph[(((((ax2_outer * 960) + (ax2_inner * 60)) + (ax0_ax1_fused % 9)) + 109) - ((ax0_ax1_fused / 9) * 12))]);\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(765) default_function_kernel_2(float* __restrict__ T_reverse_sequence) {\n    int v_ = ((int)(floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_reverse_sequence[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reverse_sequence[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reverse_sequence[((int)threadIdx.x)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(765) default_function_kernel_3(float* __restrict__ T_reverse_sequence, float* __restrict__ T_transpose) {\n  T_transpose[((int)threadIdx.x)] = T_reverse_sequence[(((((int)threadIdx.x) % 17) * 45) + (((int)threadIdx.x) / 17))];\n}\n\nextern \"C\" __global__ void __launch_bounds__(765) default_function_kernel_1(float* __restrict__ T_reverse_sequence, float* __restrict__ T_strided_slice) {\n  T_reverse_sequence[((int)threadIdx.x)] = T_strided_slice[(((((((int)threadIdx.x) / 45) * 45) + (((int)threadIdx.x) % 9)) + 36) - (((((int)threadIdx.x) % 45) / 9) * 9))];\n}\n\nextern \"C\" __global__ void __launch_bounds__(765) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  T_strided_slice[((int)threadIdx.x)] = ph[((((((int)threadIdx.x) / 9) * 12) + (((int)threadIdx.x) % 9)) + 61)];\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((23, 5, 12), \"float32\"), T_transpose: T.Buffer((5, 9, 17), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(45):\n            for ax2_outer, ax2_inner in T.grid(2, 16):\n                if T.likely(ax2_outer * 16 + ax2_inner < 17):\n                    T_transpose_1 = T.Buffer((765,), data=T_transpose.data)\n                    ph_1 = T.Buffer((1380,), data=ph.data)\n                    cse_var_1: T.int32 = ax2_outer * 960 + ax2_inner * 60 + ax0_ax1_fused % 9 + 109 - ax0_ax1_fused // 9 * 12\n                    T_transpose_1[ax0_ax1_fused * 17 + ax2_outer * 16 + ax2_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(ph_1[cse_var_1], T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), ph_1[cse_var_1])",
        "op_args": "None",
        "input_shape": "[[23, 5, 12]]",
        "output_shape": "[[5, 9, 17]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_transpose"
        ],
        "deepseek_c": "void default_function_kernel(float* T_strided_slice, float* ph) {\n  float T_reverse_sequence[1380];\n  float T_transpose[1380];\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 115; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 12; ++i2) {\n      T_strided_slice[((i0_i1_fused * 12) + i2)] = ph[((((i0_i1_fused / 5) * 45) + (i2 * 3)) + (i0_i1_fused % 5))];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 1380; ++i0_i1_fused_i2_fused) {\n    T_reverse_sequence[i0_i1_fused_i2_fused] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[i0_i1_fused_i2_fused], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[i0_i1_fused_i2_fused]);\n    }\n  }",
        "starcoder_c": "void default_function_kernel(float* T_reverse_sequence, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 115; ++ax0_ax1_fused) {\n    float T_strided_slice[9];\n    for (int32_t ax2 = 0; ax2 < 9; ++ax2) {\n      T_strided_slice[ax2] = ph[(((ax0_ax1_fused * 12) + ax2) + 61)];\n    }\n    float T_reverse_sequence_1[9];\n    for (int32_t i1 = 0; i1 < 9; ++i1) {\n      T_reverse_sequence_1[i1] = T_strided_slice[((8 - i1) % 9)];\n    }\n    for (int32_t ax2_1 = 0; ax2_1 < 9; ++ax2_1) {\n      T_reverse_sequence[(((ax0_ax1_fused * 9) + ax2_1) + 36)] = T_reverse_sequence_1[ax2_1];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 115; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_2 = 0; ax2_2 < 9; ++ax2_2) {\n      T_reverse_sequence[((ax0_ax1_fused_1 * 9) + ax2_2)] = ((1.000000e+00f / T_reverse_sequence[((ax0_ax1_fused_1 * 9) + ax2_2)]) * T_reverse_sequence[((ax0_ax1_fused_1 * 9) + ax2_2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 115; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 9; ++i2) {\n      T_transpose[((i0_i1_fused * 9) + i2)] = T_reverse_sequence[(((i0_i1_fused * 9) + i2) + 36)];\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_reverse_sequence, float* T_strided_slice, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1260; ++ax0_ax1_fused_ax2_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused] = ph[((((ax0_ax1_fused_ax2_fused % 12) * 23) + (ax0_ax1_fused_ax2_fused / 12)) + 61)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 1260; ++ax0_ax1_fused_ax2_fused_1) {\n    T_reverse_sequence[ax0_ax1_fused_ax2_fused_1] = T_strided_slice[(((((ax0_ax1_fused_ax2_fused_1 % 12) * 23) + (ax0_ax1_fused_ax2_fused_1 / 12)) + 36) - (((ax0_ax1_fused_ax2_fused_1 % 45) / 9) * 9))];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 115; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_transpose[((ax0_ax1_fused * 12) + ax2)] = T_reverse_sequence[(((ax2 * 23) + (ax0_ax1_fused % 23)) + 36) - ((ax0_ax1_fused / 23) * 23)];\n    }\n  }\n}"
    },
    {
        "op_name": "graph_24",
        "c_code": "void default_function_kernel(float* T_reverse_sequence, float* compute, float* ph, float* ph_1) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 100; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 10; ++i2) {\n      for (int32_t i3_inner = 0; i3_inner < 10; ++i3_inner) {\n        compute[(((i0_i1_fused * 100) + (i2 * 10)) + i3_inner)] = atanhf(ph[((((((i0_i1_fused / 10) * 31944) + ((i0_i1_fused % 10) * 1452)) + (i2 * 44)) + i3_inner) + 16973)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 100; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      for (int32_t ax3_inner = 0; ax3_inner < 10; ++ax3_inner) {\n        T_reverse_sequence[(((ax0_ax1_fused * 100) + (ax2 * 10)) + ax3_inner)] = ph_1[((((((ax0_ax1_fused / 10) * 79860) + ((ax0_ax1_fused % 10) * 2420)) + ax3_inner) + 934054) - (ax2 * 55))];\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 79860) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 2420)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 55)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 933559)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice, float* __restrict__ compute) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = atanhf(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 31944) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 1452)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 44)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 16973)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_reverse_sequence, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_reverse_sequence[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_strided_slice[(((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 25) * 100) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 90) - (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 10))];\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), ph_1: T.Buffer((22, 33, 44, 55), \"float32\"), compute: T.Buffer((10, 10, 10, 10), \"float32\"), T_reverse_sequence: T.Buffer((10, 10, 10, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(100):\n            for i2, i3_inner in T.grid(10, 10):\n                compute_1 = T.Buffer((10000,), data=compute.data)\n                ph_2 = T.Buffer((351384,), data=ph.data)\n                compute_1[i0_i1_fused * 100 + i2 * 10 + i3_inner] = T.atanh(ph_2[i0_i1_fused // 10 * 31944 + i0_i1_fused % 10 * 1452 + i2 * 44 + i3_inner + 16973])\n        for ax0_ax1_fused in T.parallel(100):\n            for ax2, ax3_inner in T.grid(10, 10):\n                T_reverse_sequence_1 = T.Buffer((10000,), data=T_reverse_sequence.data)\n                ph_2 = T.Buffer((1756920,), data=ph_1.data)\n                T_reverse_sequence_1[ax0_ax1_fused * 100 + ax2 * 10 + ax3_inner] = ph_2[ax0_ax1_fused // 10 * 79860 + ax0_ax1_fused % 10 * 2420 + ax3_inner + 934054 - ax2 * 55]",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44], [22, 33, 44, 55]]",
        "output_shape": "[[10, 10, 10, 10], [10, 10, 10, 10]]",
        "input_name": [
            "ph",
            "ph"
        ],
        "output_name": [
            "compute",
            "T_reverse_sequence"
        ],
        "deepseek_c": "void default_function_kernel(float* T_strided_slice, float* ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 31944) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 1452)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 44)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 16973)];\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_reverse_sequence, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 220; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n        compute[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3)] = atanhf(ph[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 220; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 33; ++ax2_1) {\n      for (int32_t ax3_1 = 0; ax3_1 < 44; ++ax3_1) {\n        T_reverse_sequence[(((ax0_ax1_fused_1 * 1452) + (ax2_1 * 44)) + ax3_1)] = ph[(((((ax0_ax1_fused_1 / 22) * 79860) + ((ax2_1 * 2420) + (ax3_1 * 55))) + (ax0_ax1_fused_1 % 22)) + 933559)];\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_reverse_sequence, float* compute, float* T_strided_slice, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2520; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused * 10) + ax3)] = ph[(((((ax0_ax1_fused_ax2_fused / 25) * 31944) + ((ax0_ax1_fused_ax2_fused % 25) * 1452)) + (ax3 * 44)) + 16973)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2520; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3 = 0; i3 < 10; ++i3) {\n      compute[((i0_i1_fused_i2_fused * 10) + i3)] = atanhf(T_strided_slice[((i0_i1_fused_i2_fused * 10) + i3)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 25200; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_reverse_sequence[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[((((((ax0_ax1_fused_ax2_fused_ax3_fused / 250) * 79860) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 250) / 25) * 2420)) + ((ax0_ax1_fused_ax2_fused_ax3_fused % 25) * 44)) + 933559) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 50) / 5) * 55))];\n  }\n}"
    },
    {
        "op_name": "graph_25",
        "c_code": "void default_function_kernel(float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 45; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 12; ++i2) {\n      for (int32_t i3_inner = 0; i3_inner < 3; ++i3_inner) {\n        compute[(((i0_i1_fused * 36) + (i2 * 3)) + i3_inner)] = max(min(floorf(ph[(((i3_inner * 540) + (i0_i1_fused * 12)) + i2)]), 1.111000e+01f), 1.100000e+00f);\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 405) {\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = floorf(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_transpose, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 405) {\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((int)blockIdx.x) + ((int)threadIdx.x)) % 3) * 540) + (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) / 3))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_transpose, float* __restrict__ compute) {\n  if (((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) < 405) {\n    compute[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.111000e+01f), 1.100000e+00f);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((3, 45, 12), \"float32\"), compute: T.Buffer((45, 1, 12, 3), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(45):\n            for i2, i3_inner in T.grid(12, 3):\n                compute_1 = T.Buffer((1620,), data=compute.data)\n                ph_1 = T.Buffer((1620,), data=ph.data)\n                compute_1[i0_i1_fused * 36 + i2 * 3 + i3_inner] = T.max(T.min(T.floor(ph_1[i3_inner * 540 + i0_i1_fused * 12 + i2]), T.float32(11.109999999999999)), T.float32(1.1000000000000001))",
        "op_args": "None",
        "input_shape": "[[3, 45, 12]]",
        "output_shape": "[[45, 1, 12, 3]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "compute"
        ],
        "deepseek_c": "void default_function_kernel(float* T_transpose, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 1620; ++ax0_ax1_fused_ax2_fused) {\n    T_transpose[ax0_ax1_fused_ax2_fused] = ph[((((ax0_ax1_fused_ax2_fused / 540) * 1024) + (ax0_ax1_fused_ax2_fused % 3)) + ((ax0_ax1_fused_ax2_fused % 540) / 3))];\n  }\n  #pragma omp parallel for\n  for (int32_t i0 = 0; i0 < 3; ++i0) {\n    for (int32_t i1 = 0; i1 < 45; ++i1) {\n      for (int32_t i2 = 0; i2 < 12; ++i2) {\n        T_transpose[((((i0 * 540) + (i1 * 12)) + i2) + 1620)] = floorf(T_transpose[((((i0 * 540) + (i1 * 12)) + i2) + 1620)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_1 = 0; i0_1 < 3; ++i0_1) {\n    for (int32_t i1_1 = 0; i1_1 < 45; ++i1_1) {\n      for (int32_t i2_1 = 0; i2_1 < 12; ++i2_1) {\n        compute[((((i0_1 * 540) + (i1_1 * 12)) + i2_1) + 3240)] = max(min(T_transpose[((((i0_1 * 540) + (i1_1 * 12)) + i2_1) + 3240)], 1.111000e+01f), 1.100000e+00f);\n      }\n    }\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_transpose, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 45; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 12; ++ax2) {\n      T_transpose[((ax0_ax1_fused * 12) + ax2)] = ph[((ax0_ax1_fused * 12) + ax2)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 45; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 12; ++ax2_1) {\n      T_transpose[((ax0_ax1_fused_1 * 12) + ax2_1)] = floorf(T_transpose[((ax0_ax1_fused_1 * 12) + ax2_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 540; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = max(min(T_transpose[i0_i1_fused_i2_fused], 1.111000e+01f), 1.100000e+00f);\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_transpose, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 540; ++ax0_ax1_fused_ax2_fused) {\n    T_transpose[ax0_ax1_fused_ax2_fused] = ph[ax0_ax1_fused_ax2_fused];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 540; ++ax0_ax1_fused_ax2_fused_1) {\n    T_transpose[ax0_ax1_fused_ax2_fused_1] = floorf(T_transpose[ax0_ax1_fused_ax2_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 540; ++i0_i1_fused_i2_fused) {\n    compute[i0_i1_fused_i2_fused] = max(min(T_transpose[i0_i1_fused_i2_fused], 1.111000e+01f), 1.100000e+00f);\n  }\n}"
    },
    {
        "op_name": "graph_26",
        "c_code": "void default_function_kernel(float* T_fast_exp, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 64; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 50; ++ax2) {\n      for (int32_t ax3_outer = 0; ax3_outer < 4; ++ax3_outer) {\n        for (int32_t ax3_inner = 0; ax3_inner < 16; ++ax3_inner) {\n          if (((ax3_outer * 8) + (ax3_inner >> 1)) < 25) {\n            float cse_var_2 = (((((float)ax2) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n            float cse_var_1 = (((((float)((ax3_outer * 16) + ax3_inner)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f);\n              int32_t v_ = ((int32_t)(floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n            T_fast_exp[((((ax0_ax1_fused * 2500) + (ax2 * 50)) + (ax3_outer * 16)) + ax3_inner)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min((1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - cosf(asinf(((((ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min(((int32_t)floorf(cse_var_2)), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (1.000000e+00f - (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))) + (((ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min(((int32_t)floorf(cse_var_1)), 31), 0))] * (1.000000e+00f - (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) + (ph[(((ax0_ax1_fused * 1024) + (max(min((((int32_t)floorf(cse_var_2)) + 1), 31), 0) * 32)) + max(min((((int32_t)floorf(cse_var_1)) + 1), 31), 0))] * (cse_var_1 - ((float)((int32_t)floorf(cse_var_1)))))) * (cse_var_2 - ((float)((int32_t)floorf(cse_var_2)))))))))))));\n          }\n        }\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_fast_exp, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n      int v_ = ((int)(floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ ph, float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ((((ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min(((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min(((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0))] * (1.000000e+00f - ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min(((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min((((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0))] * ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * (1.000000e+00f - ((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (((ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min((((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min(((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0))] * (1.000000e+00f - ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((int)blockIdx.x) * 256) + (((int)threadIdx.x) >> 2)) / 625) * 1024) + (max(min((((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min((((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0))] * ((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((((int)blockIdx.x) * 24) + ((int)threadIdx.x)) % 50)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((((((int)blockIdx.x) * 512) + (((int)threadIdx.x) >> 1)) % 1250) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]))));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __cosf(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ resize) {\n  if (((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 8)) < 625) {\n    resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = asinf(resize[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((4, 16, 32, 32), \"float32\"), T_fast_exp: T.Buffer((4, 16, 50, 50), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(64):\n            for ax2, ax3_outer, ax3_inner in T.grid(50, 4, 16):\n                if T.likely(ax3_outer * 8 + ax3_inner // 2 < 25):\n                    cse_var_4: T.int32 = ax3_outer * 16\n                    cse_var_3: T.int32 = ax0_ax1_fused * 1024\n                    cse_var_2: T.float32 = (T.Cast(\"float32\", ax2) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                    cse_var_1: T.float32 = (T.Cast(\"float32\", cse_var_4 + ax3_inner) + T.float32(0.5)) * T.float32(0.63999998569488525) - T.float32(0.5)\n                    T_fast_exp_1 = T.Buffer((160000,), data=T_fast_exp.data)\n                    ph_1 = T.Buffer((65536,), data=ph.data)\n                    T_fast_exp_1[ax0_ax1_fused * 2500 + ax2 * 50 + cse_var_4 + ax3_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.sigmoid(T.cos(T.asin((ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)), 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (T.float32(1) - (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))) + (ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)), 31), 0)] * (T.float32(1) - (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) + ph_1[cse_var_3 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_2)) + 1, 31), 0) * 32 + T.max(T.min(T.Cast(\"int32\", T.floor(cse_var_1)) + 1, 31), 0)] * (cse_var_1 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_1))))) * (cse_var_2 - T.Cast(\"float32\", T.Cast(\"int32\", T.floor(cse_var_2))))))))",
        "op_args": "None",
        "input_shape": "[[4, 16, 32, 32]]",
        "output_shape": "[[4, 16, 50, 50]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_fast_exp"
        ],
        "deepseek_c": "#include <math.h>\n#include <stdio.h>\n\nvoid default_function_kernel(float* restrict resize, float* restrict ph, float* restrict T_fast_exp, float* restrict resize_1, float* restrict resize_2) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_outer = 0; ax0_ax1_fused_ax2_fused_outer < 204800; ++ax0_ax1_fused_ax2_fused_outer) {\n    resize[ax0_ax1_fused_ax2_fused_outer] = ((((ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) + (((ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) + (((ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) + (((ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) * ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))))) + (((ph[((((((((ax0_ax1_fused_ax2_fused_outer / 625) * 256) + (((ax0_ax1_fused_ax2_fused_outer % 625) / 25) * 32)) + (max(min(((ax0_ax1_fused_ax2_fused_outer % 625), 31), 0) * 32)) + max(min(((ax0_ax1_fused_ax2_fused_outer % 50), 31), 0))] * (1.000000e+00f - ((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)(((ax0_ax1_fused_ax2_fused_outer % 50) / 25)) + 5.000000e-01",
        "starcoder_c": "void default_function_kernel(float* T_fast_exp, float* ph, float* resize) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 204800; ++i0_i1_fused_i2_fused_i3_fused) {\n    resize[i0_i1_fused_i2_fused_i3_fused] = ((((ph[i0_i1_fused_i2_fused_i3_fused] * (1.000000e+00f - ((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((i0_i1_fused_i2_fused_i3_fused / 512) * 1024) + (max(min(((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min(((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0))] * ((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * (1.000000e+00f - ((((((float)((i0_i1_fused_i2_fused_i3_fused / 512)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused / 512)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (((ph[((i0_i1_fused_i2_fused_i3_fused / 512) * 1024) + (max(min(((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0) * 32)) + max(min(((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0)] * (1.000000e+00f - ((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) + (ph[((i0_i1_fused_i2_fused_i3_fused / 512) * 1024) + (max(min((((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))) + 1), 31), 0) * 32)) + max(min(((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))), 31), 0))] * ((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused % 512) / 32)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f))))))) * ((((((float)((i0_i1_fused_i2_fused_i3_fused / 512)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((int)floorf((((((float)((i0_i1_fused_i2_fused_i3_fused / 512)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f)))))));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 64; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 32; ++i2) {\n      for (int32_t i3 = 0; i3 < 32; ++i3) {\n        resize[(((i0_i1_fused * 1024) + (i2 * 32)) + i3)] = asinf(resize[(((i0_i1_fused * 1024) + (i2 * 32)) + i3)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_1 = 0; i0_i1_fused_i2_fused_i3_fused_1 < 204800; ++i0_i1_fused_i2_fused_i3_fused_1) {\n    resize[i0_i1_fused_i2_fused_i3_fused_1] = __cosf(resize[i0_i1_fused_i2_fused_i3_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_2 = 0; i0_i1_fused_i2_fused_i3_fused_2 < 204800; ++i0_i1_fused_i2_fused_i3_fused_2) {\n    resize[i0_i1_fused_i2_fused_i3_fused_2] = (1.000000e+00f / (1.000000e+00f + __expf((0.000000e+00f - resize[i0_i1_fused_i2_fused_i3_fused_2]))));\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 64; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 32; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 32; ++ax3) {\n        T_fast_exp[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), resize[(((ax0_ax1_fused * 1024) + (ax2 * 32)) + ax3)]);\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* ph, float* resize) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 2048; ++i0_i1_fused_i2_fused_i3_fused) {\n    resize[i0_i1_fused_i2_fused_i3_fused] = (ph[i0_i1_fused_i2_fused_i3_fused] * (1.000000e+00f - ((((((float)((i0_i1_fused_i2_fused_i3_fused / 1024) % 16)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((i0_i1_fused_i2_fused_i3_fused / 1024) % 16)))) + (ph[(((((i0_i1_fused_i2_fused_i3_fused / 1024) % 16) * 1024) + (((i0_i1_fused_i2_fused_i3_fused % 1024) / 32) * 32)) + (((i0_i1_fused_i2_fused_i3_fused % 1024) % 32) / 2))] * ((((((float)((i0_i1_fused_i2_fused_i3_fused / 1024) % 16)) + 5.000000e-01f) * 6.400000e-01f) - 5.000000e-01f) - ((float)((i0_i1_fused_i2_fused_i3_fused / 1024) % 16))))));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_1 = 0; i0_i1_fused_i2_fused_i3_fused_1 < 2048; ++i0_i1_fused_i2_fused_i3_fused_1) {\n    resize[i0_i1_fused_i2_fused_i3_fused_1] = asinf(resize[i0_i1_fused_i2_fused_i3_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_2 = 0; i0_i1_fused_i2_fused_i3_fused_2 < 2048; ++i0_i1_fused_i2_fused_i3_fused_2) {\n    resize[i0_i1_fused_i2_fused_i3_fused_2] = cosf(resize[i0_i1_fused_i2_fused_i3_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_3 = 0; i0_i1_fused_i2_fused_i3_fused_3 < 2048; ++i0_i1_fused_i2_fused_i3_fused_3) {\n    resize[i0_i1_fused_i2_fused_i3_fused_3] = (1.000000e+00f / (1.000000e+00f + expf((0.000000e+00f - resize[i0_i1_fused_i2_fused_i3_fused_3]))));\n  }\n}"
    },
    {
        "op_name": "graph_27",
        "c_code": "void default_function_kernel(float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 120; ++ax0_ax1_fused) {\n    for (int32_t ax2_inner = 0; ax2_inner < 7; ++ax2_inner) {\n        int32_t v_ = ((int32_t)(floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n      T_transpose[((ax0_ax1_fused * 7) + ax2_inner)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), max(min(ph[((((ax0_ax1_fused & 3) * 210) + ((ax0_ax1_fused >> 2) * 7)) + ax2_inner)], 9.999000e+01f), 1.111000e+01f));\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(840) default_function_kernel_3(float* __restrict__ T_reshape, float* __restrict__ T_transpose) {\n  T_transpose[((int)threadIdx.x)] = T_reshape[(((((((int)threadIdx.x) % 28) / 7) * 210) + ((((int)threadIdx.x) / 28) * 7)) + (((int)threadIdx.x) % 7))];\n}\n\nextern \"C\" __global__ void __launch_bounds__(840) default_function_kernel_1(float* __restrict__ T_reshape) {\n  T_reshape[((int)threadIdx.x)] = max(min(T_reshape[((int)threadIdx.x)], 9.999000e+01f), 1.111000e+01f);\n}\n\nextern \"C\" __global__ void __launch_bounds__(840) default_function_kernel_2(float* __restrict__ T_reshape) {\n    int v_ = ((int)(floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n  T_reshape[((int)threadIdx.x)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[((int)threadIdx.x)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reshape[((int)threadIdx.x)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(840) default_function_kernel(float* __restrict__ T_reshape, float* __restrict__ ph) {\n  T_reshape[((int)threadIdx.x)] = ph[((int)threadIdx.x)];\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((4, 5, 6, 7), \"float32\"), T_transpose: T.Buffer((30, 4, 7), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(120):\n            for ax2_inner in range(7):\n                cse_var_1: T.int32 = ax0_ax1_fused % 4 * 210 + ax0_ax1_fused // 4 * 7 + ax2_inner\n                T_transpose_1 = T.Buffer((840,), data=T_transpose.data)\n                ph_1 = T.Buffer((840,), data=ph.data)\n                T_transpose_1[ax0_ax1_fused * 7 + ax2_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.max(T.min(ph_1[cse_var_1], T.float32(99.989999999999995)), T.float32(11.109999999999999)))",
        "op_args": "None",
        "input_shape": "[[4, 5, 6, 7]]",
        "output_shape": "[[30, 4, 7]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_transpose"
        ],
        "deepseek_c": "void default_function_kernel(float* T_reshape, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 840; ++i0_i1_fused_i2_fused_i3_fused) {\n    T_reshape[i0_i1_fused_i2_fused_i3_fused] = ph[i0_i1_fused_i2_fused_i3_fused];\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_reshape, float* T_reshape_1, float* T_reshape_2, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 20; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n        T_reshape[(((ax0_ax1_fused * 42) + (ax2 * 7)) + ax3)] = ph[(((ax0_ax1_fused * 42) + (ax2 * 7)) + ax3)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 20; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 6; ++ax2_1) {\n      for (int32_t ax3_1 = 0; ax3_1 < 7; ++ax3_1) {\n        T_reshape_1[(((ax0_ax1_fused_1 * 42) + (ax2_1 * 7)) + ax3_1)] = max(min(T_reshape[(((ax0_ax1_fused_1 * 42) + (ax2_1 * 7)) + ax3_1)], 9.999000e+01f), 1.111000e+01f);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_2 = 0; ax0_ax1_fused_2 < 20; ++ax0_ax1_fused_2) {\n    for (int32_t ax2_2 = 0; ax2_2 < 6; ++ax2_2) {\n      for (int32_t ax3_2 = 0; ax3_2 < 7; ++ax3_2) {\n        T_reshape_2[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)] = max(((*(float *)(&((int)max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * ((((((((((((((1.987569e-04f * (max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reshape[(((ax0_ax1_fused_2 * 42) + (ax2_2 * 7)) + ax3_2)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_3 = 0; ax0_ax1_fused_3 < 20; ++ax0_ax1_fused_3) {\n    for (int32_t ax2_3 = 0; ax2_3 < 6; ++ax2_3) {\n      for (int32_t ax3_3 = 0; ax3_3 < 7; ++ax3_3) {\n        T_reshape_2[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)] = T_reshape_1[(((ax0_ax1_fused_3 * 42) + (ax2_3 * 7)) + ax3_3)];\n      }\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_reshape, float* T_reshape_1, float* T_reshape_2, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 120; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 7; ++ax3) {\n      T_reshape[((ax0_ax1_fused_ax2_fused * 7) + ax3)] = ph[(((ax0_ax1_fused_ax2_fused / 20) * 28) + ((ax0_ax1_fused_ax2_fused % 20) * 7)) + ax3];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 120; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t ax3_1 = 0; ax3_1 < 7; ++ax3_1) {\n      T_reshape_1[((ax0_ax1_fused_ax2_fused_1 * 7) + ax3_1)] = max(min(T_reshape[((ax0_ax1_fused_ax2_fused_1 * 7) + ax3_1)], 9.999000e+01f), 1.111000e+01f);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 120; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t ax3_2 = 0; ax3_2 < 7; ++ax3_2) {\n      T_reshape_2[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_reshape_1[((ax0_ax1_fused_ax2_fused_2 * 7) + ax3_2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_3 = 0; ax0_ax1_fused_ax2_fused_3 < 120; ++ax0_ax1_fused_ax2_fused_3) {\n    for (int32_t ax3_3 = 0; ax3_3 < 7; ++ax3_3) {\n      T_transpose[((ax3_3 * 120) + ax0_ax1_fused_ax2_fused_3)] = T_reshape_2[((ax0_ax1_fused_ax2_fused_3 * 7) + ax3_3)];\n    }\n  }\n}"
    },
    {
        "op_name": "graph_28",
        "c_code": "void default_function_kernel(float* T_fast_exp, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 80; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 6; ++ax2) {\n      for (int32_t ax3_inner = 0; ax3_inner < 4; ++ax3_inner) {\n          int32_t v_ = ((int32_t)(floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n        T_fast_exp[(((ax0_ax1_fused * 24) + (ax2 * 4)) + ax3_inner)] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])), 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), log2f(cosf(ph[(((((ax2 * 14688) + ((ax0_ax1_fused & 7) * 272)) + (ax3_inner * 17)) + (ax0_ax1_fused >> 3)) + 29699)])));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_transpose, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 7)) < 15) {\n    T_transpose[(((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3) * 192) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 24)) + ((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 4)) + (((int)threadIdx.x) & 3))] = ph[((((((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 14688) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 272)) + ((((int)threadIdx.x) & 3) * 17)) + (((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3)) + 29699)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 7)) < 15) {\n    T_transpose[(((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3) * 192) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 24)) + ((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 4)) + (((int)threadIdx.x) & 3))] = __log2f(T_transpose[(((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3) * 192) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 24)) + ((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 4)) + (((int)threadIdx.x) & 3))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_fast_exp, float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 7)) < 15) {\n      int v_ = ((int)(floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 7)) < 15) {\n    T_transpose[(((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3) * 192) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 24)) + ((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 4)) + (((int)threadIdx.x) & 3))] = __cosf(T_transpose[(((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3) * 192) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 24)) + ((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 4)) + (((int)threadIdx.x) & 3))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_strided_slice, float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 7)) < 15) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_transpose[(((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3) * 192) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 24)) + ((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 4)) + (((int)threadIdx.x) & 3))];\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((43, 54, 16, 17), \"float32\"), T_fast_exp: T.Buffer((10, 8, 6, 4), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(80):\n            for ax2, ax3_inner in T.grid(6, 4):\n                cse_var_1: T.int32 = ax2 * 14688 + ax0_ax1_fused % 8 * 272 + ax3_inner * 17 + ax0_ax1_fused // 8 + 29699\n                T_fast_exp_1 = T.Buffer((1920,), data=T_fast_exp.data)\n                ph_1 = T.Buffer((631584,), data=ph.data)\n                T_fast_exp_1[ax0_ax1_fused * 24 + ax2 * 4 + ax3_inner] = T.max(T.reinterpret(\"float32\", T.shift_left(T.Cast(\"int32\", T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) + T.float32(127)), 23)) * ((((((T.float32(0.00019875691214110702) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.0013981999363750219)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.008333452045917511)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.041665796190500259)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.1666666567325592)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(0.5)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) * (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + (T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) - T.floor(T.max(T.min(T.log2(T.cos(ph_1[cse_var_1])), T.float32(88.376266479492188)), T.float32(-88.376258850097656)) * T.float32(1.4426950216293335) + T.float32(0.5)) * T.float32(0.69314718246459961)) + T.float32(1)), T.log2(T.cos(ph_1[cse_var_1])))",
        "op_args": "None",
        "input_shape": "[[43, 54, 16, 17]]",
        "output_shape": "[[10, 8, 6, 4]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_fast_exp"
        ],
        "deepseek_c": "void default_function_kernel(float* T_transpose, float* ph) {\n  if (((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 7)) < 15) {\n    T_transpose[(((((((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3) * 192) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 24)) + ((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 4)) + (((int)threadIdx.x) & 3))] = ph[((((((((((int)blockIdx.x) * 4) + (((int)threadIdx.x) >> 2)) % 6) * 14688) + (((((((int)blockIdx.x) * 8) + (((int)threadIdx.x) >> 3)) % 24) / 3) * 272)) + ((((int)threadIdx.x) & 3) * 17)) + (((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 6)) / 3)) + 29699)];\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_fast_exp, float* T_strided_slice, float* T_transpose, float* T_transpose_1, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 216; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 16; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 24; ++ax3) {\n        T_transpose[(((ax0_ax1_fused * 384) + (ax2 * 24)) + ax3)] = ph[((((ax0_ax1_fused * 272) + (ax3 * 17)) + ax2) + 29699)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 3456; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3_1 = 0; ax3_1 < 24; ++ax3_1) {\n      T_transpose_1[((ax0_ax1_fused_ax2_fused * 24) + ax3_1)] = cosf(T_transpose[((ax0_ax1_fused_ax2_fused * 24) + ax3_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_1 = 0; ax0_ax1_fused_1 < 216; ++ax0_ax1_fused_1) {\n    for (int32_t ax2_1 = 0; ax2_1 < 16; ++ax2_1) {\n      for (int32_t ax3_2 = 0; ax3_2 < 24; ++ax3_2) {\n        T_strided_slice[(((ax0_ax1_fused_1 * 384) + (ax2_1 * 24)) + ax3_2)] = T_transpose[(((ax0_ax1_fused_1 * 384) + (ax2_1 * 24)) + ax3_2)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 3456; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3 = 0; i3 < 24; ++i3) {\n      T_fast_exp[((i0_i1_fused_i2_fused * 24) + i3)] = max(((*(float *)(&((int)(floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23)) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[((i0_i1_fused_i2_fused * 24) + i3)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_fast_exp, float* T_strided_slice, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2520; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 17; ++ax3) {\n      T_transpose[((ax0_ax1_fused_ax2_fused * 289) + ax3)] = ph[(((((ax0_ax1_fused_ax2_fused % 24) * 289) + ((ax0_ax1_fused_ax2_fused / 24) * 28)) + (ax3 * 4)) + 29699)];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 4480; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_transpose[ax0_ax1_fused_ax2_fused_ax3_fused] = cosf(T_transpose[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 4480; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_1] = T_transpose[ax0_ax1_fused_ax2_fused_ax3_fused_1];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 4480; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n      int32_t v_ = ((int32_t)(floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) + 1.270000e+02f)) << 23;\n    T_fast_exp[ax0_ax1_fused_ax2_fused_ax3_fused_2] = max(((*(float *)(&(v_))) * ((((((((((((((1.987569e-04f * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.398200e-03f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 8.333452e-03f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 4.166580e-02f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.666667e-01f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 5.000000e-01f) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) * (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + (max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) - (floorf(((max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2], 8.837627e+01f), -8.837626e+01f) * 1.442695e+00f) + 5.000000e-01f)) * 6.931472e-01f))) + 1.000000e+00f)), T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused_2]);\n  }\n}"
    },
    {
        "op_name": "graph_29",
        "c_code": "void default_function_kernel(float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 100; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 10; ++ax2) {\n      for (int32_t ax3_inner = 0; ax3_inner < 10; ++ax3_inner) {\n        T_transpose[(((ax0_ax1_fused * 100) + (ax2 * 10)) + ax3_inner)] = tanhf(max(min(log2f(ph[(((((ax3_inner * 31944) + ((ax0_ax1_fused / 10) * 1452)) + (ax2 * 44)) + (ax0_ax1_fused % 10)) + 16973)]), 1.000000e+01f), 0.000000e+00f));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = max(min(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))], 1.000000e+01f), 0.000000e+00f);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_3(float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = tanhf(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_4(float* __restrict__ T_strided_slice, float* __restrict__ T_transpose) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_transpose[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = T_strided_slice[(((((((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10) * 1000) + ((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 100)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 10)) + ((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25))];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = ph[((((((((((int)blockIdx.x) * 128) + (((int)threadIdx.x) >> 3)) / 125) * 31944) + (((((((int)blockIdx.x) * 6) + (((int)threadIdx.x) >> 2)) % 250) / 25) * 1452)) + (((((((int)blockIdx.x) * 12) + (((int)threadIdx.x) >> 1)) % 50) / 5) * 44)) + (((((int)blockIdx.x) * 4) + ((int)threadIdx.x)) % 10)) + 16973)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice) {\n  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 625) {\n    T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))] = __log2f(T_strided_slice[((((int)blockIdx.x) * 1024) + ((int)threadIdx.x))]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), T_transpose: T.Buffer((10, 10, 10, 10), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for ax0_ax1_fused in T.parallel(100):\n            for ax2, ax3_inner in T.grid(10, 10):\n                T_transpose_1 = T.Buffer((10000,), data=T_transpose.data)\n                ph_1 = T.Buffer((351384,), data=ph.data)\n                T_transpose_1[ax0_ax1_fused * 100 + ax2 * 10 + ax3_inner] = T.tanh(T.max(T.min(T.log2(ph_1[ax3_inner * 31944 + ax0_ax1_fused // 10 * 1452 + ax2 * 44 + ax0_ax1_fused % 10 + 16973]), T.float32(10)), T.float32(0)))",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44]]",
        "output_shape": "[[10, 10, 10, 10]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "T_transpose"
        ],
        "deepseek_c": "#pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 31944; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] = ph[((((((((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 31944) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 1452) / 44) * 1452)) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) % 22) * 44))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) / 22) * 44))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) / 22) / 22))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) / 22) / 22))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) / 22) / 22))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) / 22) / 22))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) / 22) / 22))) + 16973)];\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 31944; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] = max(min(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused], 1.000000e+01f), 0.000000e+00f);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 31944; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] = log2f(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 31944; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused] = tanhf(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 31944; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_transpose[ax0_ax1_fused_ax2_fused_ax3_fused] = T_strided_slice[((((((((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 31944) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 1452) / 44) * 1452)) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 1452) / 44) * 44)))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 1452) / 44) * 44)))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 1452) / 44) * 44)))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 1452) / 44) * 44)))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 1452) / 44) * 44)))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 1452) / 44) * 44)))) + (((ax0_ax1_fused_ax2_fused_ax3_fused % 44) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused / 1452) * 44) + (((ax0_ax1_fused_ax2_fused_ax3_fused %",
        "starcoder_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_strided_slice_2, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 220; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 10; ++ax3) {\n        T_strided_slice[(((ax0_ax1_fused * 330) + (ax2 * 10)) + ax3)] = ph[((((((ax0_ax1_fused / 11) * 31944) + (ax2 * 1452)) + (ax3 * 44)) + 16973) + (ax0_ax1_fused % 11))];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 220; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 33; ++i2) {\n      for (int32_t i3 = 0; i3 < 10; ++i3) {\n        T_strided_slice_1[(((i0_i1_fused * 330) + (i2 * 10)) + i3)] = log2f(T_strided_slice[(((i0_i1_fused * 330) + (i2 * 10)) + i3)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 660; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3_1 = 0; i3_1 < 10; ++i3_1) {\n      T_strided_slice_2[((i0_i1_fused_i2_fused * 10) + i3_1)] = max(min(T_strided_slice_1[((i0_i1_fused_i2_fused * 10) + i3_1)], 1.000000e+01f), 0.000000e+00f);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 660; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3_1 = 0; ax3_1 < 10; ++ax3_1) {\n      T_transpose[((ax0_ax1_fused_ax2_fused * 10) + ax3_1)] = T_strided_slice_2[(((ax0_ax1_fused_ax2_fused / 11) * 100) + ((ax3_1 * 10) + (ax0_ax1_fused_ax2_fused % 11)))];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 660; ++i0_i1_fused_i2_fused_1) {\n    for (int32_t i3_2 = 0; i3_2 < 10; ++i3_2) {\n      T_strided_slice_2[((i0_i1_fused_i2_fused_1 * 10) + i3_2)] = tanhf(T_strided_slice_2[((i0_i1_fused_i2_fused_1 * 10) + i3_2)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_strided_slice_2, float* T_strided_slice_3, float* T_transpose, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2664; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused * 44) + ax3)] = ph[(((((ax0_ax1_fused_ax2_fused % 22) * 31944) + ((ax0_ax1_fused_ax2_fused / 22) * 1452)) + ((ax3 / 5) * 44)) + ((ax0_ax1_fused_ax2_fused / 22) * 5)) + (ax3 % 5)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused = 0; ax0_ax1_fused_ax2_fused_ax3_fused < 11680; ++ax0_ax1_fused_ax2_fused_ax3_fused) {\n    T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused] = log2f(T_strided_slice[ax0_ax1_fused_ax2_fused_ax3_fused]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_1 < 11680; ++ax0_ax1_fused_ax2_fused_ax3_fused_1) {\n    T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused_1] = max(min(T_strided_slice_1[ax0_ax1_fused_ax2_fused_ax3_fused_1], 1.000000e+01f), 0.000000e+00f);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_2 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_2 < 11680; ++ax0_ax1_fused_ax2_fused_ax3_fused_2) {\n    T_strided_slice_3[ax0_ax1_fused_ax2_fused_ax3_fused_2] = tanhf(T_strided_slice_2[ax0_ax1_fused_ax2_fused_ax3_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_ax3_fused_3 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_3 < 11680; ++ax0_ax1_fused_ax2_fused_ax3_fused_3) {\n    T_transpose[ax0_ax1_fused_ax2_fused_ax3_fused_3] = T_strided_slice[(((((ax0_ax1_fused_ax2_fused_ax3_fused_3 % 10) * 1000) + ((ax0_ax1_fused_ax2_fused_ax3_fused_3 / 10) * 100)) + (((ax0_ax1_fused_ax2_fused_ax3_fused_3 % 50) / 5) * 10)) + ((ax0_ax1_fused_ax2_fused_ax3_fused_3 / 50) * 5))];\n  }\n}"
    },
    {
        "op_name": "graph_30",
        "c_code": "void default_function_kernel(float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 8; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 6; ++i2) {\n      for (int32_t i3_inner = 0; i3_inner < 8; ++i3_inner) {\n        compute[(((i0_i1_fused * 48) + (i2 * 8)) + i3_inner)] = expf(roundf(log10f(ph[((((((i0_i1_fused >> 2) * 31944) + ((i0_i1_fused & 3) * 1452)) + (i2 * 44)) + i3_inner) + 149194)])));\n      }\n    }\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(384) default_function_kernel_3(float* __restrict__ T_strided_slice, float* __restrict__ compute) {\n  compute[((int)threadIdx.x)] = __expf(T_strided_slice[((int)threadIdx.x)]);\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel(float* __restrict__ T_strided_slice, float* __restrict__ ph) {\n  if (((int)threadIdx.x) < 384) {\n    T_strided_slice[((int)threadIdx.x)] = ph[((((((((int)threadIdx.x) / 192) * 31944) + (((((int)threadIdx.x) % 192) / 48) * 1452)) + (((((int)threadIdx.x) % 48) >> 3) * 44)) + (((int)threadIdx.x) & 7)) + 149194)];\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_1(float* __restrict__ T_strided_slice) {\n  if (((int)threadIdx.x) < 384) {\n    T_strided_slice[((int)threadIdx.x)] = __log10f(T_strided_slice[((int)threadIdx.x)]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(1024) default_function_kernel_2(float* __restrict__ T_strided_slice) {\n  if (((int)threadIdx.x) < 384) {\n    T_strided_slice[((int)threadIdx.x)] = roundf(T_strided_slice[((int)threadIdx.x)]);\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph: T.Buffer((11, 22, 33, 44), \"float32\"), compute: T.Buffer((2, 4, 6, 8), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        for i0_i1_fused in T.parallel(8):\n            for i2, i3_inner in T.grid(6, 8):\n                compute_1 = T.Buffer((384,), data=compute.data)\n                ph_1 = T.Buffer((351384,), data=ph.data)\n                compute_1[i0_i1_fused * 48 + i2 * 8 + i3_inner] = T.exp(T.round(T.log10(ph_1[i0_i1_fused // 4 * 31944 + i0_i1_fused % 4 * 1452 + i2 * 44 + i3_inner + 149194])))",
        "op_args": "None",
        "input_shape": "[[11, 22, 33, 44]]",
        "output_shape": "[[2, 4, 6, 8]]",
        "input_name": [
            "ph"
        ],
        "output_name": [
            "compute"
        ],
        "deepseek_c": "void default_function_kernel(float* T_strided_slice, float* ph, float* compute) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused = 0; i0_i1_fused_i2_fused_i3_fused < 31944; ++i0_i1_fused_i2_fused_i3_fused) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused] = ph[((((((i0_i1_fused_i2_fused_i3_fused / 192) * 31944) + (((i0_i1_fused_i2_fused_i3_fused % 192) / 48) * 1452)) + (((i0_i1_fused_i2_fused_i3_fused % 48) >> 3) * 44)) + (i0_i1_fused_i2_fused_i3_fused & 7)) + 149194)];\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_1 = 0; i0_i1_fused_i2_fused_i3_fused_1 < 31944; ++i0_i1_fused_i2_fused_i3_fused_1) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_1] = log10f(T_strided_slice[i0_i1_fused_i2_fused_i3_fused_1]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_2 = 0; i0_i1_fused_i2_fused_i3_fused_2 < 31944; ++i0_i1_fused_i2_fused_i3_fused_2) {\n    T_strided_slice[i0_i1_fused_i2_fused_i3_fused_2] = roundf(T_strided_slice[i0_i1_fused_i2_fused_i3_fused_2]);\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_i3_fused_3 = 0; i0_i1_fused_i2_fused_i3_fused_3 < 31944; ++i0_i1_fused_i2_fused_i3_fused_3) {\n    compute[i0_i1_fused_i2_fused_i3_fused_3] = expf(T_strided_slice[i0_i1_fused_i2_fused_i3_fused_3]);\n  }\n}",
        "starcoder_c": "void default_function_kernel(float* T_strided_slice, float* T_strided_slice_1, float* T_strided_slice_2, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 22; ++ax0_ax1_fused) {\n    for (int32_t ax2 = 0; ax2 < 33; ++ax2) {\n      for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n        T_strided_slice[(((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3)] = ph[((((ax0_ax1_fused * 1452) + (ax2 * 44)) + ax3) + 149194)];\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 22; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 33; ++i2) {\n      for (int32_t i3 = 0; i3 < 44; ++i3) {\n        T_strided_slice_1[(((i0_i1_fused * 1452) + (i2 * 44)) + i3)] = log10f(T_strided_slice[(((i0_i1_fused * 1452) + (i2 * 44)) + i3)]);\n      }\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 726; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3_1 = 0; i3_1 < 44; ++i3_1) {\n      T_strided_slice_2[((i0_i1_fused_i2_fused * 44) + i3_1)] = roundf(T_strided_slice[(((i0_i1_fused_i2_fused * 44) + i3_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 726; ++i0_i1_fused_i2_fused_1) {\n    for (int32_t i3_2 = 0; i3_2 < 44; ++i3_2) {\n      compute[((i0_i1_fused_i2_fused_1 * 44) + i3_2)] = expf(T_strided_slice_1[((i0_i1_fused_i2_fused_1 * 44) + i3_2)]);\n    }\n  }\n}",
        "codellama_c": "void default_function_kernel(float* T_strided_slice, float* compute, float* ph) {\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2664; ++ax0_ax1_fused_ax2_fused) {\n    for (int32_t ax3 = 0; ax3 < 44; ++ax3) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused * 44) + ax3)] = ph[(((((ax0_ax1_fused_ax2_fused / 11) * 31944) + (((ax0_ax1_fused_ax2_fused % 11) * 696)) + (ax3 * 2)) + 149194)]];\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 2664; ++ax0_ax1_fused_ax2_fused_1) {\n    for (int32_t ax3_1 = 0; ax3_1 < 44; ++ax3_1) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused_1 * 44) + ax3_1)] = log10f(T_strided_slice[((ax0_ax1_fused_ax2_fused_1 * 44) + ax3_1)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t ax0_ax1_fused_ax2_fused_2 = 0; ax0_ax1_fused_ax2_fused_2 < 2664; ++ax0_ax1_fused_ax2_fused_2) {\n    for (int32_t ax3_2 = 0; ax3_2 < 44; ++ax3_2) {\n      T_strided_slice[((ax0_ax1_fused_ax2_fused_2 * 44) + ax3_2)] = roundf(T_strided_slice[((ax0_ax1_fused_ax2_fused_2 * 44) + ax3_2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 2664; ++i0_i1_fused_i2_fused) {\n    for (int32_t i3 = 0; i3 < 44; ++i3) {\n      compute[((i0_i1_fused_i2_fused * 44) + i3)] = expf(T_strided_slice[((i0_i1_fused_i2_fused * 44) + i3)]);\n    }\n  }\n}"
    }
]